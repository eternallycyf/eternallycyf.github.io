<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实现Vue的v-for</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0Vue%E7%9A%84v-for/</url>
    <content><![CDATA[<h2 id="实现Vue的v-for"><a href="#实现Vue的v-for" class="headerlink" title="实现Vue的v-for"></a>实现Vue的v-for</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── compileTemplate.js</span><br><span class="line">├── components</span><br><span class="line">│   ├── TestA</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── TestB</span><br><span class="line">│       └── index.js</span><br><span class="line">├── handler.js</span><br><span class="line">├── index.html</span><br><span class="line">├── index.js</span><br><span class="line">├── reactive.js</span><br><span class="line">└── utils.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> TestA <span class="keyword">from</span> <span class="string">&#x27;./components/TestA/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> TestB <span class="keyword">from</span> <span class="string">&#x27;./components/TestB/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">  <span class="attr">components</span>: [TestA, TestB]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="components-TestA-index-js"><a href="#components-TestA-index-js" class="headerlink" title="components/TestA/index.js"></a>components/TestA/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReative &#125; <span class="keyword">from</span> <span class="string">&#x27;../../reactive.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul class=&#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; dateTime &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;for data=&quot;list&quot; tag=&quot;li&quot; class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;姓名：&#123; name &#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/for&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = createReative(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;测试标题A&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2012-12-12 12:12&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">11</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">33</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [template, state]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TestA</span><br></pre></td></tr></table></figure>

<h3 id="components-TestB-index-js"><a href="#components-TestB-index-js" class="headerlink" title="components/TestB/index.js"></a>components/TestB/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReative &#125; <span class="keyword">from</span> <span class="string">&#x27;../../reactive.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul class=&#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; dateTime &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;for data=&quot;list&quot; tag=&quot;li&quot; class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;姓名：&#123; name &#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/for&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = createReative(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;测试标题B&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2012-12-12 12:12&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">11</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">33</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [template, state]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TestB</span><br></pre></td></tr></table></figure>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReative &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; compileTemplate &#125; <span class="keyword">from</span> <span class="string">&#x27;./compileTemplate.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> domNodePool = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> option <span class="keyword">in</span> options) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;components&#x27;</span>:</span><br><span class="line">        initComponent(options[option])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComponent</span>(<span class="params">components</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> component <span class="keyword">of</span> components) &#123;</span><br><span class="line">    <span class="keyword">let</span> [template, state] = component()</span><br><span class="line">    <span class="keyword">const</span> node = compileTemplate(template, state)</span><br><span class="line">    domNodePool.push(node)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">  <span class="keyword">const</span> oFlag = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"></span><br><span class="line">  domNodePool.forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    oFlag.appendChild(node)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.appendChild(oFlag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="reactive-js"><a href="#reactive-js" class="headerlink" title="reactive.js"></a>reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; proxyHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;./handler.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createReative</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveData(state, proxyHandler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveData</span>(<span class="params">data, proxyHandler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(data)) <span class="keyword">return</span> data;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, proxyHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwnProperty</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> newValue === oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  isObject,</span><br><span class="line">  hasOwnProperty,</span><br><span class="line">  isEqual</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="handler-js"><a href="#handler-js" class="headerlink" title="handler.js"></a>handler.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject, hasOwnProperty, isEqual &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createReative &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = createGetter();</span><br><span class="line"><span class="keyword">const</span> set = createSetter();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">target, property, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, property, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> createReative(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive get the Property： &#x27;</span> + target[property]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">target, property, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isKeyExist = hasOwnProperty(target, property);</span><br><span class="line">    <span class="keyword">const</span> oldValue = target[property];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, property, value, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isKeyExist) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive add the Property： &#x27;</span> + property + <span class="string">&#x27;-----to----&gt;&#x27;</span> + value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isEqual(value, oldValue)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive set the Property： &#x27;</span> + property + <span class="string">&#x27;-----to----&gt;&#x27;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> proxyHandler = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="compileTemplate-js"><a href="#compileTemplate-js" class="headerlink" title="compileTemplate.js"></a>compileTemplate.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> customTags = [<span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> reg_single_bracket = <span class="regexp">/\&#123;(.*?)\&#125;/g</span>;</span><br><span class="line"><span class="keyword">const</span> reg_double_bracket = <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compileTemplate</span>(<span class="params">template, data</span>) </span>&#123;</span><br><span class="line">  template = replaceVar(template, data, reg_double_bracket)</span><br><span class="line">  <span class="keyword">const</span> _node = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  _node.innerHTML = template</span><br><span class="line">  <span class="keyword">return</span> compileNode(_node, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileNode</span>(<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> allNodes = node.querySelectorAll(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  allNodes.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tagName = item.tagName.toLowerCase()</span><br><span class="line">    <span class="keyword">if</span> (customTags.includes(tagName)) &#123;</span><br><span class="line">      replaceNode(item, tagName, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [...node.childNodes].find(<span class="function"><span class="params">item</span> =&gt;</span> item.nodeType === <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNode</span>(<span class="params">node, tag, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dataKey = node.getAttribute(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> className = node.className;</span><br><span class="line">  <span class="keyword">const</span> realTag = node.getAttribute(<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;for&#x27;</span>:</span><br><span class="line">      vFor(node, data, dataKey, className, realTag);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vFor</span>(<span class="params">node, data, dataKey, className, realTag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oFrag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">  data[dataKey].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(realTag)</span><br><span class="line">    el.className = className ? className : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    el.innerHTML = replaceVar(node.innerHTML, item, reg_single_bracket)</span><br><span class="line">    oFrag.appendChild(el)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  node.parentNode.replaceChild(oFrag, node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceVar</span>(<span class="params">html, data, reg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> html.replace(reg, <span class="function">(<span class="params">node, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    key = key.trim()</span><br><span class="line">    <span class="keyword">return</span> obj[key] = data[key]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/vue-v-for">https://github.com/eternallycyf/vue-v-for</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Vue的computed和watch</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0Vue%E7%9A%84computed%E5%92%8Cwatch/</url>
    <content><![CDATA[<h2 id="实现Vue的computed和watch"><a href="#实现Vue的computed和watch" class="headerlink" title="实现Vue的computed和watch"></a>实现Vue的computed和watch</h2><ul>
<li><code>npx server</code></li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── computed.js</span><br><span class="line">├── index.html</span><br><span class="line">├── index.js</span><br><span class="line">├── reactive.js</span><br><span class="line">├── vue.js</span><br><span class="line">└── watcher.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;./vue.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">total</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;computed is loading&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">total</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;watch total：&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">a</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;watch a：&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">b</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;watch b：&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次执行 后面computed缓存</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"></span><br><span class="line">vm.a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br><span class="line"><span class="built_in">console</span>.log(vm.total);</span><br></pre></td></tr></table></figure>

<h3 id="vue-js"><a href="#vue-js" class="headerlink" title="vue.js"></a>vue.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> Computed <span class="keyword">from</span> <span class="string">&#x27;./computed.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">&#x27;./watcher.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, computed, watch &#125; = options;</span><br><span class="line">    <span class="built_in">this</span>.$data = data()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.init(<span class="built_in">this</span>, computed, watch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params">vm, computed, watch</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initData(vm)</span><br><span class="line">    <span class="keyword">const</span> computedIns = <span class="built_in">this</span>.initComputed(vm, computed)</span><br><span class="line">    <span class="keyword">const</span> watchIns = <span class="built_in">this</span>.initWatcher(vm, watch)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$computed = computedIns.update.bind(computedIns)</span><br><span class="line">    <span class="built_in">this</span>.$watch = watchIns.invoke.bind(watchIns)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initData</span>(<span class="params">vm</span>)</span> &#123;</span><br><span class="line">    reactive(vm, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(key, value);</span></span><br><span class="line">    &#125;, <span class="function">(<span class="params">key, newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue == oldValue) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// console.log(key, newValue, oldValue);</span></span><br><span class="line">      <span class="built_in">this</span>.$computed(key, <span class="built_in">this</span>.$watch)</span><br><span class="line">      <span class="built_in">this</span>.$watch(key, newValue, oldValue)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initComputed</span>(<span class="params">vm, computed</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> computedIns = <span class="keyword">new</span> Computed()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">      computedIns.addComputed(vm, computed, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> computedIns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initWatcher</span>(<span class="params">vm, watch</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> watchIns = <span class="keyword">new</span> Watcher()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">      watchIns.addWatcher(vm, watch, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> watchIns</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<h3 id="reactive-js"><a href="#reactive-js" class="headerlink" title="reactive.js"></a>reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">vm, __get__, __set__</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _data = vm.$data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        __get__(key, _data[key])</span><br><span class="line">        <span class="keyword">return</span> _data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> oldValue = _data[key]</span><br><span class="line">        _data[key] = newValue;</span><br><span class="line">        __set__(key, newValue, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="computed-js"><a href="#computed-js" class="headerlink" title="computed.js"></a>computed.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computed</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computedData = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addComputed</span>(<span class="params">vm, computed, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(computed, key)</span><br><span class="line">    <span class="keyword">const</span> descriptorFn = descriptor.value.get ? descriptor.value.get : descriptor.value</span><br><span class="line">    <span class="keyword">const</span> value = descriptorFn.call(vm)</span><br><span class="line">    <span class="keyword">const</span> get = descriptorFn.bind(vm)</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="built_in">this</span>._colletDep(descriptorFn)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._addComputedProp(&#123;</span><br><span class="line">      key,</span><br><span class="line">      value,</span><br><span class="line">      get,</span><br><span class="line">      dep</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dataItem = <span class="built_in">this</span>.computedData.find(<span class="function"><span class="params">item</span> =&gt;</span> item.key === key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataItem.value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">        dataItem.value = dataItem.get()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">key, watch</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computedData.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = item.dep;</span><br><span class="line">      <span class="keyword">const</span> _key = dep.find(<span class="function"><span class="params">el</span> =&gt;</span> el == key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_key) &#123;</span><br><span class="line">        <span class="keyword">const</span> oldValue = item.value</span><br><span class="line">        item.value = item.get();</span><br><span class="line">        watch(item.key, item.value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_addComputedProp</span>(<span class="params">computedProp</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computedData.push(computedProp)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_colletDep</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> matched = fn.toString().match(<span class="regexp">/this\.(.+?)/g</span>)</span><br><span class="line">    <span class="keyword">return</span> matched.map(<span class="function"><span class="params">item</span> =&gt;</span> item.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Computed</span><br></pre></td></tr></table></figure>

<h3 id="watcher-js"><a href="#watcher-js" class="headerlink" title="watcher.js"></a>watcher.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addWatcher</span>(<span class="params">vm, watcher, key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers.push(&#123;</span><br><span class="line">      key,</span><br><span class="line">      <span class="attr">fn</span>: watcher[key].bind(vm)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">invoke</span>(<span class="params">key, newValue, oldValue</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.key === key) &#123;</span><br><span class="line">        item.fn(newValue, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_addWatchProp</span>(<span class="params">watchProp</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.watchers.push(watchProp)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/vue-computed-watch">https://github.com/eternallycyf/vue-computed-watch</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现react-hook-useState</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0react-hook-useState/</url>
    <content><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul>
<li><code>yarn dev</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── useState.jsx</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;vite&quot;</span>: <span class="string">&quot;^2.9.5&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./useState.jsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="useState-jsx"><a href="#useState-jsx" class="headerlink" title="useState.jsx"></a>useState.jsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myReact = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> states = []</span><br><span class="line">  <span class="keyword">const</span> stateSetters = [];</span><br><span class="line">  <span class="keyword">let</span> stateIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// let _state;</span></span><br><span class="line">  <span class="comment">// function useState(initialState) &#123;</span></span><br><span class="line">  <span class="comment">//   _state = _state === undefined ? initialState : _state;</span></span><br><span class="line">  <span class="comment">//   const _setState = (newState) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     if (typeof newState === &#x27;function&#x27;) &#123;</span></span><br><span class="line">  <span class="comment">//       _state = newState(_state)</span></span><br><span class="line">  <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//       _state = newState</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//     render()</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   return [_state, _setState]</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createState</span>(<span class="params">initialState, stateIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> states[stateIndex] !== <span class="literal">undefined</span> ? states[stateIndex] : initialState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createStateSetter</span>(<span class="params">stateIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">newState</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> newState === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        states[stateIndex] = newState(states[stateIndex])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        states[stateIndex] = newState</span><br><span class="line">      &#125;</span><br><span class="line">      render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">    states[stateIndex] = createState(initialState, stateIndex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!stateSetters[stateIndex]) &#123;</span><br><span class="line">      stateSetters.push(createStateSetter(stateIndex))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> _state = states[stateIndex]</span><br><span class="line">    <span class="keyword">const</span> _setState = stateSetters[stateIndex]</span><br><span class="line"></span><br><span class="line">    stateIndex++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [_state, _setState]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    stateIndex = <span class="number">0</span>;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    useState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; useState &#125; = myReact;</span><br><span class="line"><span class="comment">// const &#123; useState &#125; = React;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;flag ? &#x27;open&#x27; : &#x27;close&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count =&gt; count - 1)&#125;&gt;sub<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setFlag(flag =&gt; flag = !flag)&#125;&gt;&#123;flag ? &#x27;关闭&#x27; : &#x27;打开&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Vue的v-if/v-show</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0Vue%E7%9A%84v-if/v-show/</url>
    <content><![CDATA[<h2 id="实现Vue的v-if-v-show"><a href="#实现Vue的v-if-v-show" class="headerlink" title="实现Vue的v-if/v-show"></a>实现Vue的v-if/v-show</h2><ul>
<li><code>vue</code> 的 <code>v-if</code> 通过注释元素进行占位</li>
</ul>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── index.js</span><br><span class="line">└── vue.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box-wrapper</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: cornflowerblue;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: mediumvioletred;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span> <span class="attr">v-if</span>=<span class="string">&#x27;boxShow1&#x27;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span> <span class="attr">v-show</span>=<span class="string">&#x27;boxShow2&#x27;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span> <span class="attr">v-if</span>=<span class="string">&#x27;boxShow3&#x27;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span> <span class="attr">v-show</span>=<span class="string">&#x27;boxShow4&#x27;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;showBox1&#x27;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;showBox2&#x27;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;showBox3&#x27;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;showBox4&#x27;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;./vue.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">boxShow1</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">boxShow2</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">boxShow3</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">boxShow4</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">showBox1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;click 1&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.boxShow1 = !<span class="built_in">this</span>.showBox1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">showBox2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;click 2&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.boxShow2 = !<span class="built_in">this</span>.showBox2</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">showBox3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;click 3&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.boxShow3 = !<span class="built_in">this</span>.showBox3</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">showBox4</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;click 4&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.boxShow4 = !<span class="built_in">this</span>.showBox4</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="vue-js"><a href="#vue-js" class="headerlink" title="vue.js"></a>vue.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; el, data, methods &#125; = options;</span><br><span class="line">    <span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.methods = methods;</span><br><span class="line">    <span class="built_in">this</span>.showPool = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="built_in">this</span>.eventPool = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.init()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initData()</span><br><span class="line">    <span class="built_in">this</span>.initDom(<span class="built_in">this</span>.el)</span><br><span class="line">    <span class="built_in">this</span>.initView(<span class="built_in">this</span>.showPool)</span><br><span class="line">    <span class="built_in">this</span>.initEvent(<span class="built_in">this</span>.eventPool)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">this</span>.data) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;#Getter：&#x27;</span>, <span class="built_in">this</span>.data[key]);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">this</span>.data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;#Setter：&#x27;</span>, key, newValue);</span><br><span class="line">          <span class="built_in">this</span>.data[key] = newValue</span><br><span class="line">          <span class="built_in">this</span>.domChange(key, <span class="built_in">this</span>.showPool)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initDom</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _childNodes = el.childNodes</span><br><span class="line">    <span class="keyword">if</span> (!_childNodes.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    _childNodes.forEach(<span class="function"><span class="params">dom</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (dom.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> vIf = dom.getAttribute(<span class="string">&#x27;v-if&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> vShow = dom.getAttribute(<span class="string">&#x27;v-show&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> vEvent = dom.getAttribute(<span class="string">&#x27;@click&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vIf) &#123;</span><br><span class="line">          <span class="built_in">this</span>.showPool.set(dom, &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;if&#x27;</span>,</span><br><span class="line">            <span class="attr">show</span>: <span class="built_in">this</span>.data[vIf],</span><br><span class="line">            <span class="attr">data</span>: vIf</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vShow) &#123;</span><br><span class="line">          <span class="built_in">this</span>.showPool.set(dom, &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;show&#x27;</span>,</span><br><span class="line">            <span class="attr">show</span>: <span class="built_in">this</span>.data[vShow],</span><br><span class="line">            <span class="attr">data</span>: vShow</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vEvent) &#123;</span><br><span class="line">          <span class="built_in">this</span>.eventPool.set(dom, <span class="built_in">this</span>.methods[vEvent])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.initDom(dom)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initView</span>(<span class="params">showPool</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.domChange(<span class="literal">null</span>, showPool)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">domChange</span>(<span class="params">data, showPool</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.type) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;if&#x27;</span>:</span><br><span class="line">            v.comment = <span class="built_in">document</span>.createComment(<span class="string">&#x27;v-if&#x27;</span>)</span><br><span class="line">            !v.show &amp;&amp; k.parentNode.replaceChild(v.comment, k)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;show&#x27;</span>:</span><br><span class="line">            !v.show &amp;&amp; (k.style.display = <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> showPool) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v.data === data) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.type) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;if&#x27;</span>:</span><br><span class="line">            v.show</span><br><span class="line">              ? k.parentNode.replaceChild(v.comment, k)</span><br><span class="line">              : v.comment.parentNode.replaceChild(k, v.comment)</span><br><span class="line">            v.show = !v.show</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;show&#x27;</span>:</span><br><span class="line">            v.show</span><br><span class="line">              ? (k.style.display = <span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">              : (k.style.display = <span class="string">&#x27;block&#x27;</span>)</span><br><span class="line">            v.show = !v.show</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initEvent</span>(<span class="params">eventPool</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> eventPool) &#123;</span><br><span class="line">      k.addEventListener(<span class="string">&#x27;click&#x27;</span>, v.bind(<span class="built_in">this</span>), <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/vue-v-if-v-show">https://github.com/eternallycyf/vue-v-if-v-show</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Vue的v-model</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0Vue%E7%9A%84v-model/</url>
    <content><![CDATA[<h2 id="实现Vue的v-model"><a href="#实现Vue的v-model" class="headerlink" title="实现Vue的v-model"></a>实现Vue的v-model</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── mvvm.js</span><br><span class="line">└── proxy.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;age&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;email&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;tel&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;电话号码&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; email &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        电话：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; tel &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>改变名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./mvvm.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./proxy.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="mvvm-js"><a href="#mvvm-js" class="headerlink" title="mvvm.js"></a>mvvm.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">el, data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">    <span class="built_in">this</span>._data = data;</span><br><span class="line">    <span class="built_in">this</span>.domPool = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initData()</span><br><span class="line">    <span class="built_in">this</span>.initDom()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initDom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bindDom(<span class="built_in">this</span>.el)</span><br><span class="line">    <span class="built_in">this</span>.bindInput(<span class="built_in">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">this</span>._data) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>.data, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;#get setter：&#x27;</span>, key, _this._data[key]);</span><br><span class="line">          <span class="keyword">return</span> _this._data[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;#set setter：&#x27;</span>, key, newValue);</span><br><span class="line">          _this.domPool[key].innerHTML = newValue</span><br><span class="line">          _this._data[key] = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">bindDom</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = el.childNodes</span><br><span class="line"></span><br><span class="line">    childNodes.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> _value = item.nodeValue;</span><br><span class="line">        <span class="keyword">if</span> (_value.trim().length) &#123;</span><br><span class="line">          <span class="keyword">let</span> _isValid = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>.test(_value)</span><br><span class="line">          <span class="keyword">if</span> (_isValid) &#123;</span><br><span class="line">            <span class="keyword">const</span> _key = _value.match(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>)[<span class="number">1</span>].trim()</span><br><span class="line">            <span class="built_in">this</span>.domPool[_key] = item.parentNode;</span><br><span class="line">            item.parentNode.innerText = <span class="built_in">this</span>.data[_key] || <span class="literal">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      item.childNodes &amp;&amp; <span class="built_in">this</span>.bindDom(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">bindInput</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _allInputs = el.querySelectorAll(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    _allInputs.forEach(<span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _vModel = input.getAttribute(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (_vModel) &#123;</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="built_in">this</span>.handleInput.bind(<span class="built_in">this</span>, _vModel, input), <span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleInput</span>(<span class="params">key, input</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _value = input.value;</span><br><span class="line">    <span class="built_in">this</span>.data[key] = _value;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setData</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> MVVM(<span class="string">&#x27;#app&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;myname&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;9999@99&quot;</span>,</span><br><span class="line">  <span class="attr">tel</span>: <span class="string">&quot;111212&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>)?.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  app.setData(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;newName&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="proxy-js"><a href="#proxy-js" class="headerlink" title="proxy.js"></a>proxy.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">el, data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.domPool = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initData()</span><br><span class="line">    <span class="built_in">this</span>.initDom()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initDom</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bindDom(<span class="built_in">this</span>.el)</span><br><span class="line">    <span class="built_in">this</span>.bindInput(<span class="built_in">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">initData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="built_in">this</span>.data, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">target, key, value</span>)</span> &#123;</span><br><span class="line">        _this.domPool[key].innerHTML = value</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">bindDom</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childNodes = el.childNodes</span><br><span class="line"></span><br><span class="line">    childNodes.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> _value = item.nodeValue;</span><br><span class="line">        <span class="keyword">if</span> (_value.trim().length) &#123;</span><br><span class="line">          <span class="keyword">let</span> _isValid = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>.test(_value)</span><br><span class="line">          <span class="keyword">if</span> (_isValid) &#123;</span><br><span class="line">            <span class="keyword">const</span> _key = _value.match(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>)[<span class="number">1</span>].trim()</span><br><span class="line">            <span class="built_in">this</span>.domPool[_key] = item.parentNode;</span><br><span class="line">            item.parentNode.innerText = <span class="built_in">this</span>.data[_key] || <span class="literal">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      item.childNodes &amp;&amp; <span class="built_in">this</span>.bindDom(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">bindInput</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _allInputs = el.querySelectorAll(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    _allInputs.forEach(<span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _vModel = input.getAttribute(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (_vModel) &#123;</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="built_in">this</span>.handleInput.bind(<span class="built_in">this</span>, _vModel, input), <span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleInput</span>(<span class="params">key, input</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _value = input.value;</span><br><span class="line">    <span class="built_in">this</span>.data[key] = _value;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setData</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> MVVM(<span class="string">&#x27;#app&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;myname&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;9999@99&quot;</span>,</span><br><span class="line">  <span class="attr">tel</span>: <span class="string">&quot;111212&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn&quot;</span>)?.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  app.setData(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;newName&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue-v-model">https://github.com/eternallycyf/Vue-v-model</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Vue的Diff算法</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0Vue%E7%9A%84Diff%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="实现Vue的Diff算法"><a href="#实现Vue的Diff算法" class="headerlink" title="实现Vue的Diff算法"></a>实现Vue的Diff算法</h2><ul>
<li><code>npx server</code></li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── Element.js</span><br><span class="line">    ├── doPatch.js</span><br><span class="line">    ├── domDiff.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── patchTypes.js</span><br><span class="line">    └── virtualDom.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;./src/index.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="src-Element-js"><a href="#src-Element-js" class="headerlink" title="src/Element.js"></a>src/Element.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">type, props, children</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.props = props;</span><br><span class="line">    <span class="built_in">this</span>.children = children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Element</span><br></pre></td></tr></table></figure>

<h3 id="src-doPatch-js"><a href="#src-doPatch-js" class="headerlink" title="src/doPatch.js"></a>src/doPatch.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ATTR,</span><br><span class="line">  TEXT,</span><br><span class="line">  REPLACE,</span><br><span class="line">  REMOVE</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./patchTypes.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setAttrs, render &#125; <span class="keyword">from</span> <span class="string">&#x27;./virtualDom.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;./Element.js&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> finalPatches = &#123;&#125;,<span class="comment">//储存patches</span></span><br><span class="line">  rnIndex = <span class="number">0</span>;<span class="comment">//真实节点index</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doPatch</span>(<span class="params">rDom, patches</span>) </span>&#123;</span><br><span class="line">  finalPatches = patches;</span><br><span class="line">  rNodeWalk(rDom)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理真实节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rNodeWalk</span>(<span class="params">rNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> rnPath = finalPatches[rnIndex++],</span><br><span class="line">    childNodes = rNode.childNodes;</span><br><span class="line">  <span class="comment">//子节点为类数组</span></span><br><span class="line">  [...childNodes].map(<span class="function">(<span class="params">childrenNode</span>) =&gt;</span> &#123;</span><br><span class="line">    rNodeWalk(childrenNode)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 判断是否需要更新节点</span></span><br><span class="line">  <span class="keyword">if</span> (rnPath) &#123;</span><br><span class="line">    patchAction(rNode, rnPath);<span class="comment">//当前节点所对应的需要更新的内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchAction</span>(<span class="params">rNode, rnPath</span>) </span>&#123;</span><br><span class="line">  rnPath.map(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (path.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> ATTR:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> path.attrs) &#123;</span><br><span class="line">          <span class="keyword">const</span> value = path.attrs[key];</span><br><span class="line">          <span class="comment">// 之前有的，现在有的-&gt;添加更新</span></span><br><span class="line">          <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            setAttrs(rNode, key, value)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 之前有的，现在没了 -&gt;删除</span></span><br><span class="line">            rNode.removeAttribute(key)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> TEXT:</span><br><span class="line">        <span class="comment">// 设置节点文本内容</span></span><br><span class="line">        rNode.textContent = path.text</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> REPLACE:</span><br><span class="line">        <span class="comment">// 判断是否被Element构造出来的，不是那会是文本节点，是的话直接给render转换成真实节点</span></span><br><span class="line">        <span class="keyword">const</span> newNode = (path.newNode <span class="keyword">instanceof</span> Element)</span><br><span class="line">          ? render(path.newNode)</span><br><span class="line">          : <span class="built_in">document</span>.createTextNode(path.newNode);</span><br><span class="line">        <span class="comment">// 替换真实节点</span></span><br><span class="line">        rNode.parentNode.replaceChild(newNode, rNode);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> REMOVE:</span><br><span class="line">        <span class="comment">// 找到父亲杀儿子</span></span><br><span class="line">        rNode.parentNode.removeChild(rNode);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> doPatch;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="src-domDiff-js"><a href="#src-domDiff-js" class="headerlink" title="src/domDiff.js"></a>src/domDiff.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ATTR,</span><br><span class="line">  TEXT,</span><br><span class="line">  REPLACE,</span><br><span class="line">  REMOVE</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./patchTypes.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> patches = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> vnIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domDiff</span>(<span class="params">oldVDom, newVDom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  vNodeWalk(oldVDom, newVDom, index)</span><br><span class="line">  <span class="keyword">return</span> patches;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vNodeWalk</span>(<span class="params">oldNode, newNode, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> vnPatch = [];</span><br><span class="line">  <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">    <span class="comment">// 被删除</span></span><br><span class="line">    vnPatch.push(&#123;</span><br><span class="line">      <span class="attr">type</span>: REMOVE,</span><br><span class="line">      index</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> oldNode === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> newNode === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//两个节点都是文本节点 比较文本内容</span></span><br><span class="line">    <span class="keyword">if</span> (oldNode !== newNode) &#123;</span><br><span class="line">      <span class="comment">// 更新</span></span><br><span class="line">      vnPatch.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: TEXT,</span><br><span class="line">        <span class="attr">text</span>: newNode</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldNode.type === newNode.type) &#123;</span><br><span class="line">    <span class="comment">// 组件名一样</span></span><br><span class="line">    <span class="comment">// 对比props</span></span><br><span class="line">    <span class="keyword">const</span> attrPath = attrsWalk(oldNode.props, newNode.props);</span><br><span class="line">    <span class="comment">// 有差异</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(attrPath).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      vnPatch.push(&#123;</span><br><span class="line">        <span class="attr">type</span>: ATTR,</span><br><span class="line">        <span class="attr">attrs</span>: attrPath</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    childrenWalk(oldNode.children, newNode.children)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 替换</span></span><br><span class="line">    vnPatch.push(&#123;</span><br><span class="line">      <span class="attr">type</span>: REPLACE,</span><br><span class="line">      newNode</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vnPatch.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    patches[index] = vnPatch;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对比属性异同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attrsWalk</span>(<span class="params">oldAttrs, newAttrs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> attrPath = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> oldAttrs) &#123;</span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    <span class="keyword">if</span> (oldAttrs[key] !== newAttrs[key]) &#123;</span><br><span class="line">      attrPath[key] = newAttrs[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newAttrs) &#123;</span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="keyword">if</span> (!oldAttrs.hasOwnProperty(key)) &#123;</span><br><span class="line">      attrPath[key] = newAttrs[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> attrPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对比儿子异同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">childrenWalk</span>(<span class="params">oldChildren, newChildren</span>) </span>&#123;</span><br><span class="line">  oldChildren.map(<span class="function">(<span class="params">children, index</span>) =&gt;</span> &#123;</span><br><span class="line">    vNodeWalk(children, newChildren[index], ++vnIndex)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> domDiff;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createElement, render, renderDOM &#125; <span class="keyword">from</span> <span class="string">&#x27;./virtualDom.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> domDiff <span class="keyword">from</span> <span class="string">&#x27;./domDiff.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> doPatch <span class="keyword">from</span> <span class="string">&#x27;./doPatch.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vDomOld = createElement(<span class="string">&#x27;ul&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">class</span>: <span class="string">&#x27;list1&#x27;</span>,</span><br><span class="line">  <span class="attr">style</span>: <span class="string">&#x27;width: 300px;height: 300px; background-color: orange&#x27;</span>,</span><br><span class="line">&#125;, [</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">0</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第1个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第2个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">2</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第3个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">3</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第4个列表项&#x27;</span>])</span><br><span class="line">  ])</span><br><span class="line">]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rDom = render(vDomOld)</span><br><span class="line">renderDOM(rDom, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vDomNew = createElement(<span class="string">&#x27;ul&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">class</span>: <span class="string">&#x27;list2&#x27;</span>,</span><br><span class="line">  <span class="attr">style</span>: <span class="string">&#x27;width: 300px;height: 300px; background-color: orange&#x27;</span>,</span><br><span class="line">&#125;, [</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">0</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第1个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第2个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">2</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;第3个列表项&#x27;</span>])</span><br><span class="line">  ]),</span><br><span class="line">  createElement(<span class="string">&#x27;li&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data-index&#x27;</span>: <span class="number">3</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;h1&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;text&#x27;</span> &#125;, [<span class="string">&#x27;越难越爱&#x27;</span>, <span class="string">&#x27;---&#x27;</span>])</span><br><span class="line">  ])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patches = domDiff(vDomOld, vDomNew)</span><br><span class="line"><span class="built_in">console</span>.log(patches);</span><br><span class="line">doPatch(rDom, patches)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="src-patchTypes-js"><a href="#src-patchTypes-js" class="headerlink" title="src/patchTypes.js"></a>src/patchTypes.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ATTR = <span class="string">&#x27;ATTR&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> TEXT = <span class="string">&#x27;TEXT&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REPLACE = <span class="string">&#x27;REPLACE&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REMOVE = <span class="string">&#x27;REMOVE&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  ATTR,</span><br><span class="line">  TEXT,</span><br><span class="line">  REPLACE,</span><br><span class="line">  REMOVE</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="src-virtualDom-js"><a href="#src-virtualDom-js" class="headerlink" title="src/virtualDom.js"></a>src/virtualDom.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;./Element.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Element(type, props, children);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAttrs</span>(<span class="params">node, prop, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (prop) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;value&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (node.tagName === <span class="string">&#x27;INPUT&#x27;</span> || node.tagName === <span class="string">&#x27;TEXTAREA&#x27;</span>) &#123;</span><br><span class="line">        node.value = value</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.setAttribute(prop, value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;style&#x27;</span>:</span><br><span class="line">      node.style.cssText = value</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      node.setAttribute(prop, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vDom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, props, children &#125; = vDom</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(type)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    setAttrs(el, key, props[key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  children.map(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    c = c <span class="keyword">instanceof</span> Element ? render(c) : <span class="built_in">document</span>.createTextNode(c)</span><br><span class="line">    el.appendChild(c)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderDOM</span>(<span class="params">rDom, rootEl</span>) </span>&#123;</span><br><span class="line">  rootEl.appendChild(rDom)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createElement,</span><br><span class="line">  render,</span><br><span class="line">  setAttrs,</span><br><span class="line">  renderDOM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue-diff">https://github.com/eternallycyf/Vue-diff</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3利用Reflect和Proxy实现Reactive</title>
    <url>/eternallycyf/Vue3%E5%88%A9%E7%94%A8Reflect%E5%92%8CProxy%E5%AE%9E%E7%8E%B0Reactive/</url>
    <content><![CDATA[<h2 id="Vue3实现数据代理"><a href="#Vue3实现数据代理" class="headerlink" title="Vue3实现数据代理"></a>Vue3实现数据代理</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── vue3</span><br><span class="line">        ├── reactivity</span><br><span class="line">        │   ├── index.js</span><br><span class="line">        │   ├── mutableHandle.js</span><br><span class="line">        │   └── reactive.js</span><br><span class="line">        └── shared</span><br><span class="line">            └── utils.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&#x27;./src/index.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./vue3/reactivity/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">students</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;computed&#x27;</span>, <span class="string">&#x27;movie&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">state.age = <span class="number">120</span></span><br><span class="line"><span class="comment">// 获取不到深层的结构 需要递归处理</span></span><br><span class="line">state.info.title</span><br><span class="line">state.info.students.push(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;aaa&#x27;</span> &#125;)</span><br><span class="line">state.aaaadsas = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(state);</span><br></pre></td></tr></table></figure>


<h3 id="src-vue3-shared-index-js"><a href="#src-vue3-shared-index-js" class="headerlink" title="src/vue3/shared/index.js"></a>src/vue3/shared/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwnProperty</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> newValue === oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  isObject,</span><br><span class="line">  hasOwnProperty,</span><br><span class="line">  isEqual</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="src-vue3-reactivity-index-js"><a href="#src-vue3-reactivity-index-js" class="headerlink" title="src/vue3/reactivity/index.js"></a>src/vue3/reactivity/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  reactive</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="src-vue3-reactivity-mutableHandle-js"><a href="#src-vue3-reactivity-mutableHandle-js" class="headerlink" title="src/vue3/reactivity/mutableHandle.js"></a>src/vue3/reactivity/mutableHandle.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isObject, hasOwnProperty, isEqual &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/utils.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = createGetter();</span><br><span class="line"><span class="keyword">const</span> set = createSetter();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">target, property, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, property, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reactive(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive get the Property： &#x27;</span> + target[property]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">target, property, value, receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isKeyExist = hasOwnProperty(target, property);</span><br><span class="line">    <span class="keyword">const</span> oldValue = target[property];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.set(target, property, value, receiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isKeyExist) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive add the Property： &#x27;</span> + property + <span class="string">&#x27;-----to----&gt;&#x27;</span> + value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isEqual(value, oldValue)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#Reactive set the Property： &#x27;</span> + property + <span class="string">&#x27;-----to----&gt;&#x27;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutableHandle = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  mutableHandle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="src-vue3-reactivity-reactive-js"><a href="#src-vue3-reactivity-reactive-js" class="headerlink" title="src/vue3/reactivity/reactive.js"></a>src/vue3/reactivity/reactive.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/utils.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mutableHandle &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutableHandle.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(target, mutableHandle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveObject</span>(<span class="params">target, baseHandle</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> observe = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, baseHandle);</span><br><span class="line">  <span class="keyword">return</span> observe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  reactive</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue-Reactive">https://github.com/eternallycyf/Vue-Reactive</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现vue2数据劫持</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0vue2%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h2 id="实现vue2数据劫持"><a href="#实现vue2数据劫持" class="headerlink" title="实现vue2数据劫持"></a>实现vue2数据劫持</h2><ul>
<li>初始化时候就完成了数据劫持 </li>
<li>利用<code>object.definedPropert</code>y 完成 <code>vm</code>可以直接点出<code>data</code>中的数据</li>
<li>利用观察者模式<ul>
<li>区分<code>data</code>是对象还是函数</li>
<li>如果是<code>data</code>是对象进行观察者模式<ul>
<li>数据是<code>&#123;&#125;</code>就<code>ObjectProperty</code><ul>
<li>需要递归触发每一层对象的<code>getter</code></li>
</ul>
</li>
<li>数据如果是<code>[]</code>就自己实现方法<ul>
<li>获取整个数组触发 <code>getter</code>, 获取数组下标不触发 <code>getter</code></li>
<li>需要自己重写数组方法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ul>
<li>使用 <code>esmodules</code>来搭建文件结构 由于浏览器规范问题, </li>
<li>需要 <code>npx server</code> 或者 <code>live-server</code> 运行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── vue</span><br><span class="line">        ├── Observer.js</span><br><span class="line">        ├── array.js</span><br><span class="line">        ├── config.js</span><br><span class="line">        ├── index.js</span><br><span class="line">        ├── init.js</span><br><span class="line">        ├── observe.js</span><br><span class="line">        ├── observeArr.js</span><br><span class="line">        ├── proxy.js</span><br><span class="line">        └── reactive.js</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;./src/index.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;./vue/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;数据劫持&#x27;</span>,</span><br><span class="line">      <span class="attr">className</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">nameList</span>: [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>],</span><br><span class="line">      <span class="attr">info</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: &#123;</span><br><span class="line">          <span class="attr">b</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">arr</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 数据劫持 vm.xxx 直接劫持到 data下面进行获取</span></span><br><span class="line"><span class="comment">// console.log(vm.title);</span></span><br><span class="line"><span class="comment">// console.log(vm._data.title);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数据劫持 修改vm.xxx 直接劫持到 data下面进行修改</span></span><br><span class="line"><span class="comment">// vm.title = &#x27;reactive title&#x27;</span></span><br><span class="line"><span class="comment">// console.log(vm._data);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 触发对象深层结构的 getter setter 每一个数据层级都有一个 getter setter</span></span><br><span class="line"><span class="comment">// console.log(vm.info.a);</span></span><br><span class="line"><span class="comment">// console.log(vm._data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 获取整个数组触发 getter, 获取数组下标不触发 getter</span></span><br><span class="line">vm.arr.reverse()</span><br><span class="line">vm.arr.push(&#123; <span class="attr">title</span>: <span class="string">&#x27;测试&#x27;</span>, <span class="attr">city</span>: <span class="string">&quot;hangzhou&quot;</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(vm.arr);</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-index-js"><a href="#src-vue-index-js" class="headerlink" title="src/vue/index.js"></a>src/vue/index.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initState &#125; <span class="keyword">from</span> <span class="string">&#x27;./init.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._init(options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">_init</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="built_in">this</span>;</span><br><span class="line">    vm.$options = options;</span><br><span class="line"></span><br><span class="line">    initState(vm);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="src-vue-init-js"><a href="#src-vue-init-js" class="headerlink" title="src/vue/init.js"></a>src/vue/init.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> proxyData <span class="keyword">from</span> <span class="string">&#x27;./proxy.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">&#x27;./observe.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = vm.$options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data;</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span> ? data.call(vm) : data || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    proxyData(vm, <span class="string">&#x27;_data&#x27;</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  observe(vm._data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  initState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="src-vue-observe-js"><a href="#src-vue-observe-js" class="headerlink" title="src/vue/observe.js"></a>src/vue/observe.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Observer <span class="keyword">from</span> <span class="string">&#x27;./Observer.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span> || data === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observe</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-proxy-js"><a href="#src-vue-proxy-js" class="headerlink" title="src/vue/proxy.js"></a>src/vue/proxy.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyData</span>(<span class="params">vm, target, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> vm[target][key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">      vm[target][key] = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> proxyData</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-Observer-js"><a href="#src-vue-Observer-js" class="headerlink" title="src/vue/Observer.js"></a>src/vue/Observer.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> defineReactiveData <span class="keyword">from</span> <span class="string">&#x27;./reactive.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; arrMethods &#125; <span class="keyword">from</span> <span class="string">&#x27;./array.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> observeArr <span class="keyword">from</span> <span class="string">&#x27;./observeArr.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">      data.__proto__ = arrMethods;</span><br><span class="line">      observeArr(data)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.walk(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">walk</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = keys[i];</span><br><span class="line">      <span class="keyword">let</span> value = data[key];</span><br><span class="line"></span><br><span class="line">      defineReactiveData(data, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observer</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-reactive-js"><a href="#src-vue-reactive-js" class="headerlink" title="src/vue/reactive.js"></a>src/vue/reactive.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">&#x27;./observe.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactiveData</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">  observe(value)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#get the reactive data&#x27;</span>, value);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;#set the reactive data&#x27;</span>, newValue);</span><br><span class="line">      <span class="keyword">if</span> (newValue === value) <span class="keyword">return</span>;</span><br><span class="line">      observe(newValue);</span><br><span class="line">      value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineReactiveData</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-array-js"><a href="#src-vue-array-js" class="headerlink" title="src/vue/array.js"></a>src/vue/array.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ARR_METHODS &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> observeArr <span class="keyword">from</span> <span class="string">&#x27;./observeArr.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originArrMethods = <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="keyword">const</span> arrMethods = <span class="built_in">Object</span>.create(originArrMethods);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewArr</span>(<span class="params">m, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (m) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      getNewArr = <span class="function">() =&gt;</span> args;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">      getNewArr = <span class="function">() =&gt;</span> args;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">      getNewArr = <span class="function">() =&gt;</span> args.slice(<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      getNewArr = <span class="function">() =&gt;</span> []</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getNewArr()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ARR_METHODS.map(<span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">  arrMethods[m] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> rt = originArrMethods[m].apply(<span class="built_in">this</span>, args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newArr = getNewArr(m, args)</span><br><span class="line">    newArr &amp;&amp; observeArr(newArr)</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  arrMethods</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="src-vue-config-js"><a href="#src-vue-config-js" class="headerlink" title="src/vue/config.js"></a>src/vue/config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ARR_METHODS = [</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  ARR_METHODS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="src-vue-observeArr-js"><a href="#src-vue-observeArr-js" class="headerlink" title="src/vue/observeArr.js"></a>src/vue/observeArr.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">&#x27;./observe.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observeArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    observe(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observeArr</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue2-Reactive">https://github.com/eternallycyf/Vue2-Reactive</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2为什么需要函数返回data和手动实现</title>
    <url>/eternallycyf/vue2%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9Edata%E5%92%8C%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><ul>
<li><code>vue2</code>利用了 <code>Object.defineProperty</code> 数据拦截完成了响应式<ul>
<li>本质上是对于属性的监听</li>
<li>当操作同一个对象的时候就会存在引用问题</li>
<li>利用函数 独立作用域就可以解决这个问题</li>
</ul>
</li>
<li><code>vue3</code>利用的 <code>Proxy</code> 数据劫持完成了响应了<ul>
<li>本质上是监听整个对象 与<code>Object.defineProperty</code>截然不同</li>
<li>使用 <code>Proxy</code> 包裹返回后的新对象 只要修改, 原对象也随之更改</li>
<li>由于是新的对象。所以就不存在对象引用问题</li>
<li>从而也就不需要用函数返回对象</li>
</ul>
</li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> _data = options.data();</span><br><span class="line">   <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> _data) &#123;</span><br><span class="line">     <span class="comment">// 如果用 this.a =&gt; get =&gt; _data.a</span></span><br><span class="line">     <span class="comment">// 需要独立作用域</span></span><br><span class="line">     <span class="comment">// ; (function (k) &#123;</span></span><br><span class="line">     <span class="comment">//   Object.defineProperty(_this, k, &#123;</span></span><br><span class="line">     <span class="comment">//     get() &#123;</span></span><br><span class="line">     <span class="comment">//       return _data[k]</span></span><br><span class="line">     <span class="comment">//     &#125;,</span></span><br><span class="line">     <span class="comment">//     set(newValue) &#123;</span></span><br><span class="line">     <span class="comment">//       _data[k] = newValue;</span></span><br><span class="line">     <span class="comment">//     &#125;</span></span><br><span class="line">     <span class="comment">//   &#125;)</span></span><br><span class="line">     <span class="comment">// &#125;)(k)</span></span><br><span class="line"></span><br><span class="line">     ; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       _this.__defineGetter__(k, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> _data[k]</span><br><span class="line">       &#125;);</span><br><span class="line">       _this.__defineSetter__(k, <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">         _data[k] = newValue;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)(k)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> vm.a <span class="comment">//1</span></span><br><span class="line"> <span class="built_in">console</span>.log(vm.a)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue2-data">https://github.com/eternallycyf/Vue2-data</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个模板语法</title>
    <url>/eternallycyf/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;template&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;tpl&#x27;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;dv&#x27;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">name</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">age</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">sex</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tpl&#x27;</span>).innerHTML</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> content = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.template&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> source = dv.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> str = source.replace(<span class="regexp">/\&#123;\&#123;(.*?)&#125;\&#125;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;[key]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    content.innerHTML = str</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/Vue-template">https://github.com/eternallycyf/Vue-template</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Promise</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Promise/</url>
    <content><![CDATA[<h1 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h1><h2 id="1-实现基本的excutor"><a href="#1-实现基本的excutor" class="headerlink" title="1.实现基本的excutor"></a>1.实现基本的excutor</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;success&#x27;);</span></span><br><span class="line">  <span class="comment">// reject(&#x27;failure&#x27;);</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Expected success&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;error---&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>1.<code>Promise</code> 分为三种状态 <code>PENDING FULFILL REJECTED</code><ul>
<li>只可以从 <code>PENDING =&gt; FULFILL</code> 或 <code>PENDING =&gt; REJECTED</code></li>
<li>不可以从 <code>FULFILL =&gt; REJECTED</code> <code>FULFILL =&gt; PENDING</code>  <code>REJECTED =&gt; PENDING</code></li>
<li>且默认是<code>PENDING</code>的状态</li>
</ul>
</li>
<li>2.<code>new Promise(executor)</code> 实例化时候传入一个函数, 里面又有包含 <code>resolve和reject两个回调函数</code><ul>
<li>因此也就是 <code>constructor(executor)</code> 就是实例化时候传入的函数</li>
<li>同时这个 <code>executor =&gt; (resolve,reject)=&gt;&#123; &#125;</code> </li>
<li>所以需要定义<code>executor的两个回调</code></li>
<li>在对应的回调改变对应的状态, 并存储对应传入的值</li>
</ul>
</li>
<li>3.<code>let Promise = new Promise(executor)</code> , <code>Promise.then((value)=&gt;&#123;&#125;, (reason)=&gt;&#123;&#125;)</code> <ul>
<li>实例化对象需要<code>.then</code> 来对结果进行处理, 因此需要给实例对象添加 <code>then</code> 方法</li>
<li>用 <code>class</code> 直接就与 <code>constructor</code> 同级处添加 <code>then</code> 方法就可以了 </li>
<li>如果是构造函数的话, 就是 <code>myPromise.prototype.then = function()&#123; &#125;</code></li>
</ul>
</li>
<li>4.在使用 <code>then</code> 方法时, 我们在这个函数参数中得到 <code>resolve</code> 和 <code>reject</code> 传入的对应的值<ul>
<li>因此在 <code>class</code> 的 <code>then</code> 方法定义中, 我们根据不同的<code>Promise</code>状态, 在正确的回调中传入正确的参数就可以了</li>
</ul>
</li>
<li>5.当 <code>executor</code> 中手动抛出错误的时候, 我们需要在 <code>executor</code> 函数执行的地方进行 <code>try-catch</code> 捕获<ul>
<li>如果捕获到异常了直接执行 <code>reject</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILL = <span class="string">&#x27;FULFILL&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILL;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILL) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-异步执行-多个Promise依次执行"><a href="#2-异步执行-多个Promise依次执行" class="headerlink" title="2.异步执行,多个Promise依次执行"></a>2.异步执行,多个Promise依次执行</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// resolve(&#x27;success&#x27;);</span></span><br><span class="line">   <span class="comment">// reject(&#x27;failure&#x27;);</span></span><br><span class="line">   <span class="comment">// throw new Error(&#x27;Expected success&#x27;);</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     resolve(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">2000</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> promise.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value + <span class="string">&#x27;--1&#x27;</span>);</span><br><span class="line"> &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;error---&#x27;</span>, reason);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> promise.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value + <span class="string">&#x27;--2&#x27;</span>);</span><br><span class="line"> &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;error---&#x27;</span>, reason);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>1.当<code>executor</code>传入异步的处理后, <code>.then</code> 的时候并没有处理<code>pending</code>的状态<ul>
<li>使用发布订阅模式</li>
<li>订阅<ul>
<li>在<code>then</code>方法中如果是 <code>pending</code> 状态则收集所有<code>resolve</code>和<code>reject</code>的回调</li>
<li>因此在<code>constructor</code>中定义两个数组来进行收集 <code>onFulfilledCallbacks</code> <code>onRejectedCallbacks</code></li>
</ul>
</li>
<li>发布<ul>
<li>需要在<code>resolve</code> <code>reject</code> 函数中执行之前订阅收集的结果</li>
<li><code>this.onFulfilledCallbacks.forEach(cb =&gt; cb());</code></li>
<li><code>this.onRejectedCallbacks.forEach(cb =&gt; cb());</code></li>
</ul>
</li>
</ul>
</li>
<li>2.如果有多个 <code>promise.then</code> 需要依次执行各自的回调<ul>
<li>同步<ul>
<li>当是同步的时候默认就是依次执行的</li>
</ul>
</li>
<li>异步<ul>
<li>使用发布订阅的模式, 当异步<code>pending</code>的时候 将<code>resove reject</code>的值都进行收集</li>
<li>在<code>resove</code> <code>reject</code> 的函数中执行所有的收集的状态<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILL = <span class="string">&#x27;FULFILL&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onFulfilledCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILL;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILL) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.onFulfilledCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-链式调用"><a href="#3-链式调用" class="headerlink" title="3.链式调用"></a>3.链式调用</h2><h3 id="3-1-细节"><a href="#3-1-细节" class="headerlink" title="3.1 细节"></a>3.1 细节</h3><ul>
<li><code>catch</code><ul>
<li><code>catch</code> 在 <code>Promise</code> 的源码层面就是一个 <code>then</code> </li>
<li>和 <code>then</code> 的逻辑相同</li>
</ul>
</li>
<li>成功的条件<ul>
<li><code>then return</code> 普通的值</li>
<li><code>then return</code> 一个<code>Promise</code>且是 <code>resolve</code> 成功的回调</li>
</ul>
</li>
<li>失败的条件 <ul>
<li><code>then</code> 抛出了异常 <code>throw new Error</code></li>
<li><code>then return</code> 一个<code>Promise</code>且是 <code>reject</code> 失败的回调</li>
</ul>
</li>
<li>Promise 链式调用<ul>
<li><code>jQuery</code> 链式调用 在函数内部返回一个<code>this</code></li>
<li>在每一个 <code>then</code> 的时候返回一个新的 <code>new Promise.then()</code><ul>
<li>如果不是链式调用.直接创建新的调用 调用的将是第一的值</li>
</ul>
</li>
</ul>
</li>
<li><code>Promise.resolve()</code><ul>
<li>在<code>then中</code>如果需要 <code>return</code> 一个 <code>Promise</code></li>
<li>可以直接通过语法糖 <code>return Promise.resolve(&#39;xxx&#39;)</code> </li>
<li>或者自己创建一个新的 <code>promise</code> 对象并 <code>return</code></li>
</ul>
</li>
</ul>
<ul>
<li><ol>
<li><code>return</code> 传递普通的值</li>
</ol>
</li>
<li><ol start="2">
<li><code>return</code> 一个<code>Promise</code> 传入 <code>resolve</code> 的结果</li>
</ol>
<ul>
<li>同步异步都可以</li>
</ul>
</li>
<li><ol start="3">
<li><code>return</code> 一个<code>Promise</code> 传入 <code>reject</code> 的结果</li>
</ol>
<ul>
<li>下一段链式调用执行 <code>reject</code> 的回调</li>
</ul>
</li>
<li><ol start="4">
<li><code>then</code>走了失败的回调函数后 再走了 <code>then</code></li>
</ol>
</li>
<li><ol start="5">
<li>如果 <code>then throw new Error</code></li>
</ol>
<ul>
<li>就会走到下一段的 reject 中</li>
</ul>
</li>
<li><ol start="6">
<li>用<code>catch</code> 捕获异常</li>
</ol>
<ul>
<li><code>then</code>会找最新的失败的调用 不论是 <code>catch</code> 还是 <code>reject</code></li>
<li>如果 <code>catch</code> <code>return</code> 一个普通值 在下一个<code>then</code> <code>resolve</code> 进行捕获</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">&#x27;First resolve&#x27;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res); <span class="comment">// First resolve</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// resolve(res)</span></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       resolve(res)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// First resolve</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// undefined</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err) <span class="comment">// Error</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// Error</span></span><br><span class="line">     <span class="comment">// 默认 return undefined</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 在这里接收上一段的 reject return 的值</span></span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// undefined</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 5</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// Error</span></span><br><span class="line">     <span class="comment">// 默认 return undefined</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 在这里接收上一段的 reject return 的值</span></span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// undefined</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;new Error&#x27;</span>)</span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value) <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// new Error</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6</span></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// Error</span></span><br><span class="line">     <span class="comment">// 默认 return undefined</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 在这里接收上一段的 reject return 的值</span></span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// undefined</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;new Error&#x27;</span>)</span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value) <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err) <span class="comment">// new Error</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"> promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// Error</span></span><br><span class="line">     <span class="comment">// 默认 return undefined</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 在这里接收上一段的 reject return 的值</span></span><br><span class="line">     <span class="built_in">console</span>.log(res)  <span class="comment">// undefined</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;new Error&#x27;</span>)</span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)  <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(value) <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err)   <span class="comment">//  new Error</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err) <span class="comment">// 没有执行</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-实现"><a href="#3-2-实现" class="headerlink" title="3.2 实现"></a>3.2 实现</h3><ul>
<li>如果返回新的 <code>Promise</code></li>
<li>用<code>x</code>函数存储, 如果是 <code>Promise</code> 需要利用 <code>resolve</code> 进行抛出</li>
<li>如果 <code>throw Error</code></li>
<li>进行 <code>try catch</code> 如果失败直接 <code>reject</code></li>
<li><code>resolvePromise(x);</code> 用来处理 <code>x</code></li>
<li>为了保证 <code>resolvePromise</code> 接受到 <code>promise2</code> </li>
<li>用 <code>setTimeout</code> 让其变成异步</li>
<li>当执行的时候 已经可以获取到 <code>promise2</code> 对象了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;First resolve&#x27;</span>)</span><br><span class="line">    <span class="comment">// reject(new Error(&#x27;Error&#x27;))</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> promise2 = promise1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// return &#x27;then promise&#x27;;</span></span><br><span class="line">    <span class="comment">// return new Error(&#x27;Error&#x27;)</span></span><br><span class="line">    <span class="comment">// return Promise.resolve(&#x27;promise resolve&#x27;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// resolve(&#x27;new mypromise resolve&#x27;)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   resolve(&#x27;new mypromise resolve&#x27;)</span></span><br><span class="line">      <span class="comment">// &#125;, 2000);</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;new mypromise resolve&#x27;</span>)</span><br><span class="line">          &#125;))</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reason</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// promise2.then((value) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(value)  // 1</span></span><br><span class="line">  <span class="comment">// &#125;, (reason) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(reason) // Error</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// promise2.then().then().then().then().then((value) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(value)  // 1</span></span><br><span class="line">  <span class="comment">// &#125;, (reason) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(reason) // Error</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  promise2.then().then().then().then().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason) <span class="comment">// Error</span></span><br><span class="line">  &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILL = <span class="string">&#x27;FULFILL&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected from promise #&lt;MyPromise&gt;&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x !== <span class="literal">null</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        then.call(x, <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(r)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onFulfilledCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILL;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reson</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILL) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(errorCallback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, errorCallback);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes</title>
    <url>/eternallycyf/kubernetes/</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h2><h3 id="know"><a href="#know" class="headerlink" title="know"></a>know</h3><ul>
<li><code>k8s</code>的优点<ul>
<li>高可用，不宕机，自动灾难恢复</li>
<li>灰度更新，不影响业务正常运转 不会一次清除所有的</li>
<li>一键回滚到历史版本</li>
<li>方便的伸缩扩展（应用伸缩，机器加减）、提供负载均衡</li>
<li>有一个完善的生态</li>
</ul>
</li>
<li><code>k8s</code><ul>
<li><code>master</code><ul>
<li>主节点，控制平台，不需要很高性能，不跑任务，通常一个就行了，也可以开多个主节点来提高集群可用度。</li>
</ul>
</li>
<li><code>worker</code><ul>
<li>工作节点，可以是虚拟机或物理计算机，任务都在这里跑，机器性能需要好点；通常都有很多个，可以不断加机器扩大集群；每个工作节点由主节点管理</li>
</ul>
</li>
<li><code>pod</code><ul>
<li>豆荚，<code>K8S</code> 调度、管理的最小单位，一个 <code>Pod</code> 可以包含一个或多个容器，每个 <code>Pod </code>有自己的虚拟<code>IP</code>。一个工作节点可以有多个<code>pod</code>，主节点会考量负载自动调度 <code>pod </code>到哪个节点运行。</li>
</ul>
</li>
</ul>
</li>
<li>工作负载分类<ul>
<li><code>Deployment</code><br>适合无状态应用，所有<code>pod</code>等价，可替代</li>
<li><code>StatefulSet</code><br>有状态的应用，适合数据库这种类型。</li>
<li><code>DaemonSet</code><br>在每个节点上跑一个 <code>Pod</code>，可以用来做节点监控、节点日志收集等</li>
<li><code>Job &amp; CronJob</code><br><code>Job</code> 用来表达的是一次性的任务，而 <code>CronJob</code> 会根据其时间规划反复运行</li>
</ul>
</li>
</ul>
<h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><ul>
<li><code>kubectl</code> 是一个用来跟 <code>K8S</code> 集群进行交互的命令行工具<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brew</span> <span class="string">install</span> <span class="string">kubectl</span></span><br><span class="line"><span class="comment"># 查看节点。</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">node</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-1-minikube"><a href="#1-1-minikube" class="headerlink" title="1.1 minikube"></a>1.1 minikube</h3><h3 id="1-2-云服务器安装"><a href="#1-2-云服务器安装" class="headerlink" title="1.2 云服务器安装"></a>1.2 云服务器安装</h3><ul>
<li>可视化操作</li>
<li>登录阿里云控制台 产品搜索 <code>Kubernates</code></li>
<li>选择流量计费测试</li>
<li>环境默认就配置好了</li>
</ul>
<h3 id="1-3-裸机安装"><a href="#1-3-裸机安装" class="headerlink" title="1.3 裸机安装"></a>1.3 裸机安装</h3><ul>
<li>裸机安装 需要两台机器 自己安装k8s组件 </li>
<li>主节点<ul>
<li><code>docker</code></li>
<li><code>kubectl</code></li>
<li><code>kubeadm</code> 集群初始化工具</li>
</ul>
</li>
<li>工作节点<ul>
<li><code>docker</code></li>
<li><code>kubelet</code> 管理<code>Pod</code>和容器</li>
<li><code>kube-proxy</code> 网络代理</li>
</ul>
</li>
</ul>
<h4 id="1-3-1-购买服务器"><a href="#1-3-1-购买服务器" class="headerlink" title="1.3.1 购买服务器"></a>1.3.1 购买服务器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录自己的公网和内网地址。 下面的这些服务器已经销毁了 只是举例</span></span><br><span class="line"><span class="number">175.27</span><span class="number">.136</span><span class="number">.106</span> master</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line"><span class="number">119.45</span><span class="number">.27</span><span class="number">.53</span> node1</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="number">119.45</span><span class="number">.1</span><span class="number">.100</span> node2</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.7</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-服务器安装启动依赖"><a href="#1-3-2-服务器安装启动依赖" class="headerlink" title="1.3.2 服务器安装启动依赖"></a>1.3.2 服务器安装启动依赖</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个节点分别设置对应主机名</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">master</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">node1</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">node2</span></span><br><span class="line"><span class="comment"># 内网ip</span></span><br><span class="line"><span class="string">vim</span> <span class="string">/etc/hosts</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span> <span class="string">master</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.2</span> <span class="string">node1</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.7</span> <span class="string">node2</span></span><br><span class="line"><span class="string">ping</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># 所有服务器关闭 SELinux 和防火墙</span></span><br><span class="line"><span class="string">setenforce</span> <span class="number">0</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">--follow-symlinks</span> <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> <span class="string">/etc/sysconfig/selinux</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">stop</span> <span class="string">firewalld</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">disable</span> <span class="string">firewalld</span></span><br><span class="line"><span class="comment">#  添加k8s安装源</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">&gt;</span> <span class="string">kubernetes.repo</span></span><br><span class="line">[<span class="string">kubernetes</span>]</span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span> <span class="string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">mv</span> <span class="string">kubernetes.repo</span> <span class="string">/etc/yum.repos.d/</span></span><br><span class="line"><span class="comment"># docker安装源</span></span><br><span class="line"><span class="string">yum-config-manager</span> <span class="string">--add-repo</span> <span class="string">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 安装所需组件</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">kubelet</span> <span class="string">kubeadm</span> <span class="string">kubectl</span> <span class="string">docker-ce</span></span><br><span class="line"><span class="comment"># 启动 kubelet、docker，并设置开机启动 所有服务器</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">kubelet</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">kubelet</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">docker</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-修改配置"><a href="#1-3-3-修改配置" class="headerlink" title="1.3.3 修改配置"></a>1.3.3 修改配置</h4><ul>
<li><code>kubernetes</code> 官方推荐 <code>docker</code> 等使用 <code>systemd</code> 作为 <code>cgroupdriver</code>，否则 <code>kubelet</code> 启动不了<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 docker 配置（所有节点）</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">&gt;</span> <span class="string">daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;:</span> [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;:</span> [<span class="string">&quot;https://ud6340vz.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">mv</span> <span class="string">daemon.json</span> <span class="string">/etc/docker/</span></span><br><span class="line"><span class="comment"># 重启生效</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-4-主节点初始化集群"><a href="#1-3-4-主节点初始化集群" class="headerlink" title="1.3.4 主节点初始化集群"></a>1.3.4 主节点初始化集群</h4><ul>
<li><p>用 <code>kubeadm</code> 初始化集群(仅在主节点跑)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化集群控制台 Control plane</span></span><br><span class="line"><span class="comment"># 失败了可以用 kubeadm reset 重置</span></span><br><span class="line"><span class="string">kubeadm</span> <span class="string">init</span> <span class="string">--image-repository=registry.aliyuncs.com/google_containers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记得把 kubeadm join xxx 保存起来</span></span><br><span class="line"><span class="comment"># 忘记了重新获取：kubeadm token create --print-join-command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制授权文件，以便 kubectl 可以有权限访问集群</span></span><br><span class="line"><span class="comment"># 如果你其他节点需要访问集群，需要从主节点复制这个文件过去其他节点</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">$HOME/.kube</span></span><br><span class="line"><span class="string">cp</span> <span class="string">-i</span> <span class="string">/etc/kubernetes/admin.conf</span> <span class="string">$HOME/.kube/config</span></span><br><span class="line"><span class="string">chown</span> <span class="string">$(id</span> <span class="string">-u):$(id</span> <span class="string">-g)</span> <span class="string">$HOME/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他机器上创建 ~/.kube/config 文件也能通过 kubectl 访问到集群</span></span><br></pre></td></tr></table></figure></li>
<li><p>把工作节点加入集群（只在工作节点跑）</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">kubeadm</span> <span class="string">join</span> <span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span><span class="string">:6443</span> <span class="string">--token</span> <span class="string">pcwrhg.993ucguu26f8yczo</span> <span class="string">--discovery-token-ca-cert-hash</span> <span class="string">sha256:74c000111a188dcfa6e5f529514f42bd3a8bbe97aa9d696b30d48eb9946abf34</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">node</span></span><br><span class="line"><span class="string">这时候都是notReady</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装网络插件，否则 <code>node</code> 是 <code>NotReady</code> 状态（主节点跑）<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 很有可能国内网络访问不到这个资源，你可以网上找找国内的源安装</span></span><br><span class="line"><span class="comment"># flannel</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-demo"><a href="#2-demo" class="headerlink" title="2. demo"></a>2. demo</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行一个pod 名字是testapp</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">run</span> <span class="string">testapp</span> <span class="string">--image=ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>执行命令 <code>kubectl apply -f app.yaml</code></li>
<li><code>pod.yaml</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-k8s</span> <span class="comment"># 容器名字</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-kubernetes-常用命令"><a href="#3-kubernetes-常用命令" class="headerlink" title="3. kubernetes 常用命令"></a>3. kubernetes 常用命令</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">app.yaml</span></span><br><span class="line"><span class="comment"># 查看 deployment</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">deployment</span></span><br><span class="line"><span class="comment"># 查看 pod</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">-o</span> <span class="string">wide</span></span><br><span class="line"><span class="comment"># 查看 pod 详情</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">pod</span> <span class="string">podName</span></span><br><span class="line"><span class="comment"># 查看 log 不断查看日志 -f</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">logs</span> <span class="string">podName</span> [<span class="string">-f</span>]</span><br><span class="line"><span class="comment"># 进入 Pod 容器终端， -c container-name 可以指定进入哪个容器</span></span><br><span class="line"><span class="comment"># exit 退出</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">podName</span> <span class="string">--</span> <span class="string">bash</span></span><br><span class="line"><span class="comment"># 伸缩扩展副本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">scale</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">--replicas=5</span></span><br><span class="line"><span class="comment"># 把集群内端口映射到节点</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">port-forward</span> <span class="string">podName</span> <span class="number">8090</span><span class="string">:8080</span></span><br><span class="line"><span class="comment"># 查看历史</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">history</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 回到上个版本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">undo</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 回到指定版本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">undo</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">--to-revision=2</span></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 查看全部</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">restart</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 命令修改镜像，--record 表示把这个命令记录到操作历史中</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">set</span> <span class="string">image</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">test-k8s=ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v2-with-error</span> <span class="string">--record</span></span><br><span class="line"><span class="comment"># 暂停运行，暂停后，对 deployment 的修改不会立刻生效，恢复后才应用设置</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">pause</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">resume</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;&gt;</span> <span class="string">app2.yaml</span></span><br><span class="line"><span class="comment"># 删除全部资源</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">all</span> <span class="string">--all</span></span><br></pre></td></tr></table></figure>

<h2 id="4-service"><a href="#4-service" class="headerlink" title="4.service"></a>4.service</h2><ul>
<li><p><code>service</code></p>
<ul>
<li><code>ClusterIP</code> 默认的，仅在集群内可用</li>
<li><code>NodePort</code><ul>
<li>暴露端口到节点，提供了集群外部访问的入口 端口范围固定 <code>30000 ~ 32767</code></li>
</ul>
</li>
<li><code>LoadBalancer</code><ul>
<li>需要负载均衡器（通常都需要云服务商提供，裸机可以安装 <code>METALLB</code> 测试）</li>
<li>会额外生成一个 <code>IP</code> 对外服务 <code>k8S</code> 支持的负载均衡器：负载均衡器</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Service</code> 通过 <code>label</code> 关联对应的 <code>Pod</code></p>
</li>
<li><p><code>Servcie</code> 生命周期不跟 <code>Pod</code> 绑定，不会因为 <code>Pod</code> 重创改变 <code>IP</code></p>
</li>
<li><p>提供了负载均衡功能，自动转发流量到不同 <code>Pod</code></p>
</li>
<li><p>可对集群外部提供访问端口</p>
</li>
<li><p>集群内部可通过服务名字访问</p>
</li>
</ul>
<h3 id="4-1-yaml"><a href="#4-1-yaml" class="headerlink" title="4.1 yaml"></a>4.1 yaml</h3><ul>
<li><p><code>kubectl get svc</code> 查看服务</p>
</li>
<li><p><code>kubectl describe svc test-k8s</code> 查看服务详情</p>
</li>
<li><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>服务的默认类型是<code>ClusterIP</code>，只能在集群内部访问，我们可以进入到 <code>Pod</code> 里面访问：</p>
<ul>
<li><code>kubectl exec -it pod-name -- bash</code></li>
<li>curl <a href="http://test-k8s:8080/">http://test-k8s:8080</a></li>
</ul>
</li>
<li><p>集群外部访问，可以通过端口转发实现（只适合临时测试用)</p>
<ul>
<li><code>kubectl port-forward service/test-k8s 8888:8080</code></li>
</ul>
</li>
</ul>
<h3 id="4-2-对外暴露服务"><a href="#4-2-对外暴露服务" class="headerlink" title="4.2 对外暴露服务"></a>4.2 对外暴露服务</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="comment"># 默认 ClusterIP 集群内可访问，NodePort 节点可访问，LoadBalancer 负载均衡模式（需要负载均衡器才可用）</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31000</span>   <span class="comment"># 节点端口，范围固定 30000 ~ 32767</span></span><br><span class="line"><span class="comment"># curl http://localhost:31000/hello/easydoc</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-多端口"><a href="#4-3-多端口" class="headerlink" title="4.3 多端口"></a>4.3 多端口</h3><ul>
<li>必须配置<code>name</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-k8s</span>    <span class="comment"># 必须配置</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31000</span>   <span class="comment"># 节点端口，范围固定 30000 ~ 32767</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-other</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8090</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">32000</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-Deployment"><a href="#5-Deployment" class="headerlink" title="5. Deployment"></a>5. Deployment</h2><ul>
<li><code>Deployment</code> 通过 <code>label</code> 关联起来 <code>Pods</code></li>
</ul>
<h3 id="5-1-yaml"><a href="#5-1-yaml" class="headerlink" title="5.1 yaml"></a>5.1 yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 部署名字</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 要运行的Pod数量</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 用来查找关联的 Pod，所有标签都匹配才行</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="comment"># 自己定义的 随便写</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="comment"># 定义 Pod 相关数据</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-k8s</span> <span class="comment"># 容器名字</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-pod报错"><a href="#5-2-pod报错" class="headerlink" title="5.2 pod报错"></a>5.2 pod报错</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你运行 kubectl describe pod/pod-name 发现 Events 中有下面这个错误</span></span><br><span class="line"><span class="string">networkPlugin</span> <span class="string">cni</span> <span class="string">failed</span> <span class="string">to</span> <span class="string">set</span> <span class="string">up</span> <span class="string">pod</span> <span class="string">&quot;test-k8s-68bb74d654-mc6b9_default&quot;</span> <span class="attr">network: open /run/flannel/subnet.env:</span> <span class="literal">no</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory</span></span><br><span class="line"><span class="comment"># 在每个节点创建文件/run/flannel/subnet.env写入以下内容即可解决</span></span><br><span class="line"><span class="string">vim</span> <span class="string">/run/flannel/subnet.env</span></span><br><span class="line"><span class="string">FLANNEL_NETWORK=10.244.0.0/16</span></span><br><span class="line"><span class="string">FLANNEL_SUBNET=10.244.0.1/24</span></span><br><span class="line"><span class="string">FLANNEL_MTU=1450</span></span><br><span class="line"><span class="string">FLANNEL_IPMASQ=true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-将Pod指定到某个节点运行"><a href="#5-3-将Pod指定到某个节点运行" class="headerlink" title="5.3 将Pod指定到某个节点运行"></a>5.3 将Pod指定到某个节点运行</h3><ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector">将 Pod 分配给节点</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/policy/resource-quotas/#%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D">计算资源配额</a><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-StatefulSet"><a href="#6-StatefulSet" class="headerlink" title="6. StatefulSet"></a>6. StatefulSet</h2><h3 id="6-1-MongoDB"><a href="#6-1-MongoDB" class="headerlink" title="6.1 MongoDB"></a>6.1 MongoDB</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="comment"># HeadLess</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-hostPath"><a href="#6-2-hostPath" class="headerlink" title="6.2 hostPath"></a>6.2 hostPath</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/db</span> <span class="comment"># 容器里面的挂载路径</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mongo-data</span>    <span class="comment"># 卷名字，必须跟下面定义的名字一致</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-data</span>              <span class="comment"># 卷名字</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/mongo-data</span>      <span class="comment"># 节点上的路径</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span>     <span class="comment"># 指向一个目录，不存在时自动创建</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-Storage-Class-SC"><a href="#6-3-Storage-Class-SC" class="headerlink" title="6.3 Storage Class (SC)"></a>6.3 Storage Class (SC)</h3><ul>
<li>将存储卷划分为不同的种类，例如：SSD，普通磁盘，本地磁盘，按需使用。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slow</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/aws-ebs</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">io1</span></span><br><span class="line">  <span class="attr">iopsPerGB:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">  <span class="attr">fsType:</span> <span class="string">ext4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-4-Persistent-Volume-PV"><a href="#6-4-Persistent-Volume-PV" class="headerlink" title="6.4 Persistent Volume (PV)"></a>6.4 Persistent Volume (PV)</h3><ul>
<li>描述卷的具体信息，例如磁盘大小，访问模式。文档，类型<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>  <span class="comment"># Filesystem（文件系统） Block（块）</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>       <span class="comment"># 卷可以被一个节点以读写方式挂载</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="comment"># 通过 hostname 限定在某个节点创建存储卷</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-5-Persistent-Volume-Claim-PVC"><a href="#6-5-Persistent-Volume-Claim-PVC" class="headerlink" title="6.5 Persistent Volume Claim (PVC)"></a>6.5 Persistent Volume Claim (PVC)</h3><ul>
<li>对存储需求的一个申明，可以理解为一个申请单，系统根据这个申请单去找一个合适的 <code>PV</code></li>
<li>还可以根据 <code>PVC</code> 自动创建 <code>PV</code>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;local-storage&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-6-动态卷"><a href="#6-6-动态卷" class="headerlink" title="6.6 动态卷"></a>6.6 动态卷</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mongo:5.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/db</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongo-data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">             <span class="attr">claimName:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">local-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/no-provisioner</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">WaitForFirstConsumer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>  <span class="comment"># Filesystem（文件系统） Block（块）</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>       <span class="comment"># 卷可以被一个节点以读写方式挂载</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="comment"># 通过 hostname 限定在某个节点创建存储卷</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;local-storage&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure>

<h2 id="7-ConfigMap-amp-Secret"><a href="#7-ConfigMap-amp-Secret" class="headerlink" title="7. ConfigMap &amp; Secret"></a>7. ConfigMap &amp; Secret</h2><h3 id="7-1-ConfigMap"><a href="#7-1-ConfigMap" class="headerlink" title="7.1 ConfigMap"></a>7.1 ConfigMap</h3><ul>
<li><code>ConfigMap</code>，可以方便的配置一些变量<ul>
<li>数据库密码 链接地址 …<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">mongoHost:</span> <span class="string">mongodb-0.mongodb</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">configmap.yaml</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">configmap</span> <span class="string">mongo-config</span> <span class="string">-o</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-2-Secret"><a href="#7-2-Secret" class="headerlink" title="7.2 Secret"></a>7.2 Secret</h3><ul>
<li>一些重要数据，例如密码、<code>TOKEN</code>，我们可以放到 <code>secret</code> 中</li>
<li>注意，数据要进行 <code>Base64</code> 编码<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line"><span class="comment"># Opaque 用户定义的任意数据，更多类型介绍 https://kubernetes.io/zh/docs/concepts/configuration/secret/#secret-types</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 数据要 base64。https://tools.fun/base64.html</span></span><br><span class="line">  <span class="attr">mongo-username:</span> <span class="string">bW9uZ291c2Vy</span></span><br><span class="line">  <span class="attr">mongo-password:</span> <span class="string">bW9uZ29wYXNz</span></span><br><span class="line"><span class="comment"># 应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">secret.yaml</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">mongo-secret</span> <span class="string">-o</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure></li>
<li>使用方法<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">mongo-username</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">mongo-password</span></span><br><span class="line">          <span class="comment"># Secret 的所有数据定义为容器的环境变量，Secret 中的键名称为 Pod 中的环境变量名称</span></span><br><span class="line">          <span class="comment"># envFrom:</span></span><br><span class="line">          <span class="comment"># - secretRef:</span></span><br><span class="line">          <span class="comment">#     name: mongo-secret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-挂载为文件"><a href="#7-3-挂载为文件" class="headerlink" title="7.3 挂载为文件"></a>7.3 挂载为文件</h3><ul>
<li>更适合证书文件</li>
<li>挂载后，会在容器中对应路径生成文件，一个 key 一个文件，内容就是 value<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/etc/foo&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-Helm-amp-命名空间"><a href="#8-Helm-amp-命名空间" class="headerlink" title="8. Helm &amp; 命名空间"></a>8. Helm &amp; 命名空间</h2><ul>
<li><code>Helm</code>类似 <code>npm，pip，docker hub</code>, 可以理解为是一个软件库，可以方便快速的为我们的集群安装一些第三方软件。</li>
<li>使用 <code>Helm</code> 我们可以非常方便的就搭建出来 <code>MongoDB / MySQL</code> 副本集群，<code>YAML</code> 文件别人都给我们写好了，直接使用</li>
</ul>
<h3 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1 安装"></a>8.1 安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl https:<span class="comment">//raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-安装MongoDB"><a href="#8-2-安装MongoDB" class="headerlink" title="8.2 安装MongoDB"></a>8.2 安装MongoDB</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">add</span> <span class="string">bitnami</span> <span class="string">https://charts.bitnami.com/bitnami</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">my-mongo</span> <span class="string">bitnami/mongodb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定密码和架构</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">my-mongo</span> <span class="string">bitnami/mongodb</span> <span class="string">--set</span> <span class="string">architecture=&quot;replicaset&quot;,auth.rootPassword=&quot;mongopass&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="string">helm</span> <span class="string">ls</span></span><br><span class="line"><span class="string">heml</span> <span class="string">delete</span> <span class="string">my-mongo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">my-mongo-mongodb</span> <span class="string">-o</span> <span class="string">json</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">my-mongo-mongodb</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;</span> <span class="string">secret.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时运行一个包含 mongo client 的 debian 系统</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">run</span> <span class="string">mongodb-client</span> <span class="string">--rm</span> <span class="string">--tty</span> <span class="string">-i</span> <span class="string">--restart=&#x27;Never&#x27;</span> <span class="string">--image</span> <span class="string">docker.io/bitnami/mongodb:4.4.10-debian-10-r20</span> <span class="string">--command</span> <span class="string">--</span> <span class="string">bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进去 mongodb</span></span><br><span class="line"><span class="string">mongo</span> <span class="string">--host</span> <span class="string">&quot;my-mongo-mongodb&quot;</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">-p</span> <span class="string">mongopass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以转发集群里的端口到宿主机访问 mongodb</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">port-forward</span> <span class="string">svc/my-mongo-mongodb</span> <span class="number">27017</span><span class="string">:27018</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3-命名空间"><a href="#8-3-命名空间" class="headerlink" title="8.3 命名空间"></a>8.3 命名空间</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">create</span> <span class="string">namespace</span> <span class="string">testapp</span></span><br><span class="line"><span class="comment"># 部署应用到指定的命名空间</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">app.yml</span> <span class="string">--namespace</span> <span class="string">testapp</span></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">--namespace</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用 kubens 快速切换 namespace</span></span><br><span class="line"><span class="comment"># 切换命名空间</span></span><br><span class="line"><span class="string">kubens</span> <span class="string">kube-system</span></span><br><span class="line"><span class="comment"># 回到上个命名空间</span></span><br><span class="line"><span class="string">kubens</span> <span class="bullet">-</span></span><br><span class="line"><span class="comment"># 切换集群</span></span><br><span class="line"><span class="string">kubectx</span> <span class="string">minikube</span></span><br></pre></td></tr></table></figure>

<h2 id="9-Ingress"><a href="#9-Ingress" class="headerlink" title="9. Ingress"></a>9. Ingress</h2><ul>
<li><code>ngress</code> 为外部访问集群提供了一个 统一 入口，避免了对外暴露集群端口；<ul>
<li>功能类似 <code>Nginx</code>，可以根据域名、路径把请求转发到不同的 <code>Service</code>。</li>
<li>可以配置 <code>https</code></li>
</ul>
</li>
<li>跟 <code>LoadBalancer</code> 有什么区别？<ul>
<li><code>LoadBalancer</code> 需要对外暴露端口，不安全；</li>
<li>无法根据域名、路径转发流量到不同 <code>Service</code>，多个 <code>Service</code> 则需要开多个 <code>LoadBalancer；</code></li>
<li>功能单一，无法配置 <code>https</code></li>
</ul>
</li>
<li>云服务会自动配置 可视化配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tools.fun</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/easydoc</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">4200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/svnbucket</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="10-链接"><a href="#10-链接" class="headerlink" title="10. 链接"></a>10. 链接</h2><p><a href="https://github.com/lework/kainstall">用脚本搭建集群</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>手写一个webpack-plugin</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAwebpack-plugin/</url>
    <content><![CDATA[<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><ul>
<li>实现一个 <code>markdown</code> 文件转 <code>html</code> 的功能</li>
</ul>
<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── package.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── dist</span><br><span class="line">├── plugins</span><br><span class="line">│   └── md-to-html-plugin</span><br><span class="line">│       ├── compiler.js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── template.html</span><br><span class="line">│       └── utils.js</span><br><span class="line">├── src</span><br><span class="line">│   └── app.js</span><br><span class="line">├── test.md</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> MdToHtmlPlugin = <span class="built_in">require</span>(<span class="string">&#x27;./plugins/md-to-html-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: resolve(__dirname, <span class="string">&#x27;src/app.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> MdToHtmlPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: resolve(__dirname, <span class="string">&#x27;test.md&#x27;</span>),</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;test.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test-md"><a href="#test-md" class="headerlink" title="test.md"></a>test.md</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 这是h1</span><br><span class="line"></span><br><span class="line">- 这是ul列表第<span class="number">1</span>项</span><br><span class="line">- 这是ul列表第<span class="number">2</span>项</span><br><span class="line">- 这是ul列表第<span class="number">3</span>项</span><br><span class="line">- 这是ul列表第<span class="number">4</span>项</span><br><span class="line"></span><br><span class="line">## 这是h2</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 这是ol列表第<span class="number">1</span>项</span><br><span class="line"><span class="number">2.</span> 这是ol列表第<span class="number">2</span>项</span><br><span class="line"><span class="number">3.</span> 这是ol列表第<span class="number">3</span>项</span><br><span class="line"><span class="number">4.</span> 这是ol列表第<span class="number">4</span>项</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.12.9&quot;</span>,</span><br><span class="line">   <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">   <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^4.5.0&quot;</span>,</span><br><span class="line">   <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.30.0&quot;</span>,</span><br><span class="line">   <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.30&quot;</span>,</span><br><span class="line">   <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.7.2&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="src-app-js"><a href="#src-app-js" class="headerlink" title="src/app.js"></a>src/app.js</h3><ul>
<li>不写内容</li>
</ul>
<h3 id="plugins-md-tohtml-plugin"><a href="#plugins-md-tohtml-plugin" class="headerlink" title="plugins/md-tohtml-plugin"></a>plugins/md-tohtml-plugin</h3><h4 id="compiler-js"><a href="#compiler-js" class="headerlink" title="compiler.js"></a>compiler.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; randomNum &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./utils.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> reg_mark = <span class="regexp">/^(.+?)\s/</span>;</span><br><span class="line"><span class="keyword">const</span> reg_sharp = <span class="regexp">/^\#/</span>;</span><br><span class="line"><span class="keyword">const</span> reg_crossbar = <span class="regexp">/^\-/</span>;</span><br><span class="line"><span class="keyword">const</span> reg_number = <span class="regexp">/^\d/</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTree</span>(<span class="params">mdArr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _htmlPool = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _lastMark = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  mdArr.forEach(<span class="function">(<span class="params">mdFragment</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(mdFragment)</span></span><br><span class="line">    <span class="keyword">const</span> matched = mdFragment.match(reg_mark)</span><br><span class="line">    <span class="comment">// console.log(matched);</span></span><br><span class="line">    <span class="keyword">if</span> (matched) &#123;</span><br><span class="line">      <span class="keyword">const</span> mark = matched[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> input = matched[<span class="string">&#x27;input&#x27;</span>]</span><br><span class="line">      <span class="comment">// console.log(input)</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg_sharp.test(mark)) &#123;</span><br><span class="line">        <span class="comment">// console.log(matched);</span></span><br><span class="line">        <span class="keyword">const</span> tag = <span class="string">`h<span class="subst">$&#123;mark.length&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> tagContent = input.replace(reg_mark, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(tag,tagContent);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//reg_sharp.test(_lastMark</span></span><br><span class="line">        <span class="keyword">if</span> ((_lastMark === mark)) &#123;</span><br><span class="line">          _htmlPool[tag].tags = [..._htmlPool[<span class="string">`<span class="subst">$&#123;tag&#125;</span>-<span class="subst">$&#123;_key&#125;</span>`</span>], <span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _lastMark = mark;</span><br><span class="line">          _key = randomNum();</span><br><span class="line">          _htmlPool[<span class="string">`<span class="subst">$&#123;tag&#125;</span>-<span class="subst">$&#123;_key&#125;</span>`</span>] = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">            <span class="attr">tags</span>: [<span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg_crossbar.test(mark)) &#123;</span><br><span class="line">        <span class="keyword">const</span> tagContent = input.replace(reg_mark, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// console.log(tagContent);</span></span><br><span class="line">        <span class="keyword">const</span> tag = <span class="string">`li`</span>;</span><br><span class="line">        <span class="keyword">if</span> (reg_crossbar.test(_lastMark)) &#123;</span><br><span class="line">          _htmlPool[<span class="string">`ul-<span class="subst">$&#123;_key&#125;</span>`</span>].tags = [..._htmlPool[<span class="string">`ul-<span class="subst">$&#123;_key&#125;</span>`</span>].tags, <span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _key = randomNum();</span><br><span class="line">          _lastMark = mark;</span><br><span class="line">          _htmlPool[<span class="string">`ul-<span class="subst">$&#123;_key&#125;</span>`</span>] = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;wrap&#x27;</span>,</span><br><span class="line">            <span class="attr">tags</span>: [<span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (reg_number.test(mark)) &#123;</span><br><span class="line">        <span class="keyword">const</span> tagContent = input.replace(reg_mark, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> tag = <span class="string">`li`</span>;</span><br><span class="line">        <span class="keyword">if</span> (reg_number.test(_lastMark)) &#123;</span><br><span class="line">          _htmlPool[<span class="string">`ol-<span class="subst">$&#123;_key&#125;</span>`</span>].tags = [..._htmlPool[<span class="string">`ol-<span class="subst">$&#123;_key&#125;</span>`</span>].tags, <span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// console.log(_lastMark,mark);</span></span><br><span class="line">          _lastMark = mark;</span><br><span class="line">          _key = randomNum();</span><br><span class="line">          _htmlPool[<span class="string">`ol-<span class="subst">$&#123;_key&#125;</span>`</span>] = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;wrap&#x27;</span>,</span><br><span class="line">            <span class="attr">tags</span>: [<span class="string">`&lt;<span class="subst">$&#123;tag&#125;</span>&gt;<span class="subst">$&#123;tagContent&#125;</span>&lt;/<span class="subst">$&#123;tag&#125;</span>&gt;`</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(_htmlPool);</span></span><br><span class="line">  <span class="keyword">return</span> _htmlPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileHTML</span>(<span class="params">_mdArr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(_mdArr)</span></span><br><span class="line">  <span class="keyword">const</span> _htmlPool = createTree(_mdArr)</span><br><span class="line">  <span class="comment">// console.log(_htmlPool);</span></span><br><span class="line">  <span class="keyword">let</span> _htmlStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> item;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> _htmlPool) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k, _htmlPool[k]);</span><br><span class="line">    item = _htmlPool[k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (item.type === <span class="string">&#x27;single&#x27;</span>) &#123;</span><br><span class="line">      item.tags.forEach(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">        _htmlStr += tag;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.type === <span class="string">&#x27;wrap&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> _list = <span class="string">`&lt;<span class="subst">$&#123;k.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]&#125;</span>&gt;`</span>;</span><br><span class="line">      item.tags.forEach(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">        _list += tag;</span><br><span class="line">      &#125;)</span><br><span class="line">      _list += <span class="string">`&lt;/<span class="subst">$&#123;k.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]&#125;</span>&gt;`</span>;</span><br><span class="line"></span><br><span class="line">      _htmlStr += _list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _htmlStr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  compileHTML</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   h1-hash: &#123;</span></span><br><span class="line"><span class="comment"> *     type:&#x27;single,</span></span><br><span class="line"><span class="comment"> *     tags: [&#x27;&lt;h1&gt;这是一个h1&lt;/h1&gt;&#x27;]</span></span><br><span class="line"><span class="comment"> *   &#125;,</span></span><br><span class="line"><span class="comment"> *   ul-hash: &#123;</span></span><br><span class="line"><span class="comment"> *     type: &#x27;wrap&#x27;,</span></span><br><span class="line"><span class="comment"> *     tags:[</span></span><br><span class="line"><span class="comment"> *      &#x27;&lt;li&gt;这是ul的第1项&lt;/li&gt;&#x27;</span></span><br><span class="line"><span class="comment"> *      &#x27;&lt;li&gt;这是ul的第2项&lt;/li&gt;&#x27;</span></span><br><span class="line"><span class="comment"> *      &#x27;&lt;li&gt;这是ul的第3项&lt;/li&gt;&#x27;</span></span><br><span class="line"><span class="comment"> *      &#x27;&lt;li&gt;这是ul的第4项&lt;/li&gt;&#x27;</span></span><br><span class="line"><span class="comment"> *     ]</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; compileHTML &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./compiler&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> INNER_MARK = <span class="string">&#x27;&lt;!--inner--&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MdToHtmlPlugin</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; template, filename &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!template) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;The config for &quot;template&quot; must be configured&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.template = template;</span><br><span class="line">    <span class="built_in">this</span>.filename = filename ? filename : <span class="string">&#x27;md.html&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// apply:编译的过程钩子函数 compiler:有相应的钩子集合</span></span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// tap(一般叫插件名,(compilation)=&gt;&#123;&#125;) , compilation.assets</span></span><br><span class="line">    compiler.hooks.emit.tap(<span class="string">&#x27;md-to-html-plugin&#x27;</span>, <span class="function">(<span class="params">compilation</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> _assets = compilation.assets;</span><br><span class="line">      <span class="built_in">console</span>.log(_assets);</span><br><span class="line">      <span class="comment">// readFileSync 同步</span></span><br><span class="line">      <span class="keyword">const</span> _mdContent = readFileSync(<span class="built_in">this</span>.template, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> _templateHtml = readFileSync(resolve(__dirname, <span class="string">&quot;template.html&quot;</span>), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">      <span class="comment">// console.log(_mdContent);</span></span><br><span class="line">      <span class="comment">// 变为数组</span></span><br><span class="line">      <span class="keyword">const</span> _mdContentArr = _mdContent.split(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">      <span class="comment">// console.log(_mdContentArr);</span></span><br><span class="line">      <span class="comment">// 替换为标签</span></span><br><span class="line">      <span class="keyword">const</span> _htmlStr = compileHTML(_mdContentArr)</span><br><span class="line">      <span class="comment">// console.log(_htmlStr)</span></span><br><span class="line">      <span class="keyword">const</span> _fileHtml = _templateHtml.replace(INNER_MARK, _htmlStr)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      _assets[<span class="built_in">this</span>.filename] = &#123;</span><br><span class="line">        <span class="function"><span class="title">source</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> _fileHtml;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> _fileHtml.length;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MdToHtmlPlugin;</span><br></pre></td></tr></table></figure>

<h4 id="template-html"><a href="#template-html" class="headerlink" title="template.html"></a>template.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;zh-CN&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--inner--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  randomNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/my-webpack-plugin">https://github.com/eternallycyf/my-webpack-plugin</a></li>
</ul>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>手写一个webpack-loader</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAwebpack-loader/</url>
    <content><![CDATA[<h2 id="手写一个webpack-loader"><a href="#手写一个webpack-loader" class="headerlink" title="手写一个webpack-loader"></a>手写一个webpack-loader</h2><ul>
<li>实现一个模板字符串的功能</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── loaders</span><br><span class="line">│   ├── tpl-loader</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── utils.js</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.js</span><br><span class="line">│   └── test.tpl</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&#x27;zh-CN&#x27;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;loader&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.12.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^4.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.30.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.30&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.7.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: resolve(__dirname, <span class="string">&#x27;src/app.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">resolveLoader</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: [<span class="string">&#x27;node_modules&#x27;</span>, resolve(__dirname, <span class="string">&#x27;loaders&#x27;</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// webpack-loader 执行顺序 从后到前</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tpl$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;tpl-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">log</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: resolve(__dirname, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">&#x27;./test.tpl&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">app.innerHTML = tpl(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">joke</span>: <span class="string">`如果有来生，要做一只鸟，飞越永恒，没有迷途的苦恼。东方有火红的希望南方有温暖的巢床，向西逐退残阳，向北唤醒芬芳。如果有来生，希望每次相遇，都能化为永恒。`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="test-tpl"><a href="#test-tpl" class="headerlink" title="test.tpl"></a>test.tpl</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="tpl-loader-index-js"><a href="#tpl-loader-index-js" class="headerlink" title="tpl-loader/index.js"></a>tpl-loader/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; tplReplace &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getOptions &#125; = <span class="built_in">require</span>(<span class="string">&#x27;loader-utils&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplLoader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  source = source.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; log &#125; = getOptions(<span class="built_in">this</span>)</span><br><span class="line">  <span class="keyword">const</span> _log = log ? <span class="string">`console.log(&#x27;compiled the file which is from <span class="subst">$&#123;<span class="built_in">this</span>.resourcePath&#125;</span>&#x27;)`</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(log)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    export default (options) =&gt; &#123;</span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;tplReplace.toString()&#125;</span></span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;_log.toString()&#125;</span></span></span><br><span class="line"><span class="string">     return tplReplace(&#x27;<span class="subst">$&#123;source&#125;</span>&#x27;,options)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = tplLoader;</span><br></pre></td></tr></table></figure>

<h3 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplReplace</span>(<span class="params">template, replaceObject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> template.replace(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">node, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> replaceObject[key]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  tplReplace</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/my-webpack-loader">https://github.com/eternallycyf/my-webpack-loader</a></li>
</ul>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>正向预查</title>
    <url>/eternallycyf/%E6%AD%A3%E5%90%91%E9%A2%84%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="正向预查"><a href="#正向预查" class="headerlink" title="正向预查"></a>正向预查</h2><h3 id="pattern"><a href="#pattern" class="headerlink" title="(?:pattern)"></a>(?:pattern)</h3><ul>
<li>匹配<code>pattern</code>但不获取匹配结果，也就是说这是一个非获取匹配</li>
<li>不进行存储供以后使用，这在使用字符<code>|</code>来组合一个模式的各个部分是很有用<br>例如<code>industr(?:y|ies)</code>就是一个比<code>industry|industries</code>更简略的表达式。</li>
</ul>
<h3 id="pattern-1"><a href="#pattern-1" class="headerlink" title="(?=pattern)"></a>(?=pattern)</h3><ul>
<li>正向肯定预查 <code>look ahead positive assert</code></li>
<li>在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串</li>
<li>这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ?=n 匹配任何其后紧接着指定字符串n的字符串</span></span><br><span class="line"><span class="string">&#x27;abcdaccd&#x27;</span>  a后面跟的是b的</span><br><span class="line"><span class="string">&#x27;a(?=b)/g&#x27;</span>  <span class="comment">// a  </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="pattern-2"><a href="#pattern-2" class="headerlink" title="(?!pattern)"></a>(?!pattern)</h3><ul>
<li>正向否定预查 <code>negative assert</code></li>
<li>在任何不匹配<code>pattern</code>的字符串开始处匹配查找字符串，这是一个非获取匹配</li>
<li>也就是说，该匹配不需要获取供以后使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">?!n 匹配任何其后紧接着指定字符串不是n的字符串</span><br><span class="line"><span class="string">&#x27;abcdaccda&#x27;</span>  a后面跟的不是b的</span><br><span class="line"><span class="string">&#x27;a(?!b)/g&#x27;</span>  <span class="comment">// a  a </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="lt-pattern"><a href="#lt-pattern" class="headerlink" title="(?&lt;=pattern)"></a>(?&lt;=pattern)</h3><ul>
<li>反向肯定预查 <code>look behind</code></li>
<li>与正向肯定预查类似，只是方向相反</li>
</ul>
<h3 id="lt-pattern-1"><a href="#lt-pattern-1" class="headerlink" title="(?&lt;!pattern)"></a>(?&lt;!pattern)</h3><ul>
<li>反向否定预查</li>
<li>与正向否定预查类似 只是方向相反</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>贪婪模式</title>
    <url>/eternallycyf/%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><ul>
<li><code>?</code>: 当该字符紧跟在任何一个其他限制符<code>(*, +, ?, &#123;n&#125;, &#123;n,&#125;, &#123;n,m&#125;)</code>后面时</li>
<li>匹配模式是非贪婪的，非贪婪模式尽可能少的匹配所搜索的字符串</li>
<li>而默认的贪婪模式则尽可能多的匹配所搜索的字符串，例如对于字符串<code>oooo，o+?</code>将匹配单个<code>o</code>，而<code>o+</code>将匹配所有<code>o</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认是匹配最大可能</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;abcd&#123;&#123;efg&#125;&#125;abcd&#123;&#123;xyc&#125;&#125;&#x27;</span></span><br><span class="line">reg = <span class="regexp">/&#123;&#123;.*&#125;&#125;/g</span> <span class="comment">// &#123;&#123;efg&#125;&#125;abcd&#123;&#123;xyz&#125;&#125;</span></span><br><span class="line"># 非贪婪模式 *? ?? +? </span><br><span class="line">reg = <span class="regexp">/&#123;&#123;.*?&#125;&#125;/g</span> <span class="comment">// &#123;&#123;efg&#125;&#125; &#123;&#123;xyz&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>反向引用</title>
    <url>/eternallycyf/%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><ul>
<li>子表达式<ul>
<li>我们将用括号括起来的部分称之为一个子表达式</li>
<li>在进行子表达式匹配时的原则是：由外向内，由左向右</li>
</ul>
</li>
<li>反向引用<ul>
<li><code>\n</code> 表示引用第一次匹配到的子表达式 </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 子表达式</span><br><span class="line">(a)</span><br><span class="line"># aaaa 格式 反向引用第几个表达式 \<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;bbbbaaaaccaaaaaddddaaa&#x27;</span></span><br><span class="line">reg= <span class="regexp">/(a)\1\1\1/g</span>; <span class="comment">// &#x27;aaaa&#x27;, &#x27;aaaa&#x27;</span></span><br><span class="line">reg= <span class="regexp">/(\w)\1\1\1/g</span>; </span><br><span class="line"><span class="comment">// &#x27;bbbb&#x27;, &#x27;aaaa&#x27;, &#x27;aaaa&#x27;, &#x27;dddd&#x27;</span></span><br><span class="line"># aabb</span><br><span class="line">reg = <span class="regexp">/(\w)\1(\w)\2/g</span></span><br><span class="line"><span class="comment">// [&#x27;bbbb&#x27;, &#x27;aaaa&#x27;, &#x27;ccaa&#x27;, &#x27;aadd&#x27;, &#x27;ddaa&#x27;]</span></span><br><span class="line"># replace 第二个参数可以是字符串。也可以是一个函数 也可以反向引用</span><br><span class="line"><span class="keyword">var</span> str= <span class="string">&#x27;aabbccdd&#x27;</span></span><br><span class="line">    reg= <span class="regexp">/(\w)\1(\w)\2/g</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(reg,<span class="string">&#x27;$2$2$1$1&#x27;</span>) <span class="comment">// bbaaddcc</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">$,$<span class="number">1</span>,$<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $<span class="number">2</span>+$<span class="number">2</span>+$<span class="number">1</span>+$<span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="转换驼峰和短横线"><a href="#转换驼峰和短横线" class="headerlink" title="转换驼峰和短横线"></a>转换驼峰和短横线</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 短横线转驼峰</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello-hello-world&#x27;</span>,</span><br><span class="line">    reg = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line">  <span class="keyword">var</span> str1 = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(str1)</span><br><span class="line"># 驼峰转横线</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;helloHelloWorld&#x27;</span></span><br><span class="line">  reg = <span class="regexp">/([A-Z])/g</span>;</span><br><span class="line">  <span class="keyword">var</span> str1 = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span> + $<span class="number">1.</span>toLowerCase()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(str1)</span><br><span class="line"># </span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;1000000000000&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> str1 = str.replace(<span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(str1); <span class="comment">// 100,000,000,000</span></span><br></pre></td></tr></table></figure>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 模板字符串</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;template&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;tpl&#x27;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;dv&#x27;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">name</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">age</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">sex</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tpl&#x27;</span>).innerHTML</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> content = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.template&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> source = dv.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> str = source.replace(<span class="regexp">/\&#123;\&#123;(.*?)&#125;\&#125;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">12</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;[key]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    content.innerHTML = str</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手写axios</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99axios/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这里主要实现了 <ul>
<li>构建<code>axios</code>对象和函数</li>
<li>发送网络请求:<code>ajax</code></li>
<li>拦截器</li>
<li>适配器</li>
<li><code>CancolToken</code>功能</li>
</ul>
</li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><ul>
<li>这里直接使用<code>esmodule</code>, 需要注意<code>import</code>时候不能省略 <code>.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span> 发送请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// fetch(&#x27;./db.json&#x27;).then(async (res) =&gt; console.log(await res.json()))</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123; cancel = c &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// url: &#x27;./db.json&#x27;,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">cancelToken</span>: cancelToken</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(response.data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul>
<li>导出构造函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./Axios.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Axios-js"><a href="#Axios-js" class="headerlink" title="Axios.js"></a>Axios.js</h3><ul>
<li>构建了<code>Axios</code>的类,并创造了他的实例对象</li>
<li>此时就可以 <code>axios.get</code> or <code>axios(&#123;method:&quot;GET&quot;&#125;)</code> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./request.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CancelToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./CancelToken.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InterceptorManager &#125; <span class="keyword">from</span> <span class="string">&#x27;./interceptor.js&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Axios</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaults = config;</span><br><span class="line">    <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">      <span class="attr">request</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">      <span class="attr">response</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">request</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.call(<span class="built_in">this</span>, config)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context = <span class="keyword">new</span> Axios(config);</span><br><span class="line">  <span class="keyword">let</span> instance = Axios.prototype.request.bind(context);</span><br><span class="line">  <span class="keyword">let</span> functionNamesArray = <span class="built_in">Object</span>.getOwnPropertyNames(Axios.prototype)</span><br><span class="line">  functionNamesArray.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    instance[item] = Axios.prototype[item].bind(context)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">Object</span>.keys(context).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    instance[key] = context[key];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> axios = createInstance()</span><br><span class="line">axios.CancelToken = CancelToken</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="dispatchRequest-js"><a href="#dispatchRequest-js" class="headerlink" title="dispatchRequest.js"></a>dispatchRequest.js</h3><ul>
<li>这里用于调用适配器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; xhrAdapter &#125; <span class="keyword">from</span> <span class="string">&#x27;./xhrAdapter.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xhrAdapter(config).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="xhrAdapter-js"><a href="#xhrAdapter-js" class="headerlink" title="xhrAdapter.js"></a>xhrAdapter.js</h3><ul>
<li>适配器:用于切换使用 <code>node</code> 版本还是 <code>js</code> 版本</li>
<li>这里指写了 <code>js</code> 版本<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(config.method, config.url);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            <span class="attr">config</span>: config,</span><br><span class="line">            <span class="attr">data</span>: xhr.responseText,</span><br><span class="line">            <span class="attr">headers</span>: xhr.getAllResponseHeaders(),</span><br><span class="line">            <span class="attr">request</span>: xhr,</span><br><span class="line">            <span class="attr">status</span>: xhr.status,</span><br><span class="line">            <span class="attr">statusText</span>: xhr.statusText</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败 失败的状态码为&#x27;</span> + xhr.status));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">      config.cancelToken.promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        xhr.abort();</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求已经被取消&#x27;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="interceptor-js"><a href="#interceptor-js" class="headerlink" title="interceptor.js"></a>interceptor.js</h3><ul>
<li>拦截器的实例对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">fulfilled, rejected</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers.push(&#123; fulfilled, rejected &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><ul>
<li>这里是关于拦截器的核心代码</li>
<li>可以看出是用一个数组维护 响应拦截器 和 请求拦截器</li>
<li>放的时候 请求拦截器 <code>unshift</code> , 相应拦截器 <code>push</code></li>
<li>取的时候 请求拦截器 <code>shift</code> , 相应拦截器 <code>shift</code></li>
<li>因此当多个拦截器执行的时候 请求拦截器的顺序是反的 相应拦截器的正的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dispatchRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;./dispatchRequest.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">  <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="built_in">this</span>.interceptors.request.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.unshift(item.fulfilled, item.rejected)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.interceptors.response.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.push(item.fulfilled, item.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">while</span> (chains.length) &#123;</span><br><span class="line">    promise = promise.then(chains.shift(), chains.shift());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="CancelToken-js"><a href="#CancelToken-js" class="headerlink" title="CancelToken.js"></a>CancelToken.js</h3><ul>
<li>闭包的经典应用</li>
<li>将<code>promise</code>的控制权交于外界 使用者控制</li>
<li>使用者一旦调用方法 <code>promise</code>就可以自动触发 <code>promise.resolve</code></li>
<li>随后只要在 <code>xhr</code> 网络请求中 调用 <code>xhr.abort()</code> 来中断请求<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolvePromise = resolve</span><br><span class="line">  &#125;);</span><br><span class="line">  executor(<span class="function">() =&gt;</span> resolvePromise());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/eternallycyf/eternallcyf-axios">上述代码的仓库</a></li>
<li><a href="https://github.com/axios/axios">axios</a></li>
<li><a href="https://axios-http.com/zh/">axios-doc</a></li>
</ul>
]]></content>
      <categories>
        <category>sourceCode</category>
      </categories>
      <tags>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactNative遇到的深坑和搭建项目建构</title>
    <url>/eternallycyf/ReactNative%E9%81%87%E5%88%B0%E7%9A%84%E6%B7%B1%E5%9D%91%E5%92%8C%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%BB%BA%E6%9E%84/</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1.导读"></a>1.导读</h2><ul>
<li>在搭建 <code>React Native</code> 的途中真的是遇到太多问题了</li>
<li>。。。这里记录一下</li>
<li>使用的操作系统是 <code>Macos Monterey</code></li>
<li>可以直接克隆我的仓库 修改成自己的架构<ul>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">仓库地址</a></li>
<li>已经集成了 <ul>
<li>antd/react-native </li>
<li>dva </li>
<li>axios </li>
<li>react-native-config (区分开发环境)</li>
<li>eslint</li>
<li>typescript</li>
<li>reactnavigation (路由导航)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-bug汇总"><a href="#2-bug汇总" class="headerlink" title="2.bug汇总"></a>2.bug汇总</h2><ul>
<li>先进行下一步,遇到问题再回来看看</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 搭建环境下载依赖一直失败</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># yarn ios 运行模拟器时候没有 app</span><br><span class="line"><span class="comment">// 需要给权限</span></span><br><span class="line">sudo chown -R eternallycyf ~/react_native_project</span><br><span class="line">chmod <span class="number">777</span> RN</span><br><span class="line"># 运行报错</span><br><span class="line"><span class="comment">// 端口在运行了 杀下端口</span></span><br><span class="line"></span><br><span class="line"># react native <span class="keyword">debugger</span> 显示一片空白</span><br><span class="line"><span class="comment">// react-devtools 版本冲突 请卸载全局 react-devtools</span></span><br><span class="line"><span class="comment">// 并按照react native debugger 页面提示的版本 安装</span></span><br><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// github 有 issue</span></span><br><span class="line"># react native <span class="keyword">debugger</span> 网络请求不显示</span><br><span class="line"><span class="comment">// 他这个需要先手动 在 element页面 右键点击 enable network 开启</span></span><br><span class="line"></span><br><span class="line"># npm加入其他包的时候请重新 pod install 或者直接重新运行打包</span><br><span class="line"></span><br><span class="line"># react-native-config ios配置成功 安卓config是一个空对象或者一个杂乱的对象</span><br><span class="line"><span class="comment">// 请确定 </span></span><br><span class="line"><span class="comment">// 1. android/app/build.gradle 设置了 resValue &quot;string&quot;, &quot;build_config_package&quot;, &quot;com.rn&quot;</span></span><br><span class="line"><span class="comment">//                                   (他的值不是固定的 是另一个文件里的字段)</span></span><br><span class="line"><span class="comment">// 2. android/app/src/main/AndroidManifest.xml &lt;manifest package=&quot;com.rn&quot;&gt;  </span></span><br><span class="line"><span class="comment">// 其实这个就在npm首页有写 当时我也没有看到 找了很久 。。。</span></span><br></pre></td></tr></table></figure>

<h2 id="3-准备阶段"><a href="#3-准备阶段" class="headerlink" title="3.准备阶段"></a>3.准备阶段</h2><h3 id="基本环境的安装"><a href="#基本环境的安装" class="headerlink" title="基本环境的安装"></a>基本环境的安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br><span class="line">npx react-native init RN --template react-native-template-typescript</span><br><span class="line">yarn android </span><br><span class="line">yarn ios</span><br><span class="line"># 具体流程: 参考官网</span><br><span class="line"><span class="comment">// 按着官网的先一部一部来 把基础必备的东西先装了 </span></span><br><span class="line"><span class="comment">// 例如: Xcode Watchman Node CocoaPods</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># 安装过程中遇到的问题: 指定镜像(必须 或者自己代理)</span><br><span class="line"><span class="comment">// 参考这篇文章 基本解决的搭建环境的所有问题</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.jianshu.com/p/412d760bcacd</span></span><br></pre></td></tr></table></figure>

<h3 id="Android模拟器"><a href="#Android模拟器" class="headerlink" title="Android模拟器"></a>Android模拟器</h3><ul>
<li>这里就不提这个了</li>
<li>按照官网一步一步操作 &amp;&amp; 有一个梯子 不然下载应用网站打不开 或者找第三方的地方下载</li>
<li>其次 配置环境变量时 <code>open ~/.bash_profile </code> 或  <code>open ~/.zshrc</code> 打不开<ul>
<li>可能是自己电脑之前配置有问题 </li>
<li>用这个命令打开 <code>open -e ~/.bash_profile</code></li>
</ul>
</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h4><ul>
<li>我这里最终搭建的体系是采用 <code>react-native-debugger</code> 和 <code>ios</code>模拟器结合<ul>
<li><code>react-native-debugger 集成了 console.log network redux</code> 调试工具等功能</li>
<li><code>ios</code> 模拟器 支持提示错误 元素审查 等功能</li>
<li>基本满足调试的所有需要了 </li>
</ul>
</li>
<li><img class="inline-img" src="https://user-images.githubusercontent.com/3001525/29451479-6621bf1a-83c8-11e7-8ebb-b4e98b1af91c.png" style="height:300px"/></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># brew install --cask react-native-<span class="keyword">debugger</span></span><br><span class="line">然后直接打开应用就行 <span class="comment">// 注意他直接是一个应用 不是直接运行在浏览器的</span></span><br></pre></td></tr></table></figure>

<h4 id="调试如何使用"><a href="#调试如何使用" class="headerlink" title="调试如何使用"></a>调试如何使用</h4><blockquote>在调试中遇到的bug我统一放在第二章说明了,有问题话往前翻</blockquote>

<ul>
<li>刷新模拟器:两种方法<ul>
<li>1.按两下 <code>R || r</code> 快速刷新</li>
<li>2.手动在模拟器操作<ul>
<li><code>ios: command+R || command+D  =&gt; reload</code></li>
<li><code>android: command + m reload</code> (模拟器在 应用 <code>=&gt; avd =&gt; manager</code>里面)</li>
</ul>
</li>
</ul>
</li>
<li>审查元素<ul>
<li><code>commend+d</code></li>
<li><code>show Inspector</code></li>
<li>点击元素</li>
</ul>
</li>
<li><code>console.log</code><ul>
<li>1.直接使用 <code>react-native-debugger</code> 调试工具<code>console.log</code> 界面就能看到了</li>
<li>2.运行模拟器的终端</li>
<li>3.<code>command+D</code><ul>
<li><code>Debug with Chrome</code></li>
<li>切换到<code>console</code>界面</li>
<li>将<code>top</code>切换为 <code>debug...</code></li>
</ul>
</li>
</ul>
</li>
<li>网络请求<ul>
<li><code>react native debugger</code></li>
<li>在 <code>Element</code> 页面 右键开启 <code>enable network</code></li>
<li>然后在 <code>network</code> 页面刷新就能看到网络请求了</li>
</ul>
</li>
<li><code>redux|dva</code><ul>
<li>在<code>react native debugger</code> 页面就能看到了</li>
</ul>
</li>
</ul>
<h4 id="其他调试方案单独步骤"><a href="#其他调试方案单独步骤" class="headerlink" title="其他调试方案单独步骤"></a>其他调试方案单独步骤</h4><blockquote>如果按照react-native-debugger方案,不需要看这里的内容,直接跳过</blockquote>

<h5 id="ts语法提示"><a href="#ts语法提示" class="headerlink" title="ts语法提示"></a>ts语法提示</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save @types/react-native</span><br><span class="line"><span class="comment">// 根目录构建tsconfig.json文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es6&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;metro.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jest.config.js&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vscode 安装 react native tools 插件</span></span><br><span class="line"><span class="comment">// 打开vscode开发者工具 就可以看到网络请求了</span></span><br></pre></td></tr></table></figure>

<h5 id="react调试工具"><a href="#react调试工具" class="headerlink" title="react调试工具"></a>react调试工具</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// 终端输入命令 react-devtools</span></span><br><span class="line"><span class="comment">// 在模拟器刷新后 react-devtools 就有内容了</span></span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__tests__</span><br><span class="line">.bundle</span><br><span class="line">android</span><br><span class="line">ios</span><br><span class="line">node_modules</span><br><span class="line">.buckconfig</span><br><span class="line">.flowconfig</span><br><span class="line">.ruby-version</span><br><span class="line">.watchmanconfig</span><br><span class="line">App.js</span><br><span class="line">app.json</span><br><span class="line">babel.config.js</span><br><span class="line">Gemfile</span><br><span class="line">Gemfile.lock</span><br><span class="line">index.js</span><br><span class="line">metro.config.js</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>

<h2 id="4-插件集成"><a href="#4-插件集成" class="headerlink" title="4. 插件集成"></a>4. 插件集成</h2><h3 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add dva-core-ts react-redux @types/react-redux</span><br><span class="line"><span class="comment">// 随后引入dva就可以了</span></span><br><span class="line"><span class="keyword">import</span> &#123;create, Model&#125; <span class="keyword">from</span> <span class="string">&#x27;dva-core-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createLoading <span class="keyword">from</span> <span class="string">&#x27;dva-loading-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> models <span class="keyword">from</span> <span class="string">&#x27;@/models/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/config/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home, &#123;HomeModelType&#125; <span class="keyword">from</span> <span class="string">&#x27;@/models/home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Animated&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modelExtend = <span class="built_in">require</span>(<span class="string">&#x27;dva-model-extend&#x27;</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = create(&#123;</span><br><span class="line">  <span class="attr">onError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2.加载model对象</span></span><br><span class="line">models.forEach(<span class="function"><span class="params">model</span> =&gt;</span> &#123;</span><br><span class="line">  app.model(model);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(createLoading());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.启动dva</span></span><br><span class="line">app.start();</span><br><span class="line"><span class="comment">// 4.导出dva的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app._store;</span><br><span class="line"></span><br><span class="line">interface Cached &#123;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cached: Cached = &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerModel</span>(<span class="params">model: Model</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cached[model.namespace]) &#123;</span><br><span class="line">    app.model(model);</span><br><span class="line">    cached[model.namespace] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createModel</span>(<span class="params">namespace: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> model: HomeModelType = modelExtend(home, &#123;</span><br><span class="line">    namespace,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">scrollValue</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  registerModel(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-native-config"><a href="#react-native-config" class="headerlink" title="react-native-config"></a>react-native-config</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区分多环境 需要重新打包</span></span><br><span class="line">yarn add react-native-config</span><br><span class="line"># 配置 参考Npm官网就可以了 </span><br><span class="line"><span class="comment">// 如果 ios 可以显示 , android 打印结果为空对象或者一个对象里有一堆无关的数据</span></span><br><span class="line"><span class="comment">// 请确定自己正确配置了 resValue  这个值是另一个文件中的变量</span></span><br><span class="line"><span class="comment">// 这里的 bug 解决方式放在最前面了</span></span><br><span class="line">...</span><br><span class="line">npx react-native link react-native-config</span><br><span class="line"># 根目录新建 .env</span><br><span class="line">API_URL=https:<span class="comment">//myapi.com</span></span><br><span class="line"># App.tsx</span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">&#x27;react-native-config&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="babel-plugin-module-resolve"><a href="#babel-plugin-module-resolve" class="headerlink" title="babel-plugin-module-resolve"></a>babel-plugin-module-resolve</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-<span class="built_in">module</span>-resolver</span><br><span class="line"># babel.config.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;module:metro-react-native-babel-preset&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;module-resolver&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">root</span>: [<span class="string">&#x27;./src&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@/utils&#x27;</span>: <span class="string">&#x27;./src/utils&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/pages&#x27;</span>: <span class="string">&#x27;./src/pages&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/navigator&#x27;</span>: <span class="string">&#x27;./src/navigator&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/models&#x27;</span>: <span class="string">&#x27;./src/models&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/config&#x27;</span>: <span class="string">&#x27;./src/config&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/components&#x27;</span>: <span class="string">&#x27;./src/components&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/assets&#x27;</span>: <span class="string">&#x27;./src/assets&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"># tsconfig.json</span><br><span class="line"> <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./src&quot;</span>,                      </span><br><span class="line"> <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/assets/*&quot;</span>: [<span class="string">&quot;assets/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/components/*&quot;</span>: [<span class="string">&quot;components/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/config/*&quot;</span>: [<span class="string">&quot;config/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/models/*&quot;</span>: [<span class="string">&quot;models/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/navigator/*&quot;</span>: [<span class="string">&quot;navigator/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/pages/*&quot;</span>: [<span class="string">&quot;pages/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/utils/*&quot;</span>: [<span class="string">&quot;utils/*&quot;</span>]</span><br><span class="line"> &#125;,       </span><br></pre></td></tr></table></figure>

<h3 id="antd-reactNative"><a href="#antd-reactNative" class="headerlink" title="antd/reactNative"></a>antd/reactNative</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; View, Text, Button &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Icon &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/react-native&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="React-Navigation"><a href="#React-Navigation" class="headerlink" title="React Navigation"></a>React Navigation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">这个直接参考官方文档就可以了 我没有遇到什么问题</span><br><span class="line">只是有些API有版本问题</span><br></pre></td></tr></table></figure>

<h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><ul>
<li><a href="https://www.react-native.cn/docs/environment-setup">ReactNative#官网搭建开发环境文档</a></li>
<li><a href="https://www.jianshu.com/p/412d760bcacd">搭建环境问题的解决</a></li>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">我的reactNative项目模板仓库</a></li>
<li><a href="https://dvajs.com/guide/#%E7%89%B9%E6%80%A7">dva</a></li>
<li><a href="https://www.npmjs.com/package/react-native-config">react-native-config</a></li>
<li><a href="https://www.npmjs.com/package/babel-plugin-module-resolve">babel-plugin-module-resolve</a></li>
<li><a href="https://rn.mobile.ant.design/index-cn">antd-RN</a></li>
<li><a href="https://reactnavigation.org/">React Navigation</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>自己做一个脚手架</title>
    <url>/eternallycyf/%E8%87%AA%E5%B7%B1%E5%81%9A%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="为什么需要一个脚手架"><a href="#为什么需要一个脚手架" class="headerlink" title="为什么需要一个脚手架"></a>为什么需要一个脚手架</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">呃。。。为了方便copy</span><br><span class="line">哈哈。为了方便自己克隆自己的仓库。顺便了解下脚手架是如何制作的</span><br><span class="line">在这里做一个克隆自己仓库的脚手架</span><br><span class="line">还是非常简单的。只需要克隆我的脚手架文件。换成自己定义的名字</span><br><span class="line">npm发布下就可以用了</span><br><span class="line">废话不多说,开始正题了。</span><br></pre></td></tr></table></figure>

<h2 id="1-克隆基本代码"><a href="#1-克隆基本代码" class="headerlink" title="1.克隆基本代码"></a>1.克隆基本代码</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/eternallycyf/</span>lrxc-cli.git</span><br></pre></td></tr></table></figure>

<h2 id="2-更改api查询名称"><a href="#2-更改api查询名称" class="headerlink" title="2.更改api查询名称"></a>2.更改<code>api</code>查询名称</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里是调用的github的api 查询自己的仓库信息</span></span><br><span class="line"># ./src/create.js</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://api.github.com/users/eternallycyf/repos&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://api.github.com/repos/eternallycyf/<span class="subst">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class="line">  <span class="keyword">let</span> api = <span class="string">`eternallycyf/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">  将这三行的eternallycyf换成自己github的名字</span><br></pre></td></tr></table></figure>

<h2 id="3-更换提示信息"><a href="#3-更换提示信息" class="headerlink" title="3.更换提示信息"></a>3.更换提示信息</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./src/main.js </span><br><span class="line">将 lrxc-cli 换成自己脚手架的名字</span><br></pre></td></tr></table></figure>

<h2 id="4-设置-package-json"><a href="#4-设置-package-json" class="headerlink" title="4.设置 package.json"></a>4.设置 <code>package.json</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 将这些<span class="built_in">JSON</span>展示字段的value换成自己的 这些字段主要用于npm包页面的展示</span><br><span class="line"><span class="comment">// 我的脚手架叫做 lrxc-cli</span></span><br><span class="line">name</span><br><span class="line">version</span><br><span class="line">description</span><br><span class="line">author</span><br><span class="line">keywords</span><br><span class="line">homepage</span><br><span class="line">repository</span><br><span class="line">bin</span><br></pre></td></tr></table></figure>

<h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5.发布"></a>5.发布</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>在npm官网注册自己的账号</span><br><span class="line"># <span class="number">2.</span>注意</span><br><span class="line">注意第一次发布需要邮箱验证</span><br><span class="line">并且发布时候npm必须是npm源 不能是淘宝的 否则会一直失败</span><br><span class="line">可以使用 nrm 来切换</span><br><span class="line">yarn <span class="built_in">global</span> add nrm </span><br><span class="line">nrm ls</span><br><span class="line">nrm use npm</span><br><span class="line"># <span class="number">3.</span>npm login</span><br><span class="line">输入自己账号密码</span><br><span class="line"># <span class="number">4.</span>npm publish</span><br><span class="line">当没有报错的时候就发布成功了</span><br><span class="line">可以在npm官网搜索到自己的包</span><br><span class="line"># <span class="number">5.</span>npm install xxx -g</span><br><span class="line">xxx create 项目名</span><br><span class="line">这时候你就可以看到自己github的所有仓库啦</span><br><span class="line"># <span class="number">6.</span>这个脚手架是根据 git tag来下载的</span><br><span class="line">所以要对想要clone的 仓库打tag</span><br><span class="line">git tag -a v1<span class="number">.0</span> -m <span class="string">&quot;my version 1.0&quot;</span></span><br><span class="line">此时终端运行 xxx create 项目名</span><br><span class="line">就会跳出一个 <span class="number">1.0</span> 的下一步</span><br><span class="line">按住回车就开始克隆啦</span><br></pre></td></tr></table></figure>

<h2 id="6-使用到的包"><a href="#6-使用到的包" class="headerlink" title="6.使用到的包"></a>6.使用到的包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios:发送ajax请求的</span><br><span class="line"><span class="attr">commander</span>:提供终端命令行支持的包</span><br><span class="line"><span class="attr">consolidate</span>:用于从npm上下载东西统一模板引擎</span><br><span class="line">download-git-repo:下载仓库的</span><br><span class="line"><span class="attr">inquirer</span>:命令行交互工具</span><br><span class="line"><span class="attr">metalsmith</span>:遍历下载文件 是否需要模板渲染</span><br><span class="line"><span class="attr">ncp</span>: 社区</span><br><span class="line"><span class="attr">ora</span>: 命令行loading效果</span><br></pre></td></tr></table></figure>

<blockquote>
具体代码就不说了,从使用的包就可以看出来
就是使用nodejs通过github提供的api获取仓库信息
通过一些包完成命令行交互
然后又通过fs模块读取渲染下载文件
完成的简单实用的脚手架
如果需要定制需求的话
具体的API可以直接看npm包的页面
</blockquote>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>自己搭建一个gitlab</title>
    <url>/eternallycyf/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAgitlab/</url>
    <content><![CDATA[<h1 id="自己搭建一个gitlab"><a href="#自己搭建一个gitlab" class="headerlink" title="自己搭建一个gitlab"></a>自己搭建一个gitlab</h1><blockquote>这里主要用到docker镜像来构建jenkins 和 gitlab的</blockquote>

<h2 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h2><h3 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h3><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">brew install jenkins-lts</span><br><span class="line">#</span><br><span class="line">brew services start jenkins-lts</span><br><span class="line">brew services restart jenkins-lts</span><br><span class="line">brew upgrade jenkins-lts</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/</span></span><br></pre></td></tr></table></figure>
<h4 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -itd -u root -p <span class="number">8080</span>:<span class="number">8080</span> -v jenkins-data:<span class="regexp">/var/</span>jenkins_home -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v <span class="string">&quot;$HOME&quot;</span>:<span class="regexp">/home --name jenkins jenkins/</span>jenkins</span><br><span class="line"><span class="comment">// jenkinsci/blueocean</span></span><br><span class="line">#</span><br><span class="line">docker logs jenkins</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//公网地址:8080/</span></span><br></pre></td></tr></table></figure>

<h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><ul>
<li>启动并打开自己本地或者服务器<code>jenkins</code>的网页</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加CDN</span><br><span class="line">Manage jenkins =&gt; Manage Plugins =&gt; <span class="function"><span class="params">Advanced</span> =&gt;</span> URL</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json</span></span><br><span class="line"># 需要安装的必备插件</span><br><span class="line">Authorize Project</span><br><span class="line">GitHub Integration</span><br><span class="line">GitLab</span><br><span class="line">Publish Over SSH</span><br><span class="line">SSH Agent</span><br><span class="line">SSH </span><br><span class="line">SSH Pipeline Steps</span><br><span class="line">#</span><br><span class="line">安装docker-compose</span><br><span class="line"># vim docker-compose.yml </span><br><span class="line"><span class="attr">http</span>:<span class="comment">//xxx:8088/</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h2><h3 id="创建docker镜像"><a href="#创建docker镜像" class="headerlink" title="创建docker镜像"></a>创建docker镜像</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>新建一个 docker-compose.yml 文件</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//公网地址:8088/users/sign_in</span></span><br><span class="line"># <span class="number">2.1</span> 采用复制gitlab提供的最新完整版配置</span><br><span class="line"><span class="comment">// 复制 https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml</span></span><br><span class="line"><span class="comment">// 更改以下几行替换成自己的相关信息</span></span><br><span class="line">gitlab</span><br><span class="line">- GITLAB_HOST=公网地址</span><br><span class="line">- GITLAB_ROOT_PASSWORD=管理员密码</span><br><span class="line">- GITLAB_ROOT_EMAIL=管理员邮箱</span><br><span class="line"> <span class="attr">ports</span>: <span class="comment">//映射端口</span></span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line"># <span class="number">2.2</span> 或使用最简单的配置</span><br><span class="line"><span class="comment">// 或者直接复制下方</span></span><br><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services</span>:</span><br><span class="line">  web:</span><br><span class="line">    image: <span class="string">&#x27;twang2218/gitlab-ce-zh&#x27;</span></span><br><span class="line">    <span class="attr">restart</span>: always</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;公网地址&#x27;</span></span><br><span class="line">    <span class="attr">environment</span>:</span><br><span class="line">      TZ: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG</span>: |</span><br><span class="line">        external_url <span class="string">&#x27;http://公网地址&#x27;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">2222</span></span><br><span class="line">        unicorn[<span class="string">&#x27;port&#x27;</span>] = <span class="number">8888</span></span><br><span class="line">        nginx[<span class="string">&#x27;listen_port&#x27;</span>] = <span class="number">80</span></span><br><span class="line">    <span class="attr">ports</span>:</span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes</span>:</span><br><span class="line">      - ./config:<span class="regexp">/etc/gi</span>tlab</span><br><span class="line">      - ./data:<span class="regexp">/var/</span>opt/gitlab</span><br><span class="line">      - ./logs:<span class="regexp">/var/</span>log/gitlab</span><br><span class="line"># <span class="number">3</span> http:<span class="comment">//localhost:8088/users/sign_in</span></span><br><span class="line">第一次没出来就刷新下</span><br></pre></td></tr></table></figure>

<h3 id="开启gitlab-CICD"><a href="#开启gitlab-CICD" class="headerlink" title="开启gitlab-CICD"></a>开启gitlab-CICD</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建项目</span><br><span class="line">设置</span><br><span class="line">集成</span><br><span class="line"></span><br><span class="line">选择 Campfire push evnets <span class="comment">// 当push时候触发</span></span><br><span class="line">取消ssh verification <span class="comment">// 没有证书</span></span><br></pre></td></tr></table></figure>

<h2 id="jekinx触发gitlab流水线"><a href="#jekinx触发gitlab流水线" class="headerlink" title="jekinx触发gitlab流水线"></a>jekinx触发gitlab流水线</h2><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">新建任务</span><br><span class="line">jenkins-demo</span><br><span class="line">自由风格</span><br><span class="line">源码管理</span><br><span class="line">构建触发器</span><br><span class="line"><span class="comment">//填写到 gitlab 集成 url</span></span><br><span class="line">build when a change is pushed to gitLab</span><br><span class="line">选中push event</span><br><span class="line">opened merge Request events</span><br><span class="line">approved merge request(ee-only)</span><br><span class="line">comments</span><br><span class="line">comment <span class="keyword">for</span> triggering a build</span><br></pre></td></tr></table></figure>

<h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">      docker &#123;</span><br><span class="line">        image <span class="string">&#x27;node:10&#x27;</span></span><br><span class="line">        args <span class="string">&#x27;-p 20000:8080&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Building..&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;node -v&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;echo &quot;hello&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Test&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Testing..&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Deploy&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Deploying....&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="端口问题"><a href="#端口问题" class="headerlink" title="端口问题"></a>端口问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jenkins 和 gitlab在一个服务器上</span></span><br><span class="line">管理中心</span><br><span class="line">设置</span><br><span class="line">网络</span><br><span class="line">外发请求</span><br><span class="line">选中 allow requests ...</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>React实现虚拟滚动</title>
    <url>/eternallycyf/React%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>在很早之前我们都是通过滚动距离来进行判断,是否在可视区,进而判断是否渲染,完成虚拟列表</li>
<li>这个过程是有些繁琐的,当滚动回去的时候 还要重新计算逻辑</li>
<li>但是<code>js</code> 的新对象 <code>IntersectionObserver</code> 就完美解决了这个问题</li>
<li>可以通过这个对象的方法进行设计,直接可以根据 <code>entry.isIntersecting</code> 判断是否在可视区</li>
<li><code>true</code> 就是可视区 <code>false</code> 就在屏幕之外</li>
<li>逻辑结构简单明了</li>
<li>通过 <code>react Hooks</code> 进行了封装</li>
<li>用的时候只需要调用下就可以很简单的完成一个虚拟列表了</li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">true</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure>

<h2 id="index-tsx"><a href="#index-tsx" class="headerlink" title="index.tsx"></a>index.tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useVirtualList <span class="keyword">from</span> <span class="string">&#x27;./useVirtualList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props: any</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="keyword">var</span> imgUrlArr = [ <span class="comment">// 所有需要加载的图片链接</span></span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">10vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27;, <span class="attr">textAlign:</span> &#x27;<span class="attr">center</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the &#123;props.title&#125; girl<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrlArr[(0</span> | <span class="attr">Math.random</span>() * <span class="attr">7</span>)]&#125; <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        Array.from(&#123; length: 100 &#125;).map((_, index) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        ))</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>通过docker部署项目</title>
    <url>/eternallycyf/%E9%80%9A%E8%BF%87docker%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><blockquote>具体安装流程可以参考官网,一步一步走没有问题的,这里这是总结下</blockquote>

<ul>
<li><a href="https://docs.docker.com/get-started/">docker安装流程</a></li>
</ul>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="string">sudo</span> <span class="string">yum</span> <span class="string">remove</span> <span class="string">docker</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-engine</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">yum</span> <span class="string">remove</span> <span class="string">docker-ce</span> <span class="string">docker-ce-cli</span> <span class="string">containerd.io</span></span><br><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">/var/lib/docker</span></span><br><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">/var/lib/containerd</span></span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">yum-utils</span></span><br><span class="line"><span class="string">yum-config-manager</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="string">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="string">yum</span> <span class="string">makecache</span> <span class="string">fast</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">docker-ce</span> <span class="string">docker-ce-cli</span> <span class="string">containerd.io</span></span><br></pre></td></tr></table></figure>

<h3 id="启动和检查"><a href="#启动和检查" class="headerlink" title="启动和检查"></a>启动和检查</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">docker</span></span><br><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">hello-world</span></span><br><span class="line"><span class="string">docker</span> <span class="string">images</span></span><br></pre></td></tr></table></figure>

<h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/etc/docker</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">tee</span> <span class="string">/etc/docker/daemon.json</span> <span class="string">&lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;:</span> [<span class="string">&quot;https://qwm8wimf.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>

<h3 id="docker-配置-vim"><a href="#docker-配置-vim" class="headerlink" title="docker 配置 vim"></a>docker 配置 vim</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">yum install unzip</span><br></pre></td></tr></table></figure>

<h2 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2.基本命令"></a>2.基本命令</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">search</span></span><br><span class="line">            <span class="string">mysql</span> <span class="string">--filter=STARS=3000</span> <span class="comment"># 查找 3000 starts 以上的</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名[:tag]</span>               <span class="comment"># 下载指定版本</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">images</span></span><br><span class="line">              <span class="string">-a</span> <span class="string">--all</span>      <span class="comment"># 列出所有的镜像</span></span><br><span class="line">              <span class="string">-q</span> <span class="string">--quiet</span>    <span class="comment"># 只显示镜像的 id</span></span><br><span class="line">              <span class="string">-aq</span>           <span class="comment"># 常用</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">rmi</span> </span><br><span class="line">            <span class="string">-f</span> <span class="string">imageId1</span> <span class="string">imageId2</span> <span class="string">...</span>   <span class="comment"># 删除</span></span><br><span class="line">            <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">images</span> <span class="string">-aq)</span>    <span class="comment"># 删除所有     </span></span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">ps</span>                         <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">          <span class="string">-a</span>                      <span class="comment"># 查看曾经运行的容器</span></span><br><span class="line">          <span class="string">-a</span> <span class="string">-n=?</span>                 <span class="comment"># 指定个数显示</span></span><br><span class="line">          <span class="string">-q</span>                      <span class="comment"># 只显示 imagesId</span></span><br><span class="line"><span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> []  <span class="string">image[:tag]</span> </span><br><span class="line">           <span class="string">-d</span>                     <span class="comment"># 以后台方式运行</span></span><br><span class="line">              <span class="string">-p</span>  <span class="number">8080</span><span class="string">:8080</span> <span class="string">镜像名:tag</span>    </span><br><span class="line">           <span class="string">-it</span>                    <span class="comment"># 使用交互方式运行 前台运行</span></span><br><span class="line">           <span class="string">-p</span>                     <span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">                     <span class="comment"># 第一个端口是本地(公网) 第二个是容器内的</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">ip:主机端口:容器端口</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">主机端口:容器端口</span>  <span class="comment">## 常用</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">容器端口</span></span><br><span class="line">               <span class="string">容器端口</span></span><br><span class="line">           <span class="string">--name</span> <span class="string">xxx</span> </span><br><span class="line">           <span class="string">-v</span> <span class="string">主机目录:容器内目录</span>    </span><br><span class="line">                 <span class="comment">## 匿名挂载 -v 容器内路径 </span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">...</span> <span class="string">-v</span> <span class="string">容器内路径</span> <span class="string">nginx</span></span><br><span class="line">                 <span class="comment">## 具名挂载 映射 自定义名字前不带斜杠</span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">...</span> <span class="string">-v</span> <span class="string">自定义名字:容器内路径</span> <span class="string">nginx</span></span><br><span class="line">                 <span class="comment">### volume</span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">volume</span> <span class="string">ls</span></span><br><span class="line">                              <span class="string">inspect</span> <span class="string">自定义名字</span></span><br><span class="line">                              <span class="comment"># /var/lib/docker/volumns/...</span></span><br><span class="line">                              <span class="string">create</span></span><br><span class="line">                              <span class="string">prune</span></span><br><span class="line">                              <span class="string">rm</span></span><br><span class="line">                 <span class="comment">### -v 自定义名字:容器路径[:ro|:rw]</span></span><br><span class="line">                 <span class="string">指定容器内部</span> <span class="string">读写权限</span> </span><br><span class="line">           <span class="string">-e</span>                     <span class="comment"># 配置环境</span></span><br><span class="line">           <span class="string">-P</span>                     <span class="comment"># 随机指定端口 大写的P</span></span><br><span class="line">           <span class="string">--rm</span>                   <span class="comment"># 用完就删除掉</span></span><br><span class="line">   <span class="comment">## 运行容器 </span></span><br><span class="line">   <span class="string">docker</span> <span class="string">run</span> <span class="string">-it</span> <span class="string">centos</span> <span class="string">/bin/bash</span> </span><br><span class="line">   <span class="comment">## 进入容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">容器名</span> <span class="string">/bin/bash</span> <span class="comment"># 开启一个新的终端</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">attach</span> <span class="string">容器ID</span>            <span class="comment"># 进入正在运行的命令行 不是新窗口</span></span><br><span class="line">   <span class="comment">## 退出容器</span></span><br><span class="line">   <span class="string">exit</span></span><br><span class="line">   <span class="string">按住</span> <span class="string">ctrl</span> <span class="string">+</span> <span class="string">p</span> <span class="string">+</span> <span class="string">q</span>              <span class="comment"># 退出 但不关闭容器 </span></span><br><span class="line">   <span class="comment">## 删除容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">rm</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-aq)</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">ps</span> <span class="string">-a</span> <span class="string">-q|xargs</span> <span class="string">docker</span> <span class="string">rm</span> </span><br><span class="line">   <span class="comment">## 启动容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">start</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="comment">## 重启容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">restart</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="comment">## 停止容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">stop</span> <span class="string">容器ID</span>  </span><br><span class="line">   <span class="comment">## 强制停止容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">kill</span> <span class="string">容器ID</span></span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包 Dockerfile 文件  </span></span><br><span class="line"> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">dockerfile1</span> <span class="string">-t</span> <span class="string">mydocker</span> <span class="string">.</span></span><br><span class="line">              <span class="string">-f</span> <span class="string">dockerfile文件名/文件路径</span></span><br><span class="line">              <span class="string">-t</span> <span class="string">.</span> <span class="string">生成文件路径</span> <span class="string">.代表当前路径</span></span><br></pre></td></tr></table></figure>



<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="string">docker</span> <span class="string">--help</span></span><br><span class="line"><span class="string">docker</span> <span class="string">stats</span>                                  <span class="comment"># 查看cpu</span></span><br><span class="line"><span class="string">https://docs.docker.com/reference/</span></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="string">docker</span> <span class="string">logs</span></span><br><span class="line">       <span class="string">docker</span> <span class="string">logs</span> <span class="string">-tf</span> <span class="string">容器ID</span></span><br><span class="line">       <span class="string">docker</span> <span class="string">logs</span> <span class="string">-tf</span> <span class="string">--tail</span> [<span class="string">number</span>] <span class="string">容器ID</span></span><br><span class="line">     <span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo   &#x27;eternallycyf&#x27;;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment"># 查看 容器的进程信息 端口等等</span></span><br><span class="line"><span class="string">docker</span> <span class="string">top</span> <span class="string">容器ID</span>             </span><br><span class="line"><span class="comment"># 查看容器元信息</span></span><br><span class="line"><span class="string">docker</span> <span class="string">inspect</span> <span class="string">容器ID</span>         </span><br><span class="line"><span class="comment"># 将容器内的文件 复制出来</span></span><br><span class="line"><span class="string">docker</span> <span class="string">cp</span> <span class="string">容器ID:容器内路径</span> <span class="string">目的地主机路径</span></span><br><span class="line"><span class="string">docker</span> <span class="string">cp</span> <span class="string">容器ID:/home/eternall.md</span> <span class="string">/home</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">history</span> <span class="string">imageID</span> <span class="string">--no-trunc</span></span><br></pre></td></tr></table></figure>

<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><h4 id="dockerhub"><a href="#dockerhub" class="headerlink" title="dockerhub"></a>dockerhub</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">用户名</span> <span class="string">-p</span> <span class="string">密码</span></span><br><span class="line"><span class="string">docker</span> <span class="string">logout</span></span><br></pre></td></tr></table></figure>

<h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login</span></span><br><span class="line"><span class="string">docker</span> <span class="string">login</span> <span class="string">--username=用户名</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名:tag</span></span><br><span class="line"><span class="comment"># push</span></span><br><span class="line"><span class="string">docker</span> <span class="string">push</span> <span class="string">eternallycyf/镜像名[:tag]</span></span><br></pre></td></tr></table></figure>

<h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">tag</span> <span class="string">centos</span> <span class="string">eternallycyf/myCentos:1.0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">  <span class="string">docker</span> <span class="string">commit</span> <span class="string">-m=&#x27;&#x27;</span> <span class="string">-a=&#x27;作者&#x27;</span> <span class="string">容器ID</span> <span class="string">目标镜像名:[tag]</span></span><br><span class="line"><span class="comment"># push </span></span><br><span class="line">  <span class="string">docker</span> <span class="string">push</span> <span class="string">eternallycyf/镜像名:tag</span></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">  <span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名:tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将docker镜像压缩</span></span><br><span class="line">  <span class="string">docker</span> <span class="string">save</span> <span class="string">-o</span> <span class="string">压缩包名.zip</span> <span class="string">镜像名:tag</span> </span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="string">docker</span> <span class="string">load</span> <span class="string">-i</span> <span class="string">/usr/tmp/压缩包名.zip</span></span><br><span class="line"><span class="comment"># 上传到服务器</span></span><br><span class="line"><span class="string">scp</span> <span class="string">压缩包名.zip</span> <span class="string">root@公网地址:/user/tmp</span></span><br></pre></td></tr></table></figure>

<h3 id="容器互联-evth-pair"><a href="#容器互联-evth-pair" class="headerlink" title="容器互联 evth-pair"></a>容器互联 evth-pair</h3><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桥接 container host none</span></span><br><span class="line"><span class="string">ip</span> <span class="string">addr</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">ls</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">rm</span> <span class="string">xxx</span></span><br><span class="line"><span class="comment"># docker0 默认 域名不能访问 --link 可以打通连接</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="string">--net</span> <span class="string">bridge</span> <span class="string">tomcat</span></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line"><span class="comment"># driver 默认 subnet 子网 geteway 网关</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">create</span> <span class="string">--driver</span> <span class="string">bridge</span> <span class="string">--subnet</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span> <span class="bullet">-</span> <span class="string">geteway</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="string">mynet</span></span><br><span class="line"><span class="string">docker</span> <span class="string">xxx</span> <span class="string">--net</span> <span class="string">mynet</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>

<h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在hosts 配置里链接了 </span></span><br><span class="line">--link 容器名 </span><br></pre></td></tr></table></figure>



<h2 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3. Dockerfile"></a>3. Dockerfile</h2><ul>
<li>命名为 Dockerfile 就会自动找他 </li>
</ul>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># maintainer 维护者信息 姓名+邮箱</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> eternallycyf&lt;xxx@qq.com&gt;</span><br><span class="line"><span class="comment"># run 构建时候需要运行的命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="comment"># add 集成别的东西 会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> 文件名 解压后的镜像内地址</span></span><br><span class="line"><span class="comment"># workdir 设置当前工作目录 / /bin/bash</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment"># valume 设置容器卷</span></span><br><span class="line">VALUME </span><br><span class="line"><span class="comment"># expose 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">RUN</span></span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本命令  只有最后一个会生效 可被替代 (覆盖) docker run xxx -l 就会替换掉 编写的 CMD [&quot;ls&quot;,&quot;-a&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span> </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;----end---&#x27;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"><span class="comment"># entrypoint 脚本命令  可以追加命令 不</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># onbuild 当构建一个dockerfile 文件时 就触发这个指令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span></span><br><span class="line"><span class="comment"># copy 文件拷贝到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /user/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"><span class="comment"># env 环境变量 ENV </span></span><br><span class="line">  <span class="comment"># 例如 MYPATH user/local</span></span><br><span class="line">  <span class="comment"># 使用时候需要 $MYPATH</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /<span class="keyword">user</span>/local</span><br></pre></td></tr></table></figure>

<h3 id="数据卷共享"><a href="#数据卷共享" class="headerlink" title="数据卷共享"></a>数据卷共享</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -t --name docker01 容器ID </span><br><span class="line">docker run -it --name docker02 --volumes-<span class="keyword">from</span> docker01 容器ID</span><br><span class="line">这时这两个容器都是相互同步的 即使删除了 还在</span><br></pre></td></tr></table></figure>

<h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根目录创建 Dockerfile  </span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS installer</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm i tyarn -g</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tyarn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=installer /node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  vixlet/nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /dist /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  <span class="number">127.0</span>.<span class="number">0.1</span>;</span><br><span class="line">    access_log off;</span><br><span class="line">    add_header X-Frame-Options sameorigin always;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /app;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-docker-compose"><a href="#4-docker-compose" class="headerlink" title="4. docker compose"></a>4. docker compose</h2><h3 id="基础步骤"><a href="#基础步骤" class="headerlink" title="基础步骤"></a>基础步骤</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dockerfile</span></span><br><span class="line"><span class="string">docker-compose.yml</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">可以使用</span> <span class="string">Dockerfile</span> <span class="string">生成镜像</span></span><br><span class="line"><span class="string">或者</span> <span class="string">docker-compose.yml</span> <span class="string">image</span></span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"># 重新构建</span><br><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>

<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="comment">## build 生成的 指定dockerfile</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="comment">## 镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine</span></span><br><span class="line"><span class="string">    network:  </span></span><br><span class="line"><span class="string">    ## 部署</span></span><br><span class="line"><span class="string">    deploy:</span></span><br><span class="line"><span class="string">      ### 副本</span></span><br><span class="line"><span class="string">      replicas: 6</span></span><br><span class="line"><span class="string"># 其他配置</span></span><br><span class="line"><span class="string">volumns: </span></span><br><span class="line"><span class="string">network:</span></span><br><span class="line"><span class="string">configs:</span></span><br></pre></td></tr></table></figure>

<h2 id="5-doker-swarm"><a href="#5-doker-swarm" class="headerlink" title="5. doker swarm"></a>5. doker swarm</h2><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">docker service update</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">双主双从:</span> <span class="string">假设一个节点挂了</span> <span class="string">其他节点是否可用</span></span><br><span class="line"><span class="string">Raft</span> <span class="string">协议:</span> <span class="string">保证大多数节点存活才可以用</span> <span class="string">只要&gt;1</span> <span class="string">集群至少大于3台</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">init</span> <span class="string">--advertise-addr</span> <span class="string">IP地址</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">node</span> <span class="string">ls</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">join-token</span> <span class="string">manager</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">join-token</span> <span class="string">worker</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">leave</span></span><br><span class="line"><span class="string">update</span></span><br></pre></td></tr></table></figure>


<h3 id="6-docker-stack"><a href="#6-docker-stack" class="headerlink" title="6. docker stack"></a>6. docker stack</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 单机</span><br><span class="line">docker-compose up -d workpress.yaml</span><br><span class="line"># 集群</span><br><span class="line">docker stack deploy worldpress.yaml</span><br></pre></td></tr></table></figure>

<h3 id="7-docker-secret"><a href="#7-docker-secret" class="headerlink" title="7. docker secret"></a>7. docker secret</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 配置密码 证书</span><br><span class="line">docker secrets</span><br><span class="line">   create</span><br><span class="line">   inspect</span><br><span class="line">   ls</span><br><span class="line">   rm</span><br></pre></td></tr></table></figure>

<h3 id="8-工具"><a href="#8-工具" class="headerlink" title="8. 工具"></a>8. 工具</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">mysql:5.7</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="number">3310</span><span class="string">:3306</span> <span class="string">-v</span> <span class="string">/home/mysql/conf:/etc/mysql/conf.d</span> <span class="string">-v</span> <span class="string">/home/mysql/data:/var/lib/mysql</span> <span class="string">-e</span> <span class="string">MYSQL_ROOT_PASSWORD=666222</span> <span class="string">--name</span> <span class="string">mysql01</span> <span class="string">mysql:5.7</span></span><br><span class="line"><span class="comment"># navicat 3310 端口</span></span><br><span class="line"><span class="string">公网地址:3310</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="number">666222</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">此时在</span> <span class="string">服务器的</span>  <span class="string">/home/mysql/conf</span> <span class="string">data</span> <span class="string">目录就映射成功了</span></span><br></pre></td></tr></table></figure>


<h4 id="mysql-多个共享"><a href="#mysql-多个共享" class="headerlink" title="mysql 多个共享"></a>mysql 多个共享</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -v /etc/mysql/conf.d -v /<span class="keyword">var</span>/lib/mysql -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql01 mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql02 --volumes-<span class="keyword">from</span> mysql01 mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<h4 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">8000</span>:<span class="number">8000</span> -p <span class="number">9443</span>:<span class="number">9443</span> --name portainer --restart=always -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v portainer_data:<span class="regexp">/data portainer/</span>portainer-ee:latest</span><br><span class="line"></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//公网地址:9443/</span></span><br></pre></td></tr></table></figure>


<h3 id="9-bug"><a href="#9-bug" class="headerlink" title="9. bug"></a>9. bug</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">如果没有前台进程 </span><br><span class="line">docker就会自动停止</span><br><span class="line">例如 nginx 启动后如果没有被用 就会立即停止</span><br><span class="line"># tomcat</span><br><span class="line">阿里云下载的镜像 默认是阉割版的</span><br><span class="line">cp webapps.dist<span class="comment">/* webapps</span></span><br><span class="line"><span class="comment"># elasticsearch 太占内存</span></span><br><span class="line"><span class="comment">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&#x27;-Xms64m -Xmx512m&#x27; elasticsearch:7.6.2</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的基本命令</title>
    <url>/eternallycyf/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><ul>
<li>服务器启动</li>
<li><code>make</code></li>
<li><code>make install</code> <h3 id="开机关机"><a href="#开机关机" class="headerlink" title="开机关机"></a>开机关机</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步数据到硬盘</span></span><br><span class="line">sync </span><br><span class="line"><span class="comment">// 关机 </span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment">// 重启</span></span><br><span class="line">reboot  | shutdown -r now </span><br><span class="line"><span class="comment">// 10分钟后 重启 </span></span><br><span class="line">shutdown -r +<span class="number">10</span></span><br><span class="line"><span class="comment">// 关闭系统</span></span><br><span class="line">halt</span><br><span class="line">ifconfig en0  <span class="comment">// ipconfig/all     ip addr</span></span><br><span class="line">curl localhost:<span class="number">3344</span></span><br></pre></td></tr></table></figure>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">bin  存放使用的命令</span><br><span class="line">boot linux核心文件</span><br><span class="line">dev  存放外部设备</span><br><span class="line">mnt  临时挂载文件系统 光驱</span><br><span class="line">media  u盘 光驱</span><br><span class="line">lib  动态链接共享库</span><br><span class="line">lost+fount 系统非法关机前没保存的文件</span><br><span class="line">proc 系统内存映射 系统信息</span><br><span class="line">sbin 系统管理员的系统管理程序</span><br><span class="line">srv  服务启动后需要提取的数据</span><br><span class="line">sys  存放文件系统</span><br><span class="line">run  临时文件系统</span><br><span class="line"></span><br><span class="line">etc  系统管理配置文件</span><br><span class="line">home 用户文件夹</span><br><span class="line">root 管理员文件夹</span><br><span class="line">opt  放数据库等守护进程</span><br><span class="line">user 用户的程序放在这里 qq 微信</span><br><span class="line">     user/bin  系统用户 </span><br><span class="line">     user/sbin 超级用户</span><br><span class="line">     user/src  内核源代码</span><br><span class="line"><span class="keyword">var</span>  日志</span><br><span class="line">tmp  临时文件</span><br><span class="line">www  存放网站</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件名字含义"><a href="#文件名字含义" class="headerlink" title="文件名字含义"></a>文件名字含义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">drwx-wx-wx-x@ root root</span><br><span class="line"># 第一个字符 </span><br><span class="line">d 表示目录</span><br><span class="line">r 便是可以打开的文件</span><br><span class="line">- 文件</span><br><span class="line">l 链接文档</span><br><span class="line"># 三组</span><br><span class="line">r可读 w可写 x可执行 -没权限</span><br><span class="line">主权限 组权限 其他用户权限</span><br><span class="line"># 属组 属主</span><br><span class="line"># 文件大小 时间</span><br></pre></td></tr></table></figure>

<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">useradd - 选项 用户名</span><br><span class="line">        -m 用户名 自动创建这个用户的主目录</span><br><span class="line">  /etc/passwd</span><br><span class="line"># 删除用户</span><br><span class="line">userdel -r 用户名</span><br><span class="line"># 切换用户</span><br><span class="line">su 用户名</span><br><span class="line">sudo su</span><br><span class="line"># hostname 主机名</span><br><span class="line">hostname 修改主机名</span><br><span class="line"># 设置密码</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls -a           <span class="comment">// 所有的文件</span></span><br><span class="line">   -l           <span class="comment">// 包含文件的属性和权限 没有隐藏文件</span></span><br><span class="line">   -al</span><br><span class="line">pwd             <span class="comment">// 显示当前目录</span></span><br></pre></td></tr></table></figure>

<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mkdir -p 路径     <span class="comment">// 递归创建 不加就只能在文件存在的基础上创建</span></span><br><span class="line"></span><br><span class="line">rm 文件名             <span class="comment">// 删除文件</span></span><br><span class="line">rmdir 文件夹名字       <span class="comment">// 删除文件夹</span></span><br><span class="line">rm -rf 文件或文件夹名字 <span class="comment">// 删除所有  /*</span></span><br><span class="line"></span><br><span class="line">cp 原路径 新路径      <span class="comment">// 复制文件</span></span><br><span class="line">cp -a 原路径 新路径   <span class="comment">// 复制文件夹</span></span><br><span class="line"></span><br><span class="line">mv 原路径 新路径     <span class="comment">// 移动文件或文件夹 重命名文件</span></span><br><span class="line">mv -f 原路径 新路径  <span class="comment">// 强制</span></span><br></pre></td></tr></table></figure>

<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 更改属组</span><br><span class="line">chgrp [-R] 属性名 文件名  <span class="comment">// -R 递归</span></span><br><span class="line"># 更改属主</span><br><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">           属主名: 属组名 文件名</span><br><span class="line">           </span><br><span class="line"># 更改文件<span class="number">9</span>个属性</span><br><span class="line">chmod [-R] <span class="number">777</span> 文件名/文件名</span><br><span class="line"><span class="attr">r</span>:<span class="number">4</span> w:<span class="number">2</span> x:<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat  文件名   <span class="comment">// 显示文件内容</span></span><br><span class="line">nl   文件名   <span class="comment">// 显示行号</span></span><br><span class="line">less 文件名   <span class="comment">// 和more一样 但可以翻页 空格下一页 b 上一页</span></span><br><span class="line">:q 退出</span><br><span class="line">/搜索文本    <span class="comment">// 向下搜索</span></span><br><span class="line">?搜索文本    <span class="comment">// 向上搜索</span></span><br><span class="line">n           <span class="comment">// 自动跳转下一个</span></span><br><span class="line">N           <span class="comment">// 自动跳转上一个</span></span><br><span class="line"></span><br><span class="line">more 文件名   <span class="comment">// 一页一页的显示 </span></span><br><span class="line">head -n <span class="number">20</span> 文件名   <span class="comment">// 只看头几行</span></span><br><span class="line">tail 文件名   <span class="comment">// 只看结尾几行</span></span><br><span class="line">man ap 帮助命令</span><br></pre></td></tr></table></figure>

<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch</span><br><span class="line">echo xxx &gt;&gt; 文件名</span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 硬链接 </span><br><span class="line">允许一个文件有多个路径 防止误删</span><br><span class="line">A--B 就算A删除了 B还能访问</span><br><span class="line">ln A B</span><br><span class="line"># 软连接 </span><br><span class="line">快捷方式</span><br><span class="line">ln -s A B</span><br></pre></td></tr></table></figure>
<h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">esc :wq 退出</span><br><span class="line">i 输入</span><br><span class="line">x 删除</span><br><span class="line">:%d 选择所有的删除</span><br><span class="line">:%y 粘贴</span><br><span class="line">P 粘贴</span><br><span class="line"></span><br><span class="line">u 撤销</span><br><span class="line">ctrl+ r 取消撤销</span><br></pre></td></tr></table></figure>

<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 压缩</span><br><span class="line">tar cvf 压缩后名字.tar 路径 </span><br><span class="line">zip 压缩后名字.zip 原名</span><br><span class="line">## 解压</span><br><span class="line">tar xvf 名字.tar</span><br><span class="line">unzip 名字.zip</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/eternallycyf/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><ul>
<li>解释器模式<code>Interpreter Pattern</code>提供了评估语言的语法或表达式的方式，它属于行为型模式，这种模式实现了一个表达式接口，该接口解释一个特定的上下文，解释器模式通常被用在SQL解析、符号处理引擎等。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="built_in">this</span>.getSum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setSum = <span class="function"><span class="keyword">function</span>(<span class="params">_sum</span>) </span>&#123;</span><br><span class="line">        sum = _sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">eps</span>) </span>&#123;</span><br><span class="line">        list.push(eps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.getList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlusExpression</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.interpret = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum++;</span><br><span class="line">        context.setSum(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MinusExpression</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.interpret = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum--;</span><br><span class="line">        context.setSum(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line">    context.setSum(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//运行加法三次</span></span><br><span class="line">    context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">    context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">    context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">    <span class="comment">//运行减法两次</span></span><br><span class="line">    context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line">    context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line">    <span class="keyword">var</span> list = context.getList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> expression = list[i];</span><br><span class="line">        expression.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(context.getSum()); <span class="comment">// 21</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://c.biancheng.net/view/1402.html">http://c.biancheng.net/view/1402.html</a></li>
<li><a href="https://blog.csdn.net/itpinpai/article/details/51657199">https://blog.csdn.net/itpinpai/article/details/51657199</a></li>
<li><a href="https://www.runoob.com/design-pattern/interpreter-pattern.html">https://www.runoob.com/design-pattern/interpreter-pattern.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/eternallycyf/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><ul>
<li>迭代器模式<code>Iterator Pattern</code>提供了一种方法顺序访问一个聚合对象中的各个元素，而又无需暴露该对象的内部实现</li>
<li>这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据，迭代器模式属于行为型模式。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 广播电台示例</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadioStation</span> </span>&#123; <span class="comment">// 电台</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">frequency</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.frequency = frequency;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getFrequency</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.frequency;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StationList</span> </span>&#123; <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.stations = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.stations[<span class="built_in">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">hasNext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.index + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.stations[index] !== <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.stations[++<span class="built_in">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">addStation</span>(<span class="params">station</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stations.push(station);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">removeStation</span>(<span class="params">toRemove</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> toRemoveFrequency = toRemove.getFrequency();</span><br><span class="line">        <span class="built_in">this</span>.stations = <span class="built_in">this</span>.stations.filter(<span class="function"><span class="params">station</span> =&gt;</span> station.getFrequency() !== toRemoveFrequency);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stationList = <span class="keyword">new</span> StationList();</span><br><span class="line">    stationList.addStation(<span class="keyword">new</span> RadioStation(<span class="number">89</span>));</span><br><span class="line">    stationList.addStation(<span class="keyword">new</span> RadioStation(<span class="number">101</span>));</span><br><span class="line">    stationList.addStation(<span class="keyword">new</span> RadioStation(<span class="number">102</span>));</span><br><span class="line">    stationList.addStation(<span class="keyword">new</span> RadioStation(<span class="number">103.2</span>));</span><br><span class="line">    stationList.stations.forEach(<span class="function"><span class="params">station</span> =&gt;</span> <span class="built_in">console</span>.log(station.getFrequency())); <span class="comment">// 89 101 102 103.2</span></span><br><span class="line">    stationList.removeStation(<span class="keyword">new</span> RadioStation(<span class="number">89</span>));</span><br><span class="line">    <span class="keyword">while</span>(stationList.hasNext()) <span class="built_in">console</span>.log(stationList.next().getFrequency()); <span class="comment">// 101 102 103.2</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.cnblogs.com/xuwendong/p/9898030.html">https://www.cnblogs.com/xuwendong/p/9898030.html</a></li>
<li><a href="https://www.runoob.com/design-pattern/iterator-pattern.html">https://www.runoob.com/design-pattern/iterator-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-iterator">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-iterator</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/eternallycyf/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><ul>
<li>是在不破坏封装性的前提下，将对象当前的内部状态保存在对象之外，以便以后当需要时能将该对象恢复到原先保存的状态。备忘录模式又叫快照模式，是一种对象行为型模式</li>
<li>场景<ul>
<li>需要保存/恢复数据的相关状态场景。</li>
<li>提供一个可回滚的操作。</li>
</ul>
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以文本编辑器为例，该编辑器会不时地保存状态，并且可以根据需要进行恢复。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditorMemento</span> </span>&#123; <span class="comment">// memento对象将能够保持编辑器状态</span></span><br><span class="line">  <span class="keyword">public</span> _content: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> content: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._content = content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getContent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> _content: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">type</span>(<span class="params">words: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._content = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>._content&#125;</span> <span class="subst">$&#123;words&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getContent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">save</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EditorMemento(<span class="built_in">this</span>._content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">restore</span>(<span class="params">memento: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._content = memento.getContent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> editor = <span class="keyword">new</span> Editor()</span><br><span class="line"></span><br><span class="line">editor.type(<span class="string">&quot;This is the first sentence.&quot;</span>);</span><br><span class="line">editor.type(<span class="string">&quot;This is second.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saved = editor.save();</span><br><span class="line"></span><br><span class="line">editor.type(<span class="string">&quot;And this is third.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(editor.getContent()); <span class="comment">// This is the first sentence. This is second. And this is third.</span></span><br><span class="line"></span><br><span class="line">editor.restore(saved);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(editor.getContent()); <span class="comment">// This is the first sentence. This is second.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/Byronlee/Design-patterns">https://github.com/Byronlee/Design-patterns</a></li>
<li><a href="https://www.runoob.com/design-pattern/memento-pattern.html">https://www.runoob.com/design-pattern/memento-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-memento">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-memento</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/eternallycyf/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><ul>
<li>全权负责两个模块之间的通讯，MVC，MVVM就是典型的中介模式</li>
<li>中介模式，桥接模式，代理模式的区别：<ul>
<li>代理模式一对一，只能代理特定类和对像，是对其的扩展或约束</li>
<li>桥接模式一对多，是对类或对象成员或属性的扩展</li>
<li>中介模式多对多，全权承包所有两个概念间的关系</li>
</ul>
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;Benz&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;Sam&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">buy</span>(<span class="params">car:Car</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>购买了<span class="subst">$&#123;car.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourSShop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> benz = <span class="keyword">new</span> Car()</span><br><span class="line">        <span class="keyword">const</span> sam = <span class="keyword">new</span> Buyer()</span><br><span class="line">        sam.buy(benz)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/mediator-pattern.html">https://www.runoob.com/design-pattern/mediator-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-mediator">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-mediator</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/mediator.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/eternallycyf/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><ul>
<li>定义在不改变该对象的前提下访问结构中元素的新方法，元素的执行算法可以随着访问者改变而改变</li>
<li>如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以动物园模拟为例，我们有几种不同种类的动物，它们能够发出不同的声音。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">shout</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Ooh oo aa aa!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">accept</span>(<span class="params">operation: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    operation.visitMonkey(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">roar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Roaaar!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">accept</span>(<span class="params">operation: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    operation.visitLion(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> speak = &#123;</span><br><span class="line">  <span class="function"><span class="title">visitMonkey</span>(<span class="params">monkey: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    monkey.shout();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">visitLion</span>(<span class="params">lion: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    lion.roar();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jump = &#123;</span><br><span class="line">  <span class="function"><span class="title">visitMonkey</span>(<span class="params">monkey: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Jumped 20 feet high! on to the tree!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">visitLion</span>(<span class="params">lion: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Jumped 7 feet! Back on the ground!&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">visitDolphin</span>(<span class="params">dolphin: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Walked on water a little and disappeared&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> monkey = <span class="keyword">new</span> Monkey();</span><br><span class="line"><span class="keyword">const</span> lion = <span class="keyword">new</span> Lion();</span><br><span class="line"></span><br><span class="line">monkey.accept(speak);</span><br><span class="line">monkey.accept(jump);</span><br><span class="line">lion.accept(speak);</span><br><span class="line">lion.accept(jump);</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/visitor-pattern.html">https://www.runoob.com/design-pattern/visitor-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-visitor">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-visitor</a></li>
<li><a href="https://www.bookstack.cn/read/design-pattern-in-javascript/design-pattern-visitor-pattern-README.md">https://www.bookstack.cn/read/design-pattern-in-javascript/design-pattern-visitor-pattern-README.md</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/eternallycyf/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul>
<li>主要目的是让请求者和响应者解耦，并集中管理</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">interface</span> Command &#123;</span><br><span class="line">    execute() : <span class="built_in">void</span>;</span><br><span class="line">    undo() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommandOn</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> receiver : Receiver;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">receiver : Receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 执行命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOn();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 关闭命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommandOff</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> receiver : Receiver;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">receiver : Receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 执行命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOff();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 空命令（省去判空操作）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> actionOn() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是命令接收者，开启了某动作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> actionOff() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是命令接收者，关闭了某动作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> onCommands : <span class="built_in">Array</span>&lt;Command&gt;;</span><br><span class="line">    <span class="keyword">private</span> offCommands : <span class="built_in">Array</span>&lt;Command&gt;;</span><br><span class="line">    <span class="keyword">private</span> undoCommand : Command;</span><br><span class="line">    <span class="keyword">private</span> slotNum : <span class="built_in">number</span> = <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        <span class="built_in">this</span>.onCommands = [];</span><br><span class="line">        <span class="built_in">this</span>.offCommands = [];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.slotNum; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            <span class="built_in">this</span>.offCommands[i] =  <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> setCommand(index : <span class="built_in">number</span>, <span class="attr">onCommand</span> : Command, <span class="attr">offCommand</span> : Command) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onCommands[index] = onCommand;</span><br><span class="line">        <span class="built_in">this</span>.offCommands[index] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 开启</span></span><br><span class="line">    <span class="keyword">public</span> on (index : <span class="built_in">number</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onCommands[index].execute();<span class="comment">// 调用相应方法</span></span><br><span class="line">        <span class="comment">//记录这次操作，用于撤销</span></span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="built_in">this</span>.onCommands[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="keyword">public</span> off (index : <span class="built_in">number</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.offCommands[index].execute();</span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="built_in">this</span>.offCommands[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销</span></span><br><span class="line">    <span class="keyword">public</span> undo () : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建接收者</span></span><br><span class="line">    <span class="keyword">const</span> receiver : Receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建命令</span></span><br><span class="line">    <span class="keyword">const</span> commandOn : Command = <span class="keyword">new</span> ConcreteCommandOn(receiver);</span><br><span class="line">    <span class="keyword">const</span> commandOff : Command = <span class="keyword">new</span> ConcreteCommandOff(receiver);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建调用者</span></span><br><span class="line">    <span class="keyword">const</span> invoker : Invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">    invoker.setCommand(<span class="number">0</span>, commandOn, commandOff);</span><br><span class="line"></span><br><span class="line">    invoker.on(<span class="number">0</span>);</span><br><span class="line">    invoker.off(<span class="number">0</span>);</span><br><span class="line">    invoker.undo();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">main();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/command-pattern.html">https://www.runoob.com/design-pattern/command-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-command">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-command</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/eternallycyf/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><ul>
<li>使多个对象都要机会处理请求，从而避免了请求发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止</li>
<li>场景: 传统的<code>ifelse</code>或<code>switch</code> 处理动态数据的时候处于强耦合</li>
<li>责任链模式是一对一的。一个对象处理不了就会传递给下一个接受者</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下一个处理者</span></span><br><span class="line">    <span class="keyword">public</span> successor ?: Handler;</span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name : <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> handleRequest(request : MyRequest) : <span class="built_in">void</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> setNext(successor : Handler) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name : <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> handleRequest (request : MyRequest) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 首先判断当前级别是否能够处理，不能够处理则交给下一个级别处理</span></span><br><span class="line">        <span class="keyword">if</span> (request.level &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;被一级处理&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 交给下一级处理</span></span><br><span class="line">            <span class="built_in">this</span>.successor &amp;&amp; <span class="built_in">this</span>.successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name : <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> handleRequest (request : MyRequest) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 首先判断当前级别是否能够处理，不能够处理则交给下一个级别处理</span></span><br><span class="line">        <span class="keyword">if</span> (request.level &gt; <span class="number">1</span> &amp;&amp; request.level &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;被二级处理&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 交给下一级处理</span></span><br><span class="line">            <span class="built_in">this</span>.successor &amp;&amp; <span class="built_in">this</span>.successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name : <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> handleRequest (request : MyRequest) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 首先判断当前级别是否能够处理，不能够处理则交给下一个级别处理</span></span><br><span class="line">        <span class="keyword">if</span> (request.level &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;被三级处理&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 交给下一级处理</span></span><br><span class="line">            <span class="built_in">this</span>.successor &amp;&amp; <span class="built_in">this</span>.successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> _level : <span class="built_in">number</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">level : <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._level = level;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">get</span> <span class="title">level</span>() : <span class="title">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._level;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">set</span> <span class="title">level</span>(<span class="params">value : <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._level = <span class="built_in">this</span>.level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个请求</span></span><br><span class="line">    <span class="keyword">const</span> request : MyRequest = <span class="keyword">new</span> MyRequest(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建相关处理人</span></span><br><span class="line">    <span class="keyword">const</span> handler1 : Handler = <span class="keyword">new</span> ConcreteHandler1(<span class="string">&#x27;lili&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> handler2 : Handler = <span class="keyword">new</span> ConcreteHandler2(<span class="string">&#x27;linlin&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> handler3 : Handler = <span class="keyword">new</span> ConcreteHandler3(<span class="string">&#x27;shunshun&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置下级别审批，构成环形结构</span></span><br><span class="line">    handler1.setNext(handler2);</span><br><span class="line">    handler2.setNext(handler3);</span><br><span class="line">    handler3.setNext(handler1);</span><br><span class="line"> </span><br><span class="line">    handler1.handleRequest(request);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903855348514829">https://juejin.im/post/6844903855348514829</a></li>
<li><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html">https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-chain-of-responsibility">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-chain-of-responsibility</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/eternallycyf/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul>
<li>定义一组算法、将每个算法都封装，并且使它们之间可以互换</li>
<li>用于替换 多个<code>ifelse</code> 或 <code>switch</code></li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">position: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.position = position</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stratege</span> </span>&#123;</span><br><span class="line">    <span class="attr">locations</span>: Location [] = []</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">...locations</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.locations = locations</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;路线经过了&#x27;</span>)</span><br><span class="line">       <span class="built_in">this</span>.location.forEach(<span class="function"><span class="params">el</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(el.position+ <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span> </span>&#123;</span><br><span class="line">    <span class="attr">start</span>: Location</span><br><span class="line">    <span class="attr">end</span>: Location</span><br><span class="line">    <span class="attr">stratege</span>: Stratege</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = <span class="keyword">new</span> Location(<span class="string">&#x27;1 1&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.end = <span class="keyword">new</span> Location(<span class="string">&#x27;0 0&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> sea = <span class="keyword">new</span> Location(<span class="string">&#x27;1 0&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> land = <span class="keyword">new</span> Location(<span class="string">&#x27;1 0&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.stratege = <span class="keyword">new</span> Stratege(<span class="built_in">this</span>.start, sea, <span class="built_in">this</span>.end)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/w3cnote/state-vs-strategy.html">https://www.runoob.com/w3cnote/state-vs-strategy.html</a></li>
<li><a href="https://www.runoob.com/design-pattern/strategy-pattern.html">https://www.runoob.com/design-pattern/strategy-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/eternallycyf/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><ul>
<li>它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换</li>
<li>例如 抽奖活动有很多的状态和对应的行为</li>
<li>在 <code>getter setter</code> 直接进行转发到合适的行为<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="attr">tmp</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">store</span>(<span class="params">state: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.tmp !== state)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tmp = state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">store</span>(): <span class="title">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="attr">state</span>: State</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">state: State</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> state = <span class="keyword">new</span> State()</span><br><span class="line"><span class="keyword">const</span> people = <span class="keyword">new</span> People(state)</span><br><span class="line"> </span><br><span class="line">state.store = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(people.state.store)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="attr">tmp</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">store</span>(<span class="params">state: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.tmp !== state)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tmp = state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">store</span>(): <span class="title">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="attr">state</span>: State</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">state: State</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> state = <span class="keyword">new</span> State()</span><br><span class="line"><span class="keyword">const</span> people = <span class="keyword">new</span> People(state)</span><br><span class="line"> </span><br><span class="line">state.store = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(people.state.store)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/state-pattern.html">https://www.runoob.com/design-pattern/state-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-state">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-state</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/state.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/state.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/eternallycyf/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>定义对象间一种一对多的依赖关系，当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新</li>
<li>场景: <code>vue</code>的响应式</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="attr">states</span>: <span class="built_in">string</span>[] = []</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">state: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.states.push(state)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">   <span class="attr">state</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   observer：Observer</span><br><span class="line">   <span class="function"><span class="title">setState</span>(<span class="params">newState:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span>.state !== newState)&#123;</span><br><span class="line">           <span class="built_in">this</span>.state = newState</span><br><span class="line">           <span class="built_in">this</span>.notify(<span class="built_in">this</span>.state)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="function"><span class="title">notify</span>(<span class="params">state: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span>.observer !== <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="built_in">this</span>.observer.update(state)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">setObserver</span>(<span class="params">observer: Observer</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.observer = observer</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> Observer()</span><br><span class="line"><span class="keyword">const</span> people = <span class="keyword">new</span> People().setObserver(observer)</span><br><span class="line">people.setState(<span class="string">&#x27;shit&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(observer.state)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/observer-pattern.html">https://www.runoob.com/design-pattern/observer-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-observer">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-observer</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/eternallycyf/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul>
<li>定义一个操作中的算法框架，将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> template() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operation1();</span><br><span class="line">        <span class="built_in">this</span>.hookMethod() &amp;&amp; <span class="built_in">this</span>.operation2();</span><br><span class="line">        <span class="built_in">this</span>.operation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本方法</span></span><br><span class="line">    <span class="keyword">protected</span> operation1() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation2() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation3() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation3&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钩子方法</span></span><br><span class="line">    <span class="keyword">protected</span> hookMethod() : <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> operation2() :<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;对该方法operation2进行了修改再使用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation3() :<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;对该方法operation3进行了修改再使用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 覆盖钩子方法</span></span><br><span class="line">    <span class="keyword">protected</span> hookMethod() : <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> class1 : AbstractClass = <span class="keyword">new</span> ConcreteClassA();</span><br><span class="line">    <span class="keyword">const</span> class2 : AbstractClass = <span class="keyword">new</span> ConcreteClassB();</span><br><span class="line"></span><br><span class="line">    class1.template();</span><br><span class="line">    class2.template();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903615476269064">https://juejin.im/post/6844903615476269064</a></li>
<li><a href="https://www.runoob.com/design-pattern/template-pattern.html">https://www.runoob.com/design-pattern/template-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-template-method">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-template-method</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/eternallycyf/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><ul>
<li>避免重新创建对象，其实只要有缓存对象的意思，并且共用一个对象实例，就是享元模式</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  name!: <span class="built_in">string</span></span><br><span class="line">  color!: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">changeColor</span>(<span class="params">color: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">changeName</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> car: Car</span><br><span class="line">  <span class="keyword">static</span> getCar(): Car &#123;</span><br><span class="line">    <span class="keyword">if</span> (CarFactory.car === <span class="literal">null</span>) &#123;</span><br><span class="line">      CarFactory.car = <span class="keyword">new</span> Car()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CarFactory.car</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">CarFactory.getCar().changeColor(<span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html">https://www.runoob.com/design-pattern/flyweight-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-flyweight">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-flyweight</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/flyweight.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/flyweight.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/eternallycyf/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul>
<li>将对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性。</li>
<li>常见场景: 文件目录</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>组合对象和叶子对象并不是父子关系，而是组合关系</li>
<li>实现时，我们会将组合对象类 <code>Composite</code> 或者叶子对象类 <code>Leaf</code> 继承于同一个抽象类 <code>Component</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;组合对象的实现&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;叶子对象的实现&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  nodes: TreeBase[] = [];</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">n: TreeBase</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">n: TreeBase</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeComposite</span> <span class="keyword">extends</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">n: TreeBase</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes.push(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">n: TreeBase</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes.splice(<span class="built_in">this</span>.nodes.findIndex(<span class="function">(<span class="params">e</span>) =&gt;</span> e.name === n.name), <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, I am a composite node`</span>);</span><br><span class="line">    <span class="built_in">this</span>.nodes.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      e.show();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, I am a leaf`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> TreeComposite(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> node1 = <span class="keyword">new</span> TreeComposite(<span class="string">&#x27;node1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf1 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf2 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf3 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">root.add(node1);</span><br><span class="line">root.add(leaf3);</span><br><span class="line">node1.add(leaf1);</span><br><span class="line">node1.add(leaf2);</span><br><span class="line">root.show();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * root, I am a composite node</span></span><br><span class="line"><span class="comment"> * tree.component.ts:51 node1, I am a composite node</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf1, I am a leaf</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf2, I am a leaf</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf3, I am a leaf</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/a6e236040505">https://www.jianshu.com/p/a6e236040505</a></li>
<li><a href="https://segmentfault.com/a/1190000019773556">https://segmentfault.com/a/1190000019773556</a></li>
<li><a href="https://github.com/tcorral/Design-Patterns-in-Javascript">https://github.com/tcorral/Design-Patterns-in-Javascript</a></li>
<li><a href="https://www.runoob.com/design-pattern/composite-pattern.html">https://www.runoob.com/design-pattern/composite-pattern.html</a></li>
<li><a href="https://www.cnblogs.com/TomXu/archive/2012/04/12/2435530.html">https://www.cnblogs.com/TomXu/archive/2012/04/12/2435530.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-composite">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-composite</a></li>
<li><a href="https://xhui.top/2018/12/20/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">https://xhui.top/2018/12/20/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/eternallycyf/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ul>
<li>桥接模式也叫桥梁模式，将实现与抽象放在两个不同的层次中，使得两者可以独立地变化。(最主要的将实现和抽象两个层次划分开来)</li>
<li>常见场景：JDBC驱动程序、银行转账系统（转账分类和转账用户类型）、消息管理（消息类型、消息分类）</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现接口角色</span></span><br><span class="line"><span class="keyword">interface</span> Implementor &#123;</span><br><span class="line">    doSomething() : <span class="built_in">void</span>;</span><br><span class="line">    doAnything() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementor1</span> <span class="title">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doSomething() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> doAnything() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementor2</span> <span class="title">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doSomething() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> doAnything() : <span class="built_in">void</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> imp : Implementor;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">imp : Implementor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imp = imp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自身的行为和属性</span></span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imp.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体抽象化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">imp : Implementor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(imp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 自己写一些处理业务</span></span><br><span class="line">        <span class="built_in">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 定义一个实现化角色</span></span><br><span class="line"><span class="keyword">const</span> imp : Implementor = <span class="keyword">new</span> ConcreteImplementor1();</span><br><span class="line"><span class="comment">// 定义一个抽象化角色</span></span><br><span class="line"><span class="keyword">const</span> abs : Abstraction = <span class="keyword">new</span> RefinedAbstraction(imp);</span><br><span class="line"><span class="comment">// 执行上下文</span></span><br><span class="line">abs.request();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012547750">https://segmentfault.com/a/1190000012547750</a></li>
<li><a href="https://www.runoob.com/design-pattern/bridge-pattern.html">https://www.runoob.com/design-pattern/bridge-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/bridge.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/bridge.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/eternallycyf/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><ul>
<li>在现有类或对象的基础上，添加了一些功能，使类和对象具有新的表现<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;需要通过柯里化形式拿到参数,默认传入的是target&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">traget: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(name, traget.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> age: <span class="built_in">number</span> = <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://imweb.io/topic/5b1403bbd4c96b9b1b4c4e9e">https://imweb.io/topic/5b1403bbd4c96b9b1b4c4e9e</a></li>
<li><a href="https://www.runoob.com/design-pattern/decorator-pattern.html">https://www.runoob.com/design-pattern/decorator-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/decorator.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/decorator.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/eternallycyf/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>代理模式是为一个对象提供一个代用品，或占位符，以便控制对它的访问。</li>
<li>对接口进行一定程度的隐藏，用于封装复杂类</li>
<li>缓存代理比较常见。如果传递进来的参数跟以前一致，则可以直接返回前面存储的运算结果。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">2</span></span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">number</span> = <span class="number">3</span></span><br><span class="line">    <span class="attr">d</span>: <span class="built_in">number</span> =<span class="number">4</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this is test&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> car: Car</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.car === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.car = <span class="keyword">new</span> Car</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="built_in">this</span>.car.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car.test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903555036364814">https://juejin.im/post/6844903555036364814</a></li>
<li><a href="https://www.runoob.com/design-pattern/proxy-pattern.html">https://www.runoob.com/design-pattern/proxy-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/eternallycyf/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul>
<li>适配器模式（变压器模式、包装模式）是将一个类的接口变换为客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</li>
<li>适配器模式主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。这三种明明方式是根据被适配者<code>（src）</code>是以怎样的形式给到<code>Adapter</code>来命名的。<ul>
<li>类适配器：以类给到，在<code>Adapter</code>里，就是将<code>src</code>当做类，继承。（通过继承来实现适配器功能）</li>
<li>对象适配器：以对象给到，在<code>Adapter</code>里，将<code>src</code>作为一个对象，持有。（通过组合来实现适配器功能）</li>
<li>接口适配器：以接口给到，在<code>Adapter</code>里，将<code>src</code>作为一个接口，实现。<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2></li>
</ul>
</li>
</ul>
<h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="keyword">interface</span> Target &#123;</span><br><span class="line">    request() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 这是源角色，有自己的的业务逻辑</span></span><br><span class="line">    <span class="keyword">public</span> specificRequest() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="title">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target : Target = <span class="keyword">new</span> Adapter();</span><br><span class="line">target.request();</span><br></pre></td></tr></table></figure>

<h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="keyword">interface</span> Target &#123;</span><br><span class="line">    request() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 这是源角色，有自己的的业务逻辑</span></span><br><span class="line">    <span class="keyword">public</span> specificRequest() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="title">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> adaptee : Adaptee;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">adaptee : Adaptee</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> target : Target = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee());</span><br><span class="line">target.request();</span><br></pre></td></tr></table></figure>

<h3 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Adaptee &#123;</span><br><span class="line">    operation1() : <span class="built_in">void</span>;</span><br><span class="line">    operation2() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="title">implements</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> operation1() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> operation2() : <span class="built_in">void</span> &#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UseClass</span> <span class="keyword">extends</span> <span class="title">AbsAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> operation1() : <span class="built_in">void</span> &#123;&#125;<span class="comment">// 重写该类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012436538">https://segmentfault.com/a/1190000012436538</a></li>
<li><a href="https://www.runoob.com/design-pattern/adapter-pattern.html">https://www.runoob.com/design-pattern/adapter-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/adapter.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/adapter.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/eternallycyf/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul>
<li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节</li>
<li>使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Family</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> main():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> father = <span class="keyword">new</span> Father()</span><br><span class="line">    <span class="keyword">const</span> child = <span class="keyword">new</span> Father()</span><br><span class="line">    father.work();</span><br><span class="line">    child.study()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">study</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000014132789">https://segmentfault.com/a/1190000014132789</a></li>
<li><a href="https://www.runoob.com/design-pattern/facade-pattern.html">https://www.runoob.com/design-pattern/facade-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/facade.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/facade.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/eternallycyf/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li>单例模式就是保证一个类仅有一个实例，并提供一个访问它的全局访问点（静态方法）。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构造器私有化，外部不能new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 2. 本类内部创建对象实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance : Singleton1 = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="comment">// 3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() : Singleton1 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><ul>
<li><code>js</code>是基于单线程运行代码，所以不存在线程不安全问题，推荐该种方法。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance: Singleton2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() : Singleton2 &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.instance === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.csdn.net/qq_34106891/article/details/105654640?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_34106891/article/details/105654640?spm=1001.2014.3001.5502</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/eternallycyf/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul>
<li>原型模式<code>Prototype</code> <code>Pattern</code>用原型实例指向创建对象的类，使用于创建新的对象的类的共享原型的属性与方法</li>
<li>简言之就是通过克隆来创建一个一模一样的对象。</li>
<li>应用场景<ul>
<li>创建成本比较大的场景</li>
<li>需要动态的获取当前的对象运行时状态的场景</li>
</ul>
</li>
</ul>
<h2 id="js实现"><a href="#js实现" class="headerlink" title="js实现"></a>js实现</h2><ul>
<li>对于<code>ES5</code>，提供<code>Object.create()</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code></li>
<li>对于<code>ES6</code>，提供<code>Object.setPrototypeOf()</code>方法设置一个指定的对象的原型(即,内部<code>[[Prototype]]</code>属性)到另一个对象或 <code>null</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lili&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.birthYear = <span class="number">2015</span>;</span><br><span class="line">    <span class="built_in">this</span>.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.presentYear = <span class="number">2018</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getDiscription = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`狗狗叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,性别<span class="subst">$&#123;<span class="built_in">this</span>.sex&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.presentYear&#125;</span>年<span class="subst">$&#123;<span class="built_in">this</span>.presentYear - <span class="built_in">this</span>.birthYear&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());<span class="comment">// 狗狗叫lili,性别男,2018年3岁了</span></span><br><span class="line">dog.presentYear = <span class="number">2020</span>;<span class="comment">// 修改了当前年份</span></span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="built_in">Object</span>.create(dog);<span class="comment">// 通过ES5语法进行创建</span></span><br><span class="line"><span class="comment">//const dog1 = &#123;&#125;</span></span><br><span class="line"><span class="comment">//Object.setPrototypeOf(dog1, dog);//通过ES6语法进行创建</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());<span class="comment">// 狗狗叫lili,性别男,2020年5岁了</span></span><br></pre></td></tr></table></figure>

<h2 id="ts实现"><a href="#ts实现" class="headerlink" title="ts实现"></a>ts实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Prototype &#123;</span><br><span class="line">    clone():Prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> birthYear: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">public</span> sex: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> presentYear: <span class="built_in">number</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;lili&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.birthYear = <span class="number">2015</span>;</span><br><span class="line">        <span class="built_in">this</span>.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.presentYear = <span class="number">2018</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getDiscription(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`狗狗叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,性别<span class="subst">$&#123;<span class="built_in">this</span>.sex&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.presentYear&#125;</span>年<span class="subst">$&#123;<span class="built_in">this</span>.presentYear - <span class="built_in">this</span>.birthYear&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现复制</span></span><br><span class="line">    <span class="keyword">public</span> clone(): Prototype &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());</span><br><span class="line">dog.presentYear = <span class="number">2020</span>;</span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="built_in">Object</span>.create(dog);</span><br><span class="line"><span class="built_in">console</span>.log(dog1.getDiscription());</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012427846">https://segmentfault.com/a/1190000012427846</a></li>
<li><a href="https://www.runoob.com/design-pattern/prototype-pattern.html">https://www.runoob.com/design-pattern/prototype-pattern.html</a></li>
<li><a href="https://wiki.jikexueyuan.com/project/java-design-pattern/prototype-pattern.html">https://wiki.jikexueyuan.com/project/java-design-pattern/prototype-pattern.html</a></li>
<li><a href="https://www.freesion.com/article/3892642227/">https://www.freesion.com/article/3892642227/</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/eternallycyf/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><ul>
<li>建造者模式<code>Builder Pattern</code>又可以称为生成器模式</li>
<li>是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，建造者模式属于对象创建型模式。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>例如我们想要创建一个消息组件<code>Message</code>, 包括标题、正文、 提示 <code>logo</code> 以及颜色四部分</li>
<li>而消息组件包括弹出消息组件 <code>AlertMessage</code> 和提示消息组件 <code>TooltipMessage</code> 两种</li>
<li>在抽象工厂模式的基础上。指定了指挥者<code>(Director)</code>来构建对象 <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> title: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> text: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> logo: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> color: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">title: <span class="built_in">string</span>, text: <span class="built_in">string</span>, logo: <span class="built_in">string</span>, color: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.text = text;</span><br><span class="line">    <span class="built_in">this</span>.logo = logo;</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> setTitle(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">abstract</span> setText(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">abstract</span> setLogo(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">abstract</span> setColor(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">abstract</span> getMessage(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlertMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">setTitle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = <span class="string">&#x27;alert title&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setText</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.text = <span class="string">&#x27;alert info&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setLogo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logo = <span class="string">&#x27;image_1.png&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Alert Message: <span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.text&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.logo&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.color&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooltipMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">setTitle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = <span class="string">&#x27;tooltip title&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setText</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.text = <span class="string">&#x27;tooltip info&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setLogo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logo = <span class="string">&#x27;image_2.png&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getMessage(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Tooltip Message: <span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.text&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.logo&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.color&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">buildMessage</span>(<span class="params">message: Message</span>)</span> &#123;</span><br><span class="line">    message.setTitle();</span><br><span class="line">    message.setText();</span><br><span class="line">    message.setLogo();</span><br><span class="line">    message.setColor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alertMessage = <span class="keyword">new</span> AlertMessage(<span class="string">&#x27;alert title&#x27;</span>, <span class="string">&#x27;alert info&#x27;</span>, <span class="string">&#x27;image_1.png&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tooltipMessage = <span class="keyword">new</span> TooltipMessage(<span class="string">&#x27;tool title&#x27;</span>, <span class="string">&#x27;tool info&#x27;</span>, <span class="string">&#x27;image_2.png&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> director = <span class="keyword">new</span> Director();</span><br><span class="line">director.buildMessage(alertMessage);</span><br><span class="line">director.buildMessage(tooltipMessage);</span><br><span class="line"></span><br><span class="line">alertMessage.getMessage();</span><br><span class="line">tooltipMessage.getMessage();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/builder-pattern.html">https://www.runoob.com/design-pattern/builder-pattern.html</a></li>
<li><a href="https://wiki.jikexueyuan.com/project/java-design-pattern/builder-pattern.html">https://wiki.jikexueyuan.com/project/java-design-pattern/builder-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/eternallycyf/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul>
<li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口 而无须指定它们具体的类</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> username: <span class="built_in">string</span> = <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">public</span> password: <span class="built_in">string</span> = <span class="string">&#x27;123456&#x27;</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> getDetails(): <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">setDetails</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(username, password);</span><br><span class="line">    <span class="comment">// 然后根据不同数据库执行不同的初始用户逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(username, password)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sqlUserName = <span class="built_in">this</span>.username + <span class="string">&#x27;Sql&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> sqlPassWord = <span class="built_in">this</span>.password + <span class="string">&#x27;Sql&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.setDetails(sqlUserName, sqlPassWord)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(username, password)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mysqlUserName = <span class="built_in">this</span>.username + <span class="string">&#x27;Mysql&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> mysqlPassWord = <span class="built_in">this</span>.password + <span class="string">&#x27;Mysql&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.setDetails(mysqlUserName, mysqlPassWord)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectSql = <span class="keyword">new</span> Sql(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">ConnectSql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMysql = <span class="keyword">new</span> Mysql(<span class="string">&#x27;cccc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line">ConnectMysql.getDetails()</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903653774458888">https://juejin.im/post/6844903653774458888</a></li>
<li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">https://www.runoob.com/design-pattern/factory-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/eternallycyf/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>
<li>由于<code>js</code>没有<code>abstract</code>抽象类的概念</li>
<li>因此后续关于抽象类的直接使用<code>ts</code> 模拟,便于理解</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts中class前面加abstract: 禁止被实例化。是用来被继承的</span></span><br><span class="line"><span class="comment">// 父类指定结构 子类来实现 避免忘记重写方法导致使用默认的方法</span></span><br><span class="line"><span class="comment">// 没有重写直接报错</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象方法只能以abstract开头 没有方法体 </span></span><br><span class="line"><span class="comment">// 只能定义在抽象类里面 子类必须重写</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> sayHi():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> username: <span class="built_in">string</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> password: <span class="built_in">string</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">  <span class="keyword">abstract</span> getDetails(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Sql.username + <span class="string">&#x27;Sql&#x27;</span>, Sql.password + <span class="string">&#x27;Sql&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Mysql.username + <span class="string">&#x27;Mysql&#x27;</span>, Mysql.password + <span class="string">&#x27;Mysql&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(MongoDB.username + <span class="string">&#x27;MongoDB&#x27;</span>, MongoDB.password + <span class="string">&#x27;MongoDB&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectSql = <span class="keyword">new</span> Sql()</span><br><span class="line">ConnectSql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMysql = <span class="keyword">new</span> Mysql()</span><br><span class="line">ConnectMysql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMongoDB = <span class="keyword">new</span> MongoDB()</span><br><span class="line">ConnectMongoDB.getDetails()</span><br></pre></td></tr></table></figure>


<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903653774458888">https://juejin.im/post/6844903653774458888</a></li>
<li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">https://www.runoob.com/design-pattern/factory-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/eternallycyf/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>定义一个创建对象的类，由这个类来封装实例化对象的行为</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">Database</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Sql&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">extends</span> <span class="title">Database</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Mysql&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span> <span class="keyword">extends</span> <span class="title">Database</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;MongoDB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDatabase</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="title">getType</span>(<span class="params">type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Sql&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Sql();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mysql&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Mysql();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;MongoDB&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MongoDB();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;参数错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ConnectFn = <span class="keyword">new</span> ConnectDatabase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ConnectSql = ConnectFn.getType(<span class="string">&quot;Sql&quot;</span>);</span><br><span class="line">ConnectSql.getDetails(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ConnectMysql = ConnectFn.getType(<span class="string">&quot;Mysql&quot;</span>);</span><br><span class="line">ConnectMysql.getDetails(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ConnectMongoDB = ConnectFn.getType(<span class="string">&quot;MongoDB&quot;</span>);</span><br><span class="line">ConnectMongoDB.getDetails();</span><br></pre></td></tr></table></figure>


<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903653774458888">https://juejin.im/post/6844903653774458888</a></li>
<li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">https://www.runoob.com/design-pattern/factory-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用自定义Hook</title>
    <url>/eternallycyf/React%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89Hook/</url>
    <content><![CDATA[<h1 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h1><h2 id="useDebounce"><a href="#useDebounce" class="headerlink" title="useDebounce"></a>useDebounce</h2><ul>
<li><p>防抖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebounce</span>(<span class="params">value: any, delay = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [debouncedValue, setDebouncedValue] = useState(value)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setDebouncedValue(value)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [value, delay])</span><br><span class="line">  <span class="keyword">return</span> debouncedValue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDebounce;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useDebounce <span class="keyword">from</span> <span class="string">&#x27;./useDebounce&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useDebounceValue = useDebounce(inputValue, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// 此时只要 把 之前的 表单value 全部换成 useDebounceValue就行了</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useThrottle"><a href="#useThrottle" class="headerlink" title="useThrottle"></a>useThrottle</h2><ul>
<li>节流<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect, useRef,useCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useThrottle</span>(<span class="params">fn, delay, dep = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; current &#125; = useRef(&#123; fn, <span class="attr">timer</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">  useEffect(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    current.fn = fn;</span><br><span class="line">  &#125;, [fn]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useCallback(<span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!current.timer) &#123;</span><br><span class="line">      current.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> current.timer;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">      current.fn.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, dep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useThrottle</span><br></pre></td></tr></table></figure></li>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useThrottle <span class="keyword">from</span> <span class="string">&#x27;./useThrottle&#x27;</span></span><br><span class="line"><span class="keyword">const</span> throttledFunc = useThrottle(fn, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><ul>
<li><p>虚拟列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要判断entry是true还是false就可以得知 他是不是在可视区了</span></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="comment">// !! 将它转成布尔值 </span></span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">100vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;).map(<span class="function">(<span class="params">_, index</span>) =&gt;</span> (</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"> ))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useScrollPostion"><a href="#useScrollPostion" class="headerlink" title="useScrollPostion"></a>useScrollPostion</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取滚动条高度</span></span><br><span class="line"><span class="keyword">import</span> &#123;useState,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useScrollPostion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [scrollPosition, setScrollPostion] = useState(<span class="number">0</span>)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setScrollPostion(<span class="built_in">window</span>.scrollY)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> scrollPosition</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScrollPostion</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useScrollPostion form <span class="string">&#x27;./useScrollPostion&#x27;</span></span><br><span class="line"><span class="keyword">const</span> position = useScrollPostion() </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useWinSize"><a href="#useWinSize" class="headerlink" title="useWinSize"></a>useWinSize</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕尺寸</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useWinSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = useState(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> onResize = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, onResize)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;reisze&#x27;</span>, onResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useWinSize</span><br></pre></td></tr></table></figure>
<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useWinSize form <span class="string">&#x27;./useWinSize&#x27;</span></span><br><span class="line"><span class="keyword">const</span> size = useWinSize()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useIsVisible"><a href="#useIsVisible" class="headerlink" title="useIsVisible"></a>useIsVisible</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否在可视区</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> OPTIONS = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useIsVisible = <span class="function">(<span class="params">elementRef</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isVisible, setIsVisible] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementRef.current) &#123;</span><br><span class="line">      <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">            setIsVisible(<span class="literal">true</span>);</span><br><span class="line">            observer.unobserve(elementRef.current);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, OPTIONS);</span><br><span class="line">      observer.observe(elementRef.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [elementRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isVisible;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useIsVisible;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elemRef = useRef();</span><br><span class="line"><span class="keyword">const</span> isVisible = useVisible(elemRef);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">145vh</span>&quot;, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125;&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;elemRef&#125;</span>&gt;</span>hello &#123;isVisible &amp;&amp; console.log(&quot;visible&quot;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ignored, forceUpdate] = useReducer(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  forceUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">组件名.forceUpdate(callback)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/eternallycyf/TypeScript/</url>
    <content><![CDATA[<h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><h3 id="安装TypeScript基本环境"><a href="#安装TypeScript基本环境" class="headerlink" title="安装TypeScript基本环境"></a>安装TypeScript基本环境</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line"># 生成ts配置文件</span><br><span class="line">tsc --init</span><br><span class="line"># 手动解析ts文件</span><br><span class="line">tsc xxx.ts </span><br><span class="line"># 监视ts 实时转换js文件</span><br><span class="line">- 在vscode里面终端 输入</span><br><span class="line">  - ctrl+shift+b</span><br><span class="line">  - 监视tsc</span><br><span class="line">- 或者在菜单-终端-运行任务-监视tsconfig.json</span><br></pre></td></tr></table></figure>

<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">如果定义的时候没有赋值，不管之后有没有赋值，</span><br><span class="line">都会被推断成 <span class="built_in">any</span> 类型而完全不被类型检查：</span><br><span class="line">如果定义的时候赋值了  就推断成这个格式</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 开启js提示</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,        </span><br><span class="line">    <span class="comment">// 指定压缩代码生成的目录 随便一个不存在的路径就行</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./random&quot;</span>,   </span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 自动生成 .d.ts 文件 类型校验</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局类型标注</span></span><br><span class="line"><span class="comment">// 声明不存在的sdk 避免报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.css&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.less&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.png&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> jQuery &#123;&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;jquery&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-TS基础"><a href="#2-TS基础" class="headerlink" title="2. TS基础"></a>2. TS基础</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>number</td>
<td></td>
</tr>
<tr>
<td>string</td>
<td>推荐单引号</td>
</tr>
<tr>
<td>Array</td>
<td>Array<number>  || number [ ]  || string [ ] || Array<T></td>
</tr>
<tr>
<td>tuple</td>
<td>元组 固定长度的数组</td>
</tr>
<tr>
<td>Object</td>
<td>任意的JS对象 但是不能调用其他方法 即便它真的有</td>
</tr>
<tr>
<td>any</td>
<td>任意类型</td>
</tr>
<tr>
<td>unknown</td>
<td>类型安全的any    区别是any会把别的也推断成any 他只推断自己</td>
</tr>
<tr>
<td>null</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>undefined</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>void</td>
<td>表示没有任何类型   函数没有返回值他的类型就是void</td>
</tr>
<tr>
<td>never</td>
<td>没有值 不能是任何值: 用于函数没有返回值 例如只用于报错的函数</td>
</tr>
</tbody></table>
<h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?:</td>
<td>可选属性</td>
</tr>
<tr>
<td>!:</td>
<td>非空断言 =&gt; ?.</td>
</tr>
<tr>
<td>readonly</td>
<td>只读</td>
</tr>
<tr>
<td>[xxx:string ]:any</td>
<td>不规定后续内容类型</td>
</tr>
<tr>
<td>enum</td>
<td>枚举 只能赋值为  undefined 和 null</td>
</tr>
<tr>
<td>元组</td>
<td>let x: [number, string] = [10, “jack”]</td>
</tr>
<tr>
<td>|</td>
<td>联合类型                  只能同时为一种</td>
</tr>
<tr>
<td>&amp;</td>
<td>交叉类型                  合并</td>
</tr>
<tr>
<td>Partial</td>
<td>可选类型合并          Partial &lt;xxx &amp; xxx&gt;</td>
</tr>
</tbody></table>
<h2 id="3-基本API"><a href="#3-基本API" class="headerlink" title="3. 基本API"></a>3. 基本API</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 变量: 数据类型</span><br><span class="line"><span class="keyword">var</span> hello: <span class="built_in">string</span> =  <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"># 对象: &#123;对象属性: 数据类型 , ...&#125; = &#123; xxx&#125;</span><br><span class="line"><span class="keyword">var</span> user: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125;=&#123; <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj= &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="comment">// 任意类型 =&gt; 泛型</span></span><br><span class="line"><span class="keyword">var</span> c:&#123;<span class="attr">name</span>:<span class="built_in">string</span>,[xxx: <span class="built_in">string</span>]:<span class="built_in">any</span>&#125;;</span><br><span class="line"># 数组</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定某一个数组下的 每一个对象的属性</span></span><br><span class="line">dataSource?: [&#123; [key: <span class="built_in">number</span>]: Interface &#125;]</span><br><span class="line"><span class="comment">// 或者这样</span></span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br></pre></td></tr></table></figure>

<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动指定某一个值的类型</span></span><br><span class="line"><span class="number">1.</span>值 <span class="keyword">as</span> 类型 </span><br><span class="line">(someValue <span class="keyword">as</span> <span class="built_in">string</span>)  React-jsx必须用这个</span><br><span class="line"><span class="number">2.</span>&lt;类型&gt;值  </span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;someValue)      </span><br></pre></td></tr></table></figure>

<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 接口也可以用</span></span><br><span class="line"><span class="comment">// type str = 接口1 | 接口2</span></span><br><span class="line"><span class="keyword">var</span> str: str = <span class="string">&quot;10&quot;</span></span><br><span class="line">str = <span class="number">10</span></span><br><span class="line"># 限制固定常量</span><br><span class="line"><span class="keyword">type</span> sex = <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;女&#x27;</span></span><br><span class="line"># 函数别名</span><br><span class="line"><span class="keyword">type</span> newType = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">s: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: newType = sum</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">// 可选</span></span><br><span class="line">name?:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span> = <span class="number">20</span></span><br><span class="line"># 函数的重载</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">s:<span class="built_in">any</span></span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> s===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我叫:&#x27;</span>+s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的年龄是&#x27;</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="string">&#x27;张三&#x27;</span>));   <span class="comment">//正确</span></span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="number">20</span>));   <span class="comment">//正确</span></span><br><span class="line"><span class="comment">// console.log(getInfo(true));    //错误写法 ts编译报错</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 用于取值 并限定在一定范围  =&gt;  会被编译成一个双向映射的对象</span></span><br><span class="line"> <span class="comment">// 默认从0开始递增 直到枚举进行反向映射</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;</span><br><span class="line">  Sun = <span class="number">3</span>,  <span class="comment">// 一个设置值 其他也要设置</span></span><br><span class="line">  Mon,</span><br><span class="line">  Tue,</span><br><span class="line">  Wed,</span><br><span class="line">  Thu,</span><br><span class="line">  Fri,</span><br><span class="line">  Sat</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xxx = Days.Sun</span><br><span class="line"># 常量枚举</span><br><span class="line"><span class="keyword">const</span> dnum xxx &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-inerface"><a href="#4-inerface" class="headerlink" title="4. inerface"></a>4. inerface</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span> | <span class="built_in">number</span>,  <span class="comment">// 只读    </span></span><br><span class="line">   age?: <span class="built_in">number</span>,                   <span class="comment">// 可选</span></span><br><span class="line">   [propsName: <span class="built_in">string</span>]: <span class="built_in">any</span>        <span class="comment">// 任意属性个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user: Person = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;zhuangsan&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"># 接口嵌套</span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br><span class="line"># 函数接口</span><br><span class="line"><span class="keyword">interface</span> aa &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fm:aa = <span class="function"><span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"># 接口继承</span><br><span class="line"><span class="keyword">interface</span> 接口内的方法 entends 接口名&#123; &#125;</span><br><span class="line"># 接口实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> 接口名</span>&#123; &#125;</span><br><span class="line"># 泛型结函数</span><br><span class="line"><span class="keyword">interface</span> Icreate&lt;T&gt;&#123;</span><br><span class="line">  (a:T,<span class="attr">b</span>:T):T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a: Icreate&lt;<span class="built_in">number</span>&gt; = 函数</span><br></pre></td></tr></table></figure>

<h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型"></a>5. 泛型</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">指不预先指定具体类型 而使用时候再指定 的一种特性</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125; </span><br><span class="line">echo(<span class="string">&#x27;4&#x27;</span>)  echo&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">data: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123; &#125;</span><br><span class="line">T[]</span><br><span class="line"># 约束泛型</span><br><span class="line"><span class="keyword">interface</span> Inter &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Inter</span>&gt;(<span class="params">a: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.length</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>)  <span class="comment">// 报错 数字没有.length 必须要有.length</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 与接口结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &lt;T,U&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>:T;</span><br><span class="line">  age:U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test:Icreate&lt;<span class="built_in">number</span>,<span class="built_in">string</span>&gt; = &#123;<span class="attr">name</span>:<span class="number">5</span>，age=<span class="string">&quot;ss&quot;</span>&#125;</span><br><span class="line"># 与函数的结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &#123;</span><br><span class="line">  &lt;T&gt;(name: <span class="built_in">string</span>, <span class="attr">value</span>: T): <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aaaaaa: Icreate;</span><br><span class="line">aaaaaa = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">name: <span class="built_in">string</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa: <span class="built_in">number</span>[] = aaaaaa(<span class="string">&quot;zzhang&quot;</span>, <span class="number">5</span>)</span><br><span class="line"># 与类的结合</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: T;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:T</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xxx = <span class="keyword">new</span> Person&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;张三&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<h2 id="6-class"><a href="#6-class" class="headerlink" title="6. class"></a>6. class</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#私有属性</span><br></pre></td></tr></table></figure>



<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 遍历属性</span><br><span class="line"><span class="built_in">Object</span>.kes(实例名).forEach(<span class="function"><span class="params">key</span>=&gt;</span>实例名[key])</span><br><span class="line"># 遍历方法</span><br><span class="line">className.prototype 不能通过 forEach遍历 <span class="comment">// 构造函数 可以</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames([className].prototype)</span><br><span class="line">  .forEach(<span class="function"><span class="params">item</span>=&gt;</span>[className].prototype[item])</span><br></pre></td></tr></table></figure>

<h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 匿名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="class"><span class="keyword">class</span> <span class="title">ccc</span> </span>&#123;</span><br><span class="line">  ccc.name</span><br><span class="line">  <span class="comment">// 只有内部可以访问ccc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4个状态"><a href="#4个状态" class="headerlink" title="4个状态"></a>4个状态</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">实例和父类能都访问</span><br></pre></td></tr></table></figure>

<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能父类点出来</span></span><br><span class="line"><span class="comment">// 类似于直接在 Person.prototype.aaaa = &#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="comment">//  constructor() &#123; this.bbb = 12; &#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> aaaa: <span class="built_in">string</span> = <span class="string">&#x27; 孙悟空&#x27;</span>;</span><br><span class="line">  bbb: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(Person.aaaa)</span><br></pre></td></tr></table></figure>

<h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private    私有的         外界无法访问 不能被继承</span></span><br><span class="line">为了避免直接修改 <span class="class"><span class="keyword">class</span>中的属性 产生数据混乱</span></span><br><span class="line"><span class="class">用<span class="title">private</span> 定义属性 拒绝外界访问</span></span><br><span class="line"><span class="class">同时在<span class="title">class</span>内部 定义 <span class="title">getter</span> <span class="title">setter</span> 向外界开放 获取和修改的方法</span></span><br><span class="line"><span class="class">内部可以设计 方法的权限 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protected  受保护的       外界无法访问 可以被继承</span></span><br></pre></td></tr></table></figure>

<h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="get-set"><a href="#get-set" class="headerlink" title="get set"></a>get set</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动定义 获取和更改方法 的computed </span></span><br><span class="line"><span class="comment">// get 定义的 可以直接点出来 不用调方法</span></span><br><span class="line"><span class="comment">// 如果不是关键字 get 就得使用定义的方法修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"># 或者</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>,<span class="keyword">public</span> age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sss&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, <span class="keyword">type</span>: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, age);</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.sayHi()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Cat(<span class="string">&#x27;as&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;asd&#x27;</span>).sayHi()</span><br></pre></td></tr></table></figure>

<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">子类重写方法 在子类中 会覆盖父类的方法</span><br><span class="line"><span class="comment">// 如果要加属性 必须写super 重写属性</span></span><br></pre></td></tr></table></figure>

<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">implements</span>  需要重写属性和方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">implements</span> 接口</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不用定义 super() 可以重写 属性和方法</span></span><br></pre></td></tr></table></figure>

<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 抽象类 禁止被实例化 用来被继承的</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 父类指定结构 子类来实现 避免忘记重写方法导致使用默认的方法</span><br><span class="line"><span class="comment">// 抽象方法只能以abstract开头 没有方法体 </span></span><br><span class="line"><span class="comment">// 只能定义在抽象类里面 子类必须重写</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"> <span class="keyword">abstract</span> sayHi():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-装饰器"><a href="#7-装饰器" class="headerlink" title="7. 装饰器"></a>7. 装饰器</h2><ul>
<li>在运行时立即调用 被装饰的声明信息做为参数传入<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;需要通过柯里化形式拿到参数,默认传入的是target&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">traget: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(name, traget.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> age: <span class="built_in">number</span> = <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-高级API"><a href="#8-高级API" class="headerlink" title="8. 高级API"></a>8. 高级API</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选类型</span></span><br><span class="line">Partial &lt;xxx &amp; xxx&gt;</span><br></pre></td></tr></table></figure>

<h3 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽视重写某个属性 </span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> Omit&lt;A, &#x27;a&#x27;&gt; &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象的 key 和 value</span></span><br><span class="line"><span class="keyword">type</span> keys = <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">const</span> result: Record&lt;keys, <span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">B</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">C</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动推断后续的属性</span></span><br></pre></td></tr></table></figure>

<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ChinaMobilePhones = <span class="string">&#x27;10086&#x27;</span> | <span class="string">&#x27;10010&#x27;</span> | <span class="string">&#x27;10000&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> ChinaMobile &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  website: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ChinaMobileList = &#123;</span><br><span class="line">  [phone <span class="keyword">in</span> ChinaMobilePhones]: ChinaMobile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  set&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T, <span class="attr">val</span>: keys[T]) &#123; &#125;</span><br><span class="line">  get&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-工具函数"><a href="#9-工具函数" class="headerlink" title="9. 工具函数"></a>9. 工具函数</h2><h3 id="覆盖接口类型"><a href="#覆盖接口类型" class="headerlink" title="覆盖接口类型"></a>覆盖接口类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 覆盖接口属性</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns object T, but with T[K] overridden to type U.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type MyObject = &#123; a: number, b: string &#125;</span></span><br><span class="line"><span class="comment"> * OverrideProperty&lt;MyObject, &quot;a&quot;, string&gt; // returns &#123; a: string, b: string &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> OverrideProperty&lt;T, K <span class="keyword">extends</span> keyof T, U&gt; = Omit&lt;T, K&gt; &amp; &#123; [P <span class="keyword">in</span> keyof Pick&lt;T, K&gt;]: U &#125;;</span><br><span class="line"># 第二种方法</span><br><span class="line"><span class="keyword">type</span> Modify&lt;T, R&gt; = Omit&lt;T, keyof R&gt; &amp; R;</span><br></pre></td></tr></table></figure>

<h2 id="10-react接口"><a href="#10-react接口" class="headerlink" title="10. react接口"></a>10. react接口</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># react组件接口</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, ButtonHTMLAttributes, AnchorHTMLAttributes &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>:<span class="title">FC</span>&lt;泛型&gt; <span class="keyword">extends</span> <span class="title">React</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"># react组件props接口</span><br><span class="line">React.ComponentProps&lt;<span class="string">&#x27;button&#x27;</span>&gt;</span><br><span class="line"># css</span><br><span class="line">React.CSSProperties</span><br><span class="line"># children</span><br><span class="line">React.FunctionComponentElement</span><br><span class="line"># 事件</span><br><span class="line">onChange?: <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"># promise</span><br><span class="line">Promist&lt;<span class="built_in">string</span>[]&gt;</span><br><span class="line"># 键盘事件</span><br><span class="line"><span class="attr">e</span>:React.KeyboardEvent</span><br><span class="line"># ref</span><br><span class="line">React.RefObject&lt;HTMLElement&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用在线vscode打开github仓库</title>
    <url>/eternallycyf/%E7%94%A8%E5%9C%A8%E7%BA%BFvscode%E6%89%93%E5%BC%80github%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>作为一个 <code>github</code> 的使用者。。。我竟然不知道 略显尴尬</li>
<li>之前一直是通过 chrome 插件 <code>Octotree-Github code tree</code>  来查看仓库文件结构</li>
<li>和 <code>vscode</code> 打开 简直 <code>low</code> 暴了</li>
<li>如果你也不知道那就赶紧来试试吧</li>
</ul>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul>
<li><ol>
<li>直接在网址 xxx.github.com 的 github 后面加 <code>1s</code></li>
</ol>
<ul>
<li>例如: <a href="https://github.com/conwnet/github1s">https://github.com/conwnet/github1s</a></li>
<li>To: <a href="https://github1s.com/conwnet/github1s">https://github1s.com/conwnet/github1s</a></li>
</ul>
</li>
<li><ol start="2">
<li>直接按中文的 句号按钮</li>
</ol>
<ul>
<li>有的网址可以有的网址不行</li>
</ul>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/conwnet/github1s">github1s</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>强缓存与协商缓存</title>
    <url>/eternallycyf/%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h1><p>浏览器缓存是浏览器在本地磁盘对用户最近请求过的资源进行存储，当访问者再次访问同一资源时，浏览器就可以直接从本地磁盘加载资源，通过缓存的方式就可以减少与服务器的数据传输，减少服务器的负担，加快页面响应速度等。</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度，通常浏览器缓存策略分为强缓存和协商缓存。常见的<code>HTTP</code>缓存只能存储<code>GET</code>响应，对于其他类型的响应则不会进行缓存。<br>理论上来讲，当一个资源被缓存存储后，该资源应该可以被永久存储在缓存中，由于缓存只有有限的空间用于存储资源副本，所以缓存会定期地将一些副本删除，这个过程叫做缓存驱逐。另一方面，当服务器上面的资源进行了更新，那么缓存中的对应资源也应该被更新，由于<code>HTTP</code>是<code>C/S</code>模式的协议，服务器更新一个资源时，不可能直接通知客户端更新缓存，所以双方必须为该资源约定一个过期时间，在该过期时间之前，该资源的缓存副本就是新鲜的，当过了过期时间后，该资源的缓存副本则变为陈旧的。驱逐算法用于将陈旧的资源缓存副本替换为新鲜的，注意，一个陈旧的资源缓存副本是不会直接被清除或忽略的，当客户端发起一个请求时，缓存检索到已有一个对应的陈旧资源缓存副本，则缓存会先将此请求附加一个<code>If-None-Match</code>头，然后发给目标服务器，以此来检查该资源副本是否是依然还是算新鲜的，若服务器返回了<code>304 (Not Modified)</code>，则表示此资源副本是新鲜的，注意该响应不会有带有实体信息，通过这种方式，可以节省一些带宽。若服务器通过<code>If-None-Match</code>或<code>If-Modified-Since</code>判断后发现已过期，那么会带有该资源的实体内容返回。对上面的请求过程可以概括如下：</p>
<ul>
<li>浏览器在发起对于资源的请求时，会首先检查本地是否存在缓存，如果存在缓存则通过<code>expires</code>和<code>cache-control</code>检查缓存是否过期，如果命中缓存且缓存未过期，则直接使用本地缓存。</li>
<li>本地缓存未命中，则浏览器向服务器发送一个协商请求，通过<code>last-modified</code>和<code>etag</code>验证资源是否命中协商缓存，如果命中则服务器会将这个请求响应为<code>304</code>，但是不会返回这个资源的数据，依然是从缓存中读取资源，如果未命中则会携带资源返回且响应为<code>200</code>。</li>
</ul>
<h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>强缓存是通过<code>Expires</code>与<code>Cache-Control</code>来控制缓存在本地的有效期。</p>
<h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p><code>Expires</code>是<code>HTTP 1.0</code>提出的一个表示资源过期时间的<code>Header</code>，它描述的是一个绝对时间，由服务器返回。<code>Expires</code>受限于本地时间，如果修改了本地时间，可能会造成缓存失效.对于资源的请求，如果在<code>Expires</code>之内，则浏览器会直接读取缓存，不再请求服务器。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Expires</span>: Sun, <span class="number">14</span> Jun <span class="number">2021</span> <span class="number">02</span>:<span class="number">50</span>:<span class="number">57</span> GMT</span><br></pre></td></tr></table></figure>

<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p><code>Cache-Control</code>出现于<code>HTTP 1.1</code>，优先级高于<code>Expires</code>，表示的是相对时间，请求头和响应头都支持这个属性，通过它提供的不同的值来定义缓存策略。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">max</span><span class="params">-age</span>=<span class="number">300</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Cache-Control: no-store</code>: 缓存中不得存储任何关于客户端请求和服务端响应的内容，每次由客户端发起的请求都会下载完整的响应内容。</li>
<li><code>Cache-Control: no-cache</code>: 缓存中会存储服务端响应的内容，只是在与服务端进行新鲜度再验证之前，该缓存不能够提供给浏览器使用。简单来说，就是浏览器会将服务端响应的资源进行缓存，但是在每次请求时，缓存都要向服务端评估缓存响应的有效性，协商缓存是否可用，根据响应是<code>304</code>还是<code>200</code>判断是使用本地缓存资源还是使用服务器响应的资源。</li>
<li><code>Cache-Control: public || private</code>: <code>public</code>表示该响应可以被任何中间人比如中间代理、<code>CDN</code>等缓存。默认响应为<code>private</code>，<code>private</code>表示该响应是专用的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。</li>
<li><code>Cache-Control: max-age=31536000</code>: 响应为最大的过期时间，其指令是<code>max-age=&lt;seconds&gt;</code>，表示资源能够被缓存即保持新鲜的最大时间，<code>max-age</code>是距离请求发起的时间的秒数。</li>
<li><code>Cache-Control: must-revalidate</code>: 当使用了<code>must-revalidate</code>指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。在正常情况下是没有必要使用这个指令的，因为在强缓存过期的情况下会进行协商缓存，但是<code>HTTP</code>规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候，还比如有配置一些特殊指令<code>stale-while-revalidate</code>、<code>stale-if-error</code>等的时候，<code>must-revalidate</code>指令就是让缓存在过期后的任何情况下都必须重新验证。</li>
</ul>
<h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的<code>HTTP</code>状态为<code>304 (Not Modified)</code>，该请求不携带实体数据，若未命中，则返回<code>200</code>并携带资源实体数据。协商缓存是利用的是<code>Last-Modified，If-Modified-Since</code>和<code>ETag、If-None-Match</code>这两对<code>Header</code>来管理的。</p>
<h3 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified If-Modified-Since"></a>Last-Modified If-Modified-Since</h3><p><code>Last-Modified，If-Modified-Since</code>是<code>HTTP 1.0</code>引入的，<code>Last-Modified</code>表示本地文件最后修改日期，浏览器会在请求头加上<code>If-Modified-Since</code>即上次响应的<code>Last-Modified</code>的值，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，但是如果在本地打开缓存文件，就会造成<code>Last-Modified</code>被修改，所以在<code>HTTP 1.1</code>出现了<code>ETag</code>。</p>
<h3 id="ETag-If-None-Match"><a href="#ETag-If-None-Match" class="headerlink" title="ETag If-None-Match"></a>ETag If-None-Match</h3><p><code>Etag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的，<code>If-None-Match</code>的请求头字段会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来。<code>ETag</code>的优先级比<code>Last-Modified</code>更高，具体使用<code>ETag</code>主要出于下面几种情况考虑：</p>
<ul>
<li>一些文件也许会周期性的更改，但是他的内容并不改变，比如仅仅改变的修改时间，这个时候我们并不希望客户端认为这个文件被修改了，而重新<code>GET</code>。</li>
<li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，例如<code>1s</code>内修改了<code>N</code>次，<code>If-Modified-Since</code>能检查到的粒度是秒级的，这种修改无法判断。</li>
<li>某些服务器不能精确的得到文件的最后修改时间。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98">https://blog.touchczy.top/#/Browser/%E5%BC%BA%E7%BC%93%E5%AD%98%E4%B8%8E%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60357719">https://zhuanlan.zhihu.com/p/60357719</a></li>
<li><a href="https://www.jianshu.com/p/9c95db596df5">https://www.jianshu.com/p/9c95db596df5</a></li>
<li><a href="https://segmentfault.com/a/1190000008956069">https://segmentfault.com/a/1190000008956069</a></li>
<li><a href="https://github.com/amandakelake/blog/issues/41">https://github.com/amandakelake/blog/issues/41</a></li>
<li><a href="https://juejin.im/post/5ccfccaff265da03ab233bf5">https://juejin.im/post/5ccfccaff265da03ab233bf5</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI七层模型</title>
    <url>/eternallycyf/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><p><code>OSI</code>七层模型包括物理层、数据链路层、网络层、运输层、会话层、表示层、应用层，其中会话层、表示层、应用层一般统称为应用层，在<code>TCP/IP</code>四层模型中物理层与数据链路层归为网络接口层，网络层与运输层是单独的层级，会话层、表示层、应用层归为应用层。</p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层的主要任务描述为确定与传输媒体的接口的一些特性，提供用于建立、保持和断开物理连接的机械的、电气的、功能的和过程的条件，也就是说物理层提供有关同步和比特流在物理媒体上的传输手段。</p>
<h3 id="信号相关概念"><a href="#信号相关概念" class="headerlink" title="信号相关概念"></a>信号相关概念</h3><ul>
<li>单向通信，也称单工通信，只能有一个方向的通信而没有反方向的交互。</li>
<li>双向交替通信，也称半双工通信，通信的双方都可以发送信息，但不能双方同时发送，也不能同时接收。</li>
<li>双向同时通信，也称全双工通信，通信的双方可以同时发送和接收信息。</li>
<li>基带信号，即基本频带信号，来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</li>
<li>带通信号，把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输，即仅在一段频率范围内能够通过信道。</li>
</ul>
<h3 id="基本二元调制方法"><a href="#基本二元调制方法" class="headerlink" title="基本二元调制方法"></a>基本二元调制方法</h3><ul>
<li>调幅<code>AM</code>：载波的振幅随基带数字信号而变化。 </li>
<li>调频<code>FM</code>：载波的频率随基带数字信号而变化。</li>
<li>调相<code>PM</code>：载波的初始相位随基带数字信号而变化。  </li>
</ul>
<h3 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h3><ul>
<li>频分复用<code>FDM</code>: 将用于传输信道的总带宽划分成若干个子频带或称为子信道，每一个子信道传输<code>1</code>路信号。</li>
<li>时分复用<code>TDM</code>: 时分复用则是将时间划分为一段段等长的时分复用帧<code>TDM</code>帧，每一个时分复用的用户在每一个<code>TDM</code>帧中占用固定序号的时隙。</li>
<li>统计时分复用<code>STDM</code>: 根据用户实际需要动态分配线路资源的时分复用方法，只有当用户有数据要传输时才给他分配线路资源。</li>
<li>波分复用<code>WDM</code>: 就是光的频分复用。</li>
<li>码分复用<code>CDM</code>: 靠不同的编码来区分各路原始信号，有码分多址，频分多址、时分多址和同步码分多址等相关技术。</li>
</ul>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层用于建立、维持和拆除链路连接，实现无差错传输的功能。将比特组合成字节，再将字节组合成帧，使用链路层地址，在以太网使用<code>MAC</code>地址，来访问介质，并进行差错检测。</p>
<h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ul>
<li>封装成帧: 在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。</li>
<li>透明传输: 当帧中出现控制字符时便插入一个转义字符，通常采用字符填充或零比特填充的方式。</li>
<li>差错控制: 由于物理线路存在噪声，可能出现比特差错，可以采用纠错码或检测码的方式进行差错控制，由于纠错码较为复杂且携带较多冗余信息，一般采用检测码配合重传机制，一般常用检测码是循环冗余编码<code>CRC</code>。</li>
</ul>
<h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><ul>
<li>简单</li>
<li>封装成帧 </li>
<li>透明性 </li>
<li>多种网络层协议 </li>
<li>多种类型链路 </li>
<li>差错检测 </li>
<li>检测连接状态 </li>
<li>最大传送单元 </li>
<li>网络层地址协商 </li>
<li>数据压缩协商  </li>
</ul>
<h3 id="以太网CSMA-CD协议"><a href="#以太网CSMA-CD协议" class="headerlink" title="以太网CSMA/CD协议"></a>以太网CSMA/CD协议</h3><ul>
<li>多点接入: 许多计算机以多点接入的方式连接在一根总线上。</li>
<li>载波监听: 每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</li>
<li>碰撞检测: 也称为冲突检测，当总线上至少有两个站同时在发送数据，表明产生了碰撞。</li>
<li>半双工通信: 通信的双方都可以发送信息，但不能双方同时发送，也不能同时接收。</li>
<li>争用期: 将端到端往返时延称为争用期，经过争用期这段时间还没有检测到碰撞，就能肯定这次发送不会发生碰撞，以太网取<code>51.2</code>微秒为争用期。</li>
<li>二进制指数类型退避算法: 发生碰撞的站在停止发送数据后，要推迟一个随机时间才能再发送数据。</li>
<li>最短有效帧长: 如果发生冲突，就一定是在发送的前<code>64</code>字节之内，以太网规定凡长度小于<code>64</code>字节的帧都是由于冲突而异常中止的无效帧。</li>
<li>透明网桥: 网桥通过自学习和转发帧以及生成树算法，记录<code>MAC</code>地址和接口信息，生成转发表，从而拓展局域网。</li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层规定了网络连接的建立、维持和拆除的协议，它的主要功能是利用数据链路层所提供的相邻节点间的无差错数据传输功能，通过路由选择和中继功能，实现两个系统之间的连接。</p>
<h3 id="采用设计"><a href="#采用设计" class="headerlink" title="采用设计"></a>采用设计</h3><ul>
<li>网络层只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</li>
<li>网络在发送分组时不需要先建立连接。每一个分组即<code>IP</code>数据报，独立发送，与其前后的分组无关，即不进行编号。</li>
<li>网络层不提供服务质量的承诺，即所传送的分组可能出错、丢失、重复和失序，也不保证分组传送的时限。 </li>
</ul>
<h3 id="虚电路与电路交换"><a href="#虚电路与电路交换" class="headerlink" title="虚电路与电路交换"></a>虚电路与电路交换</h3><ul>
<li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li>
<li>电路交换的电话通信是先建立了一条真正的连接，因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。 </li>
</ul>
<h3 id="虚电路与数据报"><a href="#虚电路与数据报" class="headerlink" title="虚电路与数据报"></a>虚电路与数据报</h3><table>
<thead>
<tr>
<th>对比方面</th>
<th>虚电路服务</th>
<th>数据报服务</th>
</tr>
</thead>
<tbody><tr>
<td>思路</td>
<td>可靠通信应当由网络来保证</td>
<td>可靠通信应当由用户主机来保证</td>
</tr>
<tr>
<td>建立连接</td>
<td>必须有</td>
<td>不需要</td>
</tr>
<tr>
<td>终点地址</td>
<td>仅在连接建立阶段使用，每个分组使用短的虚电路号</td>
<td>每个分组都有终点的完整地址</td>
</tr>
<tr>
<td>分组转发</td>
<td>属于同一条虚电路的分组均按照同一路由进行转发</td>
<td>每个分组独立选择路由进行转发</td>
</tr>
<tr>
<td>当结点出故障时</td>
<td>所有通过出故障的结点的虚电路均不能工作</td>
<td>出故障的结点可能会丢失分组，一些路由可能会发生变化</td>
</tr>
<tr>
<td>分组的顺序</td>
<td>总是按发送顺序到达终点</td>
<td>到达终点时不一定按发送顺序</td>
</tr>
<tr>
<td>端到端的差错处理和流量控制</td>
<td>可以由网络负责，也由用户主机负责</td>
<td>可以由用户主机负责</td>
</tr>
</tbody></table>
<h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><ul>
<li><code>A</code>类地址: 网络号字段<code>Net-Id</code>为<code>1</code>字节，主机号字段<code>Host-Id</code>为<code>3</code>字节。</li>
<li><code>B</code>类地址: 网络号字段<code>Net-Id</code>为<code>2</code>字节，主机号字段<code>Host-Id</code>为<code>2</code>字节。</li>
<li><code>C</code>类地址: 网络号字段<code>Net-Id</code>为<code>3</code>字节，主机号字段<code>Host-Id</code>为<code>1</code>字节。</li>
<li><code>D</code>类地址: 多播地址。</li>
<li><code>E</code>类地址: 保留为今后使用。</li>
</ul>
<h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><ul>
<li>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件``MAC`地址。 </li>
<li>每一个主机都设有一个<code>ARP</code>高速缓存，里面有所在的局域网上的各主机和路由器的<code>IP</code>地址到硬件<code>MAC</code>地址的映射表。</li>
<li><code>ARP</code>是解决同一个局域网上的主机或路由器的<code>IP</code>地址和硬件<code>MAC</code>地址的映射问题。</li>
</ul>
<h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p><code>ICMP</code>报文的种类有两种，即<code>ICMP</code>差错报告报文和<code>ICMP</code>询问报文。<code>ICMP</code>协议主要用于在主机与路由器之间传递控制信息，包括报告错误、交换受限控制和状态信息等。当遇到<code>IP</code>数据无法访问目标、<code>IP</code>路由器无法按当前的传输速率转发数据包等情况时，会自动发送<code>ICMP</code>消息，<code>ping</code>命令就是基于<code>ICMP</code>协议。</p>
<h3 id="划分子网方式"><a href="#划分子网方式" class="headerlink" title="划分子网方式"></a>划分子网方式</h3><ul>
<li>从主机号借用若干个位作为子网号<code>Subnet-id</code>，而主机号<code>Host-Id</code>也就相应减少了若干个位。</li>
<li>使用子网掩码标识将<code>IP</code>地址划分成网络地址和主机地址两部分。</li>
<li>使用无分类域间路由选择<code>CIDR</code>，在<code>IP</code>地址后面加上一个斜线<code>/</code>，然后写上网络前缀所占的位数，将网络前缀都相同的连续的<code>IP</code>地址组成<code>CIDR</code>地址块。</li>
</ul>
<h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><ul>
<li>内部网关协议<code>IGP</code>，即在一个自治系统内部使用的路由选择协议，目前这类路由选择协议使用得最多，如<code>RIP</code>和<code>OSPF</code>协议。</li>
<li>外部网关协议<code>EGP</code>，若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中，这样的协议就是外部网关协议<code>EGP</code>，在外部网关协议中目前使用最多的是<code>BGP-4</code>。  </li>
</ul>
<h3 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h3><ul>
<li>仅和相邻路由器交换信息。 </li>
<li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 </li>
<li>按固定的时间间隔交换路由信息。</li>
<li><code>RIP</code>存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。</li>
<li><code>RIP</code>协议最大的优点就是实现简单，开销较小。</li>
<li><code>RIP</code>限制了网络的规模，它能使用的最大距离为<code>15</code>，<code>16</code>表示不可达。路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。   </li>
</ul>
<h3 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h3><ul>
<li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。</li>
<li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息，链路状态就是说明本路由器都和哪些路由器相邻，以及该链路的度量。 </li>
<li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</li>
<li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</li>
<li>这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的，这称为链路状态数据库的同步。</li>
<li><code>OSPF</code>的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。<code>OSPF</code> 的更新过程收敛得快是其重要优点。</li>
<li><code>OSPF</code>规定每隔一段时间刷新一次数据库中的链路状态。</li>
<li><code>OSPF</code>没有坏消息传播得慢的问题。</li>
<li>一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系，当互联网规模很大时，<code>OSPF</code>协议表现要比距离向量协议<code>RIP</code>好。 </li>
</ul>
<h3 id="BGP协议"><a href="#BGP协议" class="headerlink" title="BGP协议"></a>BGP协议</h3><ul>
<li><code>BGP</code>是不同自治系统的路由器之间交换路由信息的协议。</li>
<li>每一个自治系统的管理员要选择至少一个路由器作为该自治系统的<code>BGP</code>发言人。</li>
<li>一个<code>BGP</code>发言人与其他自治系统中的<code>BGP</code>发言人要交换路由信息，就要先建立<code>TCP</code>连接，然后在此连接上交换<code>BGP</code>报文以建立<code>BGP</code>会话，利用<code>BGP</code>会话交换路由信息。</li>
<li>使用<code>TCP</code>连接能提供可靠的服务，也简化了路由选择协议。</li>
<li>使用<code>TCP</code>连接交换路由信息的两个<code>BGP</code>发言人，彼此成为对方的邻站或对等站。</li>
</ul>
<h3 id="内网IP段"><a href="#内网IP段" class="headerlink" title="内网IP段"></a>内网IP段</h3><ul>
<li><code>A</code>类: <code>10.0.0.0 - 10.255.255.255</code></li>
<li><code>B</code>类: <code>172.16.0.0 - 172.31.255.255</code></li>
<li><code>C</code>类: <code>192.168.0.0 - 192.168.255.255</code></li>
</ul>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><p>运输层完成网络各层次之间的数据传送控制，主要功能是开放系统之间的数据的收发确认，同时还用于弥补各种通信网络的质量差异，对经过下三层之后仍然存在的传输差错进行恢复，进一步提高可靠性，另外，还通过复用、分段和组合、连接和分离、分流和合流等技术措施，提高吞吐量和服务质量。</p>
<h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><ul>
<li><code>TCP</code>是面向连接的协议，提供全双工通信，需要建立链接之后再传输数据，数据传输负载相对较大。</li>
<li><code>TCP</code>提供可靠交付的服务，使用流量控制和拥塞控制等服务保证可靠通信。</li>
<li><code>TCP</code>首部最小<code>20</code>字节，最大<code>60</code>字节，包括源端口、目的端口、序号、确认号、数据偏移、控制标志、窗口、校验和、紧急指针、选项等信息。</li>
<li><code>TCP</code>只能是一对一通信。</li>
<li><code>TCP</code>面向字节流通信。</li>
<li><code>TCP</code>保证数据传输的顺序，通过给<code>TCP</code>连接中传送数据流的每个字节都编上序号来确定传输顺序。</li>
<li><code>TCP</code>提供校验和、确认应答、序列号、超时重传、连接管理、流量控制、拥塞控制等功能。</li>
<li><code>TCP</code>适用于要求可靠传输的应用，如文件传输等</li>
</ul>
<h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动打开 →          <span class="attribute">SYN</span>=1,seq=x          → 被动打开，接收</span><br><span class="line">(同步已发送)                               (同步收到)</span><br><span class="line">接收     ←   <span class="attribute">SYN</span>=1,ACK=1,seq=y,ack=x+1   ← 发送</span><br><span class="line">(已建立链接)                               (同步收到)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=x+1,ack=y+1    →  接收</span><br><span class="line">(已建立链接)                               (已建立链接)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次握手：客户端主动链接服务器，发送初始序列号<code>seq=x</code>与<code>SYN=1</code>同步请求标志，并进入同步已发送<code>SYN_SENT</code>状态，等待服务器确认。</li>
<li>第二次握手：服务端收到消息后发送确认标志<code>ACK=1</code>与同步请求标志<code>SYN=1</code>，发送自己的序列号<code>seq=y</code>以及客户端确认序号<code>ack=x+1</code>，此时服务器进入同步收到<code>SYN_RECV</code>状态。</li>
<li>第三次握手：客户端收到消息后发送确认标志<code>ACK=1</code>，发送自己的序列号<code>seq=x+1</code>与服务器确认号<code>ack=y+1</code>，发送过后即确认链接已建立状态<code>ESTABLISHED</code>，服务端接收确认信息后进入链接已建立状态<code>ESTABLISHED</code></li>
</ol>
<h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动关闭 →          <span class="attribute">FIN</span>=1,seq=u          → 被动关闭，接收</span><br><span class="line">(终止等待1)                               (关闭等待)</span><br><span class="line">接收     ←      <span class="attribute">ACK</span>=1,seq=v,ack=u+1      ← 发送</span><br><span class="line">(终止等待2)                               (关闭等待)</span><br><span class="line">接收     ←   <span class="attribute">FIN</span>=1,ACK=1,seq=w,ack=u+1   ← 发送</span><br><span class="line">(时间等待)                                (最后确认)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=u+1,ack=w+1    → 接收</span><br><span class="line">(时间等待 2MSL 关闭)                      (关闭)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次挥手：客户端发出释放标识<code>FIN=1</code>，自己的序列号<code>seq=u</code>，进入终止等待<code>FIN-WAIT-1</code>状态</li>
<li>第二次挥手：服务端收到消息后发出<code>ACK=1</code>确认标志和客户端的确认号<code>ack=u+1</code>，自己的序列号<code>seq=v</code>，进入关闭等待<code>CLOSE-WAIT</code>状态，客户端收到消息后进入终止等待<code>FIN-WAIT-2</code>状态</li>
<li>第三次挥手：服务器发送释放标识<code>FIN=1</code>信号，确认标志<code>ACK=1</code>，确认序号<code>ack=u+1</code>，自己的序列号<code>seq=w</code>，服务器进入最后确认<code>LAST-ACK</code>状态</li>
<li>第四次挥手：客户端收到回复后，发送确认标志<code>ACK=1</code>，确认序号<code>ack=w+1</code>，自己的序列号<code>seq=u+1</code>，客户端进入时间等待<code>TIME-WAIT</code>状态，经过<code>2</code>个最长报文段寿命后，客户端<code>CLOSE</code>。服务器收到确认后，立刻进入<code>CLOSE</code>状态。</li>
</ol>
<h4 id="传输控制"><a href="#传输控制" class="headerlink" title="传输控制"></a>传输控制</h4><ul>
<li>流量控制: 利用滑动窗口实现流量控制，让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</li>
<li>拥塞控制<ul>
<li>慢开始，只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去，但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li>
<li>拥塞避免，无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就要把慢开始门限设置为出现拥塞时的发送方窗口值的一半。</li>
<li>快重传: 首先要求接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。 </li>
<li>快恢复: 当发送端收到连续三个重复的确认时，就执行乘法减小算法，把慢开始门限减半，但接下去不执行慢开始算法，而是设置为慢开始门限减半后的数值，然后开始执行拥塞避免算法加法增大，使拥塞窗口缓慢地线性增大。 </li>
</ul>
</li>
<li>超时重传: 一般使用<code>Karn</code>算法，当计算平均往返时延<code>RTT</code>时，只要报文段重传了，就不采用其往返时间样本，这样得出的加权平均平均往返时间<code>RTT</code>和超时重传时间<code>RTO</code>就较准确。 </li>
</ul>
<h4 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h4><ul>
<li>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。</li>
<li>累积确认有的优点是：容易实现，即使确认丢失也不必重传。缺点是：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li>
</ul>
<h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><ul>
<li><code>UDP</code>是无连接的，即发送数据之前不需要建立连接，数据传输负载相对较小。</li>
<li><code>UDP</code>使用尽最大努力交付，即不保证可靠交付，同时也不使用流量控制和拥塞控制。</li>
<li><code>UDP</code>首部<code>8</code>字节，包括源端口、目的端口、长度、校验和信息。</li>
<li><code>UDP</code>具有单播、多播、广播的功能，支持一对一、一对多、多对多、多对一的数据传输方式。</li>
<li><code>UDP</code>是面向报文通信，对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，在添加首部后就向下交付<code>IP</code>层。</li>
<li><code>UDP</code>不保证数据传输的顺序，需要应用层程序在数据段加入序号等方式控制顺序。</li>
<li><code>UDP</code>只在<code>IP</code>的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能。</li>
<li><code>UDP</code>适用于实时应用，如网络电话、视频会议、直播等</li>
</ul>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>一般将会话层、表示层、应用层归为为应用层。</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层依靠传输层以下的通信功能使数据传送功能在开放系统间有效地进行。其主要功能是按照在应用进程之间的约定，按照正确的顺序收发数据，进行各种形式的对话。控制方式可以归纳为以下两类：一是为了在会话应用中易于实现接受处理和发送处理的逐次交替变换，设置某一时刻只有一端发送数据。因此需要有交替改变发信端的传送控制。二是在类似文件传送等单方向传送大量数据的情况下，为了防备应用处理中出现意外，在传送数据的过程中需要给数据记上标记。当出现意外时，可以由记标记处重发。例如可以将长文件分页发送，当收到上页的接受确认后，再发下页的内容。</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层的主要功能是把应用层提供的信息变换为能够共同理解的形式，提供字符代码、数据格式、控制信息格式、加密等的统一表示，表示层仅对应用层信息内容的形式进行变换，而不改变其内容本身。</p>
<h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><p>应用层是<code>OSI</code>参考模型的最高层，其功能是实现应用进程之间的信息交换，同时还具有一系列业务处理所需要的服务功能。</p>
<h3 id="常见应用层协议"><a href="#常见应用层协议" class="headerlink" title="常见应用层协议"></a>常见应用层协议</h3><ul>
<li><code>DNS</code>协议: 域名服务协议，将域名地址转换为<code>IP</code>地址，域名解析查询时通常使用<code>UDP</code>传输数据，默认端口<code>53</code>，在区域传输数据同步时一般使用<code>TCP</code>传输数据。</li>
<li><code>FTP</code>协议: 文件传输协议，提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限，使用<code>TCP</code>进行数据传输，控制信息默认<code>21</code>端口，主动模式下数据传输默认<code>20</code>端口，被动模式下默认服务器与客户端协商在<code>39000-40000</code>之间的端口。</li>
<li><code>TFTP</code>协议: 简单文件传送协议，很小且易于实现的文件传送协议，使用<code>UDP</code>传输数据，默认<code>69</code>端口。</li>
<li><code>TELNET</code>协议: 远程终端协议，简单的远程终端协议，明文传输协议，使用<code>TCP</code>传输数据，默认端口<code>23</code>。</li>
<li><code>SSH</code>协议: 安全外壳协议，提供安全的远程终端会话，使用<code>TCP</code>传输数据，默认端口<code>22</code>。</li>
<li><code>HTTP</code>协议: 超文本传输协议，简单的请求响应协议，使用<code>TCP</code>传输数据，默认端口<code>80</code>。</li>
<li><code>HTTPS</code>协议: 超文本传输安全协议，在<code>HTTP</code>协议的基础下加入<code>SSL</code>层实现加密传输，使用<code>TCP</code>传输数据，默认端口<code>443</code>。</li>
<li><code>SMTP</code>协议: 简单邮件传输协议，提供可靠且有效的电子邮件传输的协议，使用<code>TCP</code>传输数据，默认端口<code>25</code>。</li>
<li><code>POP3</code>协议: 邮局协议，简单的邮件读取协议，使用<code>TCP</code>传输数据，默认端口<code>110</code>。</li>
<li><code>IMAP</code>协议: 交互邮件访问协议，交互式进行邮件的访问，使用<code>TCP</code>传输数据，默认端口<code>143</code>。</li>
<li><code>DHCP</code>协议: 动态主机配置协议，用于动态分配<code>IP</code>地址，使用<code>UDP</code>传输数据，客户端发送到<code>DHCP</code>服务器默认<code>67</code>端口，<code>DHCP</code>服务器应答客户端默认<code>68</code>端口。</li>
<li><code>SNMP</code>协议: 简单网络管理协议，用于<code>IP</code>网络管理的协议，使用<code>UDP</code>传输数据，默认代理端口<code>161</code>与管理站端口<code>162</code>。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B">https://blog.touchczy.top/#/Browser/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议发展历程</title>
    <url>/eternallycyf/HTTP%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="HTTP协议发展历程"><a href="#HTTP协议发展历程" class="headerlink" title="HTTP协议发展历程"></a>HTTP协议发展历程</h1><p><code>HTTP</code>超文本传输协议是一个用于传输超文本文档的应用层协议，它是为<code>Web</code>浏览器与<code>Web</code>服务器之间的通信而设计的，<code>HTTP</code>协议到目前为止全部的版本可以分为<code>HTTP 0.9</code>、<code>HTTP 1.0</code>、<code>HTTP 1.1</code>、<code>HTTP 2.0</code>、<code>HTTP 3.0</code>，其中现在普遍应用的版本是<code>HTTP 1.1</code>版本，正在推进<code>HTTP 2.0</code>版本，以及未来的<code>HTTP 3.0</code>版本。</p>
<h2 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h2><p><code>HTTP 0.9</code>也被称为单行协议，最初版本的<code>HTTP</code>协议并没有版本号，后来它的版本号被定位在<code>0.9</code> 以区分后来的版本，<code>HTTP 0.9</code>极其简单，请求由单行指令构成，以唯一可用方法<code>GET</code>开头，其后跟目标资源的路径。<code>HTTP 0.9</code>的响应内容并不包含<code>HTTP</code>头，这意味着只有<code>HTML</code>文件可以传送，无法传输其他类型的文件，也没有状态码或错误代码，出现异常时一个特殊的包含问题描述信息的<code>HTML</code>文件将被响应返回。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>只有一个请求行，并没有<code>HTTP</code>请求头和请求体。</li>
<li>服务器没有返回头信息，只返回数据信息。</li>
<li>第三个是返回的文件内容是以ASCII 字符流来传输的，因为都是HTML 格式的文件，所以使用ASCII 字节码来传输是最合适的。</li>
</ul>
<h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h2><p><code>HTTP 1.0</code>构建了可扩展性，为了满足传输多种类型文件的需求，为了让客户端和服务器能更深入地交流，<code>HTTP 1.0</code>引入了请求头和响应头，它们都是以为<code>Key-Value</code>形式保存的，在<code>HTTP</code>发送请求时，会带上请求头信息，服务器返回数据时，会先返回响应头信息。</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>协议版本信息会随着每个请求发送，即<code>HTTP 1.0</code>被追加到了<code>GET</code>行。</li>
<li>引入请求头，在发起请求时候会通过<code>HTTP</code>请求头告诉服务器它期待服务器返回什么类型的文件、采取什么形式的压缩、提供什么语言的文件以及文件的具体编码。</li>
<li>引入响应头，服务器以请求头中信息准备数据，并以响应头的信息告诉客户端数据采用何种格式返回，倘若遇到不支持的格式，只能返回服务器支持的格式，并在响应头中体现，也就是说最终浏览器是以响应头的信息解析数据。</li>
<li>引入状态码，状态码会在响应开始时发送，使浏览器能了解请求执行成功或失败，并相应调整行为。</li>
<li>引入了缓存机制，通过状态码与<code>If-Modified-Since</code>、<code>Expires</code>等控制更新或使用本地缓存。</li>
<li>引入了<code>Content-Type</code>头，使<code>HTTP</code>具备了传输除纯文本<code>HTML</code>文件以外其他类型文档的能力。</li>
</ul>
<h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h2><p><code>HTTP 1.1</code>是标准化的协议，<code>HTTP 1.1</code>消除了大量歧义内容并引入了多项改进。</p>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>缓存处理，<code>HTTP 1.1</code>引入了更多的缓存控制策略，例如<code>Entity tag</code>、<code>If-Unmodified-Since</code>、<code>If-Match</code>、<code>If-None-Match</code>等更多可供选择的缓存头来控制缓存策略。</li>
<li>带宽优化以及网络连接的使用，在请求头中引入了<code>range</code>，它允许只请求资源的某一个部分，即返回<code>206</code>状态码，这样方便了开发者自由选择以便充分利用带宽和链接，并且可以使用<code>Range</code>和<code>Content-Range</code>制作断点续传功能。</li>
<li>错误通知的管理，在<code>HTTP 1.1</code>中新增了<code>24</code>个错误状态码。</li>
<li>增加<code>Host</code>请求头，能够使不同域名配置在同一个<code>IP</code>地址的服务器上。</li>
<li>支持长连接，<code>HTTP 1.1</code>支持长连接，在一个<code>TCP</code>连接上可以传输多个<code>HTTP</code>请求和响应，减少了建立和关闭连接的消耗和延迟，在<code>HTTP 1.1</code>中默认开启<code>Connection：keep-alive</code>，一般浏览器对于同一个域名允许同时建立<code>6</code>个长链接。</li>
<li>增加管线化技术，允许在第一个应答被完全发送之前就发送第二个请求，以改善队头阻塞问题，但响应的顺序还是会按照请求的顺序返回。</li>
<li>支持响应分块，通过设置<code>Transfer-Encoding: chunked</code>进行分块响应，允许响应的数据可以分成多个部分，配合服务端尽早释放缓冲可以获得更快的响应速度。</li>
</ul>
<h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2><p><code>HTTP 2.0</code>拥有更优异的表现，现网页愈渐变得的复杂，甚至演变成了独有的应用，媒体的播放量，增进交互的脚本大小也增加了许多，更多的数据通过<code>HTTP</code>请求被传输，由此<code>HTTP 2.0</code>为网络效率做了大量的优化。</p>
<h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ul>
<li>二进制分帧，<code>HTTP 2.0</code>是二进制协议而不是文本协议，将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码。</li>
<li>多路复用，并行的请求能在同一个链接中处理，在同一域名下所有访问都是从同一个<code>TCP</code>连接中走，<code>HTTP</code>消息被分解为独立的帧，服务端根据标识符和首部将消息重新组装起来，移除了<code>HTTP 1.1</code>中顺序和阻塞的约束。</li>
<li>压缩<code>header</code>，<code>header</code>在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。</li>
<li>服务端推送，服务器可以主动地向客户端推送资源，而无需客户端明确的请求。</li>
</ul>
<h2 id="HTTP-3-0"><a href="#HTTP-3-0" class="headerlink" title="HTTP 3.0"></a>HTTP 3.0</h2><p><code>HTTP 3.0</code>目前处于制订和测试阶段，是未来的全新的<code>HTTP</code>协议，<code>HTTP 3.0</code>协议运行在<code>QUIC</code>协议之上，是在<code>UDP</code>的基础上实现了可靠传输，权衡传输速度与传输可靠性并加以优化，使用<code>UDP</code>将避免<code>TCP</code>的队头阻塞问题，并加快网络传输速度，但同样需要实现可靠传输的机制，<code>HTTP 3.0</code>不是<code>HTTP 2.0</code>的拓展，<code>HTTP 3.0</code>将会是一个全新的协议。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/heluan/p/8620312.html">https://www.cnblogs.com/heluan/p/8620312.html</a></li>
<li><a href="https://www.lizenghai.com/archives/67621.html">https://www.lizenghai.com/archives/67621.html</a></li>
<li><a href="https://juejin.im/post/5ce37660f265da1bb13f05f0">https://juejin.im/post/5ce37660f265da1bb13f05f0</a></li>
<li><a href="https://www.chainnews.com/zh-hant/articles/401950499827.htm">https://www.chainnews.com/zh-hant/articles/401950499827.htm</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/HTTP%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B">https://blog.touchczy.top/#/Browser/HTTP%E5%8D%8F%E8%AE%AE%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful架构与RPC架构</title>
    <url>/eternallycyf/RESTful%E6%9E%B6%E6%9E%84%E4%B8%8ERPC%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="RESTful架构与RPC架构"><a href="#RESTful架构与RPC架构" class="headerlink" title="RESTful架构与RPC架构"></a>RESTful架构与RPC架构</h1><p>在<code>RESTful</code>架构中，关注点在于资源，操作资源时使用标准方法检索并操作信息片段，在<code>RPC</code>架构中，关注点在于方法，调用方法时将像调用本地方法一样调用服务器的方法。</p>
<h2 id="RESTful架构"><a href="#RESTful架构" class="headerlink" title="RESTful架构"></a>RESTful架构</h2><p><code>REST</code>即表述性状态传递<code>Representational State Transfer</code>，是一种软件架构风格，也可以称作是一种设计<code>API</code>的模式，<code>REST</code>通过<code>HTTP</code>协议定义的通用动词方法<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，以<code>URI</code>对网络资源进行唯一标识，响应端根据请求端的不同需求，通过无状态通信，对其请求的资源进行表述，符合<code>REST</code>设计规范的架构就称为<code>RESTful</code>架构。</p>
<h3 id="主要原则"><a href="#主要原则" class="headerlink" title="主要原则"></a>主要原则</h3><ul>
<li>网络上的所有事物都被抽象为资源</li>
<li>每个资源都有一个唯一的资源标识符</li>
<li>对资源的各种操作不会改变资源标识符</li>
<li>所有的操作都是无状态的</li>
<li>同一个资源具有多种表现形式如<code>xml</code>、<code>json</code>等</li>
</ul>
<h3 id="统一资源接口"><a href="#统一资源接口" class="headerlink" title="统一资源接口"></a>统一资源接口</h3><p>安全性是指访问<code>REST</code>接口时不会对服务端资源状态发生改变。<br>幂等性是指对于同一<code>REST</code>接口的<code>URI</code>多次访问时，得到的资源状态是相同的。</p>
<ul>
<li><code>GET</code>: 安全的，幂等的，用于读取资源</li>
<li><code>POST</code>: 不安全的，不幂等的，用于服务端自动产生的实例号创建资源，更新部分资源</li>
<li><code>PUT</code>: 不安全的，幂等的，用于客户端的实例号创建资源，更新资源</li>
<li><code>DELETE</code>: 不安全的，幂等的，用于客户端实例号删除资源</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>查询<code>user</code>，<code>GET https://127.0.0.1/user/1</code>，通过直接携带<code>params</code>查询用户</li>
<li>新增<code>user</code>，<code>POST https://127.0.0.1/user</code>，请求<code>body</code>附带用户注册信息</li>
<li>修改<code>user</code>，<code>PUT https://127.0.0.1/user</code>，请求<code>body</code>附带<code>userid</code>标识信息</li>
<li>删除<code>user</code>，<code>DELETE https://127.0.0.1/user</code>，请求<code>body</code>附带<code>userid</code>标识信息</li>
<li>通过请求头<code>Accept</code>来获取同一资源的不同形式，如<code>application/json</code>与<code>application/xml</code>等</li>
<li>若将版本号看作同一资源的不同表现形式的话，同样应该在<code>Accept</code>字段来区分版本而不是直接在<code>URI</code>中添加版本号</li>
</ul>
<h2 id="RPC架构"><a href="#RPC架构" class="headerlink" title="RPC架构"></a>RPC架构</h2><p><code>RPC</code>即远程过程调用<code>Remote Procedure Call</code>，简单的理解是一个节点请求另一个节点提供的服务，远程过程调用，是相对于本地过程调用来说的，当调用方法时就像调用本地方法一样调用远程服务器的方法，做到了轻量、无感知通信。</p>
<h3 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h3><ul>
<li>客户端<code>client</code>：服务的调用方</li>
<li>服务端<code>server</code>：服务的提供方</li>
<li>客户端存根<code>client stub</code>：将客户端请求参数打包成网络消息，再发给服务方</li>
<li>服务端存根<code>server stub</code>：接收客户端发来的消息，将消息解包，并调用本地方法</li>
</ul>
<h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户端 </span><br><span class="line"><span class="bullet">1.</span> 将这个调用映射为Call Id</span><br><span class="line"><span class="bullet">2.</span> 将这个Call Id与参数等序列化，以二进制形式打包</span><br><span class="line"><span class="bullet">3.</span> 将序列化数据包通过网络通信发送到服务端</span><br><span class="line"><span class="bullet">4.</span> 等待服务端响应</span><br><span class="line"><span class="bullet">5.</span> 服务端调用成功并返回结果，反序列化后进行下一步操作</span><br><span class="line"></span><br><span class="line">服务端 </span><br><span class="line"><span class="bullet">1.</span> 在本地维护一个Call Id的Map，用以保证Id与调用方法的对应</span><br><span class="line"><span class="bullet">2.</span> 等待客户端请求</span><br><span class="line"><span class="bullet">3.</span> 得到一个请求后，将数据包反序列化，得到Call Id与参数等</span><br><span class="line"><span class="bullet">4.</span> 通过Map寻找Call Id所对应的函数指针</span><br><span class="line"><span class="bullet">5.</span> 通过函数指针调用函数，并将数据包反序列化后的参数传递，得到结果</span><br><span class="line"><span class="bullet">6.</span> 将结果序列化之后通过网络通信返回到客户端</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">此处的客户端指的是本地调用者，也可以是一台服务器</span><br><span class="line">此处的服务端指的是被调用者，也可以是一台服务器</span><br><span class="line">数据包通信时无论是使用socket进行TCP传输，或使用HTTP进行传输都是可行的</span><br></pre></td></tr></table></figure>

<h2 id="相关比较"><a href="#相关比较" class="headerlink" title="相关比较"></a>相关比较</h2><ul>
<li>在通信协议方面来说，<code>RESTful</code>是使用<code>HTTP</code>协议进行数据传输，<code>RPC</code>一般是使用<code>TCP</code>协议数据传输，当然传输协议并不是<code>RPC</code>的重点，一般使用<code>TCP</code>协议传输是因为其效率高，使用<code>HTTP</code>协议传输是完全可行的。</li>
<li>在性能方面，<code>RPC</code>的传输效率高于<code>RESTful</code>数据传输的效率，因为<code>RCP</code>具有高效紧凑的进程通信机制，且传输数据量小，在交换大量消息时效率高。</li>
<li>在灵活度方面，<code>RESTful</code>架构的灵活度高于<code>RPC</code>架构，使用<code>RESTful</code>架构具有比较好的可读性，<code>RPC</code>在编写与调试时略显繁琐。</li>
<li>使用<code>RESTful</code>架构的接口进行数据传输可以得到多语言支持，<code>HTTP</code>协议相对更规范、更通用、更标准，对于中间件而言最先支持的几种协议都包含<code>RESTful</code>数据传输规范。</li>
<li>内部服务的相互调用推荐使用<code>RPC</code>，而对外的接口推荐使用<code>RESTful</code>，例如微服务架构模式一般就采用对内<code>RPC</code>对外<code>RESTful</code>的模式。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/7d6853140e13">https://www.jianshu.com/p/7d6853140e13</a></li>
<li><a href="https://www.jianshu.com/p/ee92c9accedd">https://www.jianshu.com/p/ee92c9accedd</a></li>
<li><a href="https://www.zhihu.com/question/28570307">https://www.zhihu.com/question/28570307</a></li>
<li><a href="https://www.zhihu.com/question/25536695">https://www.zhihu.com/question/25536695</a></li>
<li><a href="https://www.runoob.com/w3cnote/restful-architecture.html">https://www.runoob.com/w3cnote/restful-architecture.html</a></li>
<li><a href="https://blog.csdn.net/bieleyang/article/details/76272699">https://blog.csdn.net/bieleyang/article/details/76272699</a></li>
<li><a href="https://blog.csdn.net/u014590757/article/details/80233901">https://blog.csdn.net/u014590757/article/details/80233901</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/RESTful%E6%9E%B6%E6%9E%84%E4%B8%8ERPC%E6%9E%B6%E6%9E%84">https://blog.touchczy.top/#/Browser/RESTful%E6%9E%B6%E6%9E%84%E4%B8%8ERPC%E6%9E%B6%E6%9E%84</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器页面呈现过程</title>
    <url>/eternallycyf/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="浏览器页面呈现过程"><a href="#浏览器页面呈现过程" class="headerlink" title="浏览器页面呈现过程"></a>浏览器页面呈现过程</h1><p>从输入链接到浏览器呈现页面的过程中，浏览器所经历的过程。</p>
<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>首先浏览器将输入的链接进行<code>DNS</code>解析，也就是将域名转换为<code>IP</code>地址的过程，得到了服务器具体的<code>IP</code>地址，才可以进行<code>TCP</code>链接以及数据的传输。<br>具体<code>DNS</code>解析的过程，浏览器首先检查自身的<code>DNS</code>缓存是否对于此域名有<code>IP</code>地址，<code>chrome</code>对于域名解析的缓存时间为<code>60s</code>，可以通过地址栏输入<code>chrome://net-internals/#dns</code>清除<code>DNS</code>缓存。若浏览器解析缓存未命中，则到操作系统中<code>hosts</code>文件检查域名与<code>IP</code>对应关系。若<code>hosts</code>文件未命中，则向本地域名服务器请求解析，本地域名服务器一般是运营商<code>ISP</code>提供的，一般是通过<code>53</code>端口发送<code>UDP</code>报文请求服务器解析<code>DNS</code>。若本地服务器解析未命中则会有两种解析方案：迭代解析与递归解析，一般来说，主机向本地域名服务器的查询一般都是采用递归查询，本地域名服务器向根域名服务器的查询通常是采用迭代查询，依次向根域名服务器、顶级域名服务器、主域名服务器等一级一级查询查询直到查询到<code>IP</code>地址。</p>
<h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><code>HTTP</code>协议是使用<code>TCP</code>协议作为其传输层协议的，在拿到服务器的<code>IP</code>地址后，客户端浏览器会与服务器建立<code>TCP</code>连接，该过程包括三次握手。  </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动打开 →          <span class="attribute">SYN</span>=1,seq=x          → 被动打开，接收</span><br><span class="line">(同步已发送)                               (同步收到)</span><br><span class="line">接收     ←   <span class="attribute">SYN</span>=1,ACK=1,seq=y,ack=x+1   ← 发送</span><br><span class="line">(已建立链接)                               (同步收到)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=x+1,ack=y+1    →  接收</span><br><span class="line">(已建立链接)                               (已建立链接)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次握手：客户端主动链接服务器，发送初始序列号<code>seq=x</code>与<code>SYN=1</code>同步请求标志，并进入同步已发送<code>SYN_SENT</code>状态，等待服务器确认。</li>
<li>第二次握手：服务端收到消息后发送确认标志<code>ACK=1</code>与同步请求标志<code>SYN=1</code>，发送自己的序列号<code>seq=y</code>以及客户端确认序号<code>ack=x+1</code>，此时服务器进入同步收到<code>SYN_RECV</code>状态。</li>
<li>第三次握手：客户端收到消息后发送确认标志<code>ACK=1</code>，发送自己的序列号<code>seq=x+1</code>与服务器确认号<code>ack=y+1</code>，发送过后即确认链接已建立状态<code>ESTABLISHED</code>，服务端接收确认信息后进入链接已建立状态<code>ESTABLISHED</code>。</li>
</ol>
<h2 id="SSL加密传输"><a href="#SSL加密传输" class="headerlink" title="SSL加密传输"></a>SSL加密传输</h2><p><code>SSL</code>的建立是为了<code>HTTPS</code>加密传输，<code>HTTPS</code>在<code>HTTP</code>的基础下加入<code>SSL</code>层，<code>HTTPS</code>的安全基础是<code>SSL</code>，因此加密的详细内容就需要<code>SSL</code>。  </p>
<ol>
<li>首先<code>TCP</code>三次握手建立链接，这是数据传输基础，在此之上开始<code>SSL</code>。</li>
<li>客户端首先发送<code>Client Hello</code>开始<code>SSL</code>通信，报文中包含客户端支持的<code>SSL</code>版本、随机值<code>Random1</code>、加密算法以及密钥长度等。</li>
<li>服务器发送<code>Server Hello</code>，和客户端一样，在报文中包含<code>SSL</code>版本、随机值<code>Random2</code>以及加密组件，此后服务端将证书也发送到客户端。</li>
<li>此时客户端需要对服务端发送的证书进行验证，通过操作系统内置的<code>CA</code>证书，将服务器发送的证书的数字签名进行解密，并将证书的公钥进行相同算法的<code>HASH</code>与解密的数字签名解密的内容进行对比，验证证书是否合法有效，是否被劫持更换。</li>
<li>客户端验证证书合法，然后生成一个随机值<code>Random3</code>，用公钥对<code>Random3</code>进行加密，生成<code>Pre-Master Key</code>，客户端以<code>Client Key Exchange</code>报文将<code>Pre-Master Key</code>发送到服务端，此后发送<code>Change Cipher Spec</code>报文表示此后数据传输进行加密传输。</li>
<li>服务端将<code>Pre-Master Key</code>用自己的私钥解密为<code>Random3</code>,服务端发送<code>Change Cipher Spec</code>报文表示此后数据传输进行加密传输。</li>
<li>此时客户端与服务端都拥有三个随机字符串，且<code>Random3</code>是密文传输的，是安全状态的，此时则可以使用这三个字符串进行对称加密传输。由于非对称加密慢，不能每次传输数据都进行非对称加密，所以使用非对称加密将密钥协商好然后使用对称加密进行数据传输。</li>
<li>此时便正常进行<code>HTTP</code>数据传输，但是由于<code>SSL</code>加密的作用，此时的<code>HTTP</code>传输便是安全的，此为<code>HTTPS</code>的传输过程，其中<code>2</code>、<code>3</code>、<code>5</code>、<code>6</code>也被称为<code>SSL</code>四次握手。</li>
</ol>
<h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><p>浏览器构建<code>HTTP</code>请求报文，并通过<code>TCP</code>协议传送到服务器的指定端口，<code>HTTP</code>请求报文一共有三个部分，报文首部，通常包含请求行与各种请求头字段等；空行，告诉服务器请求头部到此为止），报文主体，即发送的数据信息，通常并不一定要有报文主体。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 报文首部 --&gt;</span></span><br><span class="line">GET / HTTP/1.1 <span class="comment">&lt;!-- 请求行 --&gt;</span></span><br><span class="line">accept: text/html</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=0.9 </span><br><span class="line">... <span class="comment">&lt;!-- 请求头 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 空行 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 报文主体 --&gt;</span></span><br><span class="line">u=1&amp;t=1587699008</span><br></pre></td></tr></table></figure>

<h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>服务端响应<code>HTTP</code>请求，返回响应报文，<code>HTTP</code>响应报文由四部分组成：响应行、响应头、空行、响应体。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">HTTP/1.1 200 OK <span class="comment">&lt;!-- 响应行 --&gt;</span></span></span><br><span class="line"><span class="xml">content-encoding: gzip</span></span><br><span class="line"><span class="xml">content-type: text/html; charset=utf-8</span></span><br><span class="line"><span class="xml">date: Fri, 24 Apr 2021 03:34:50 GMT</span></span><br><span class="line"><span class="xml">... <span class="comment">&lt;!-- 响应头 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 空行 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 响应体 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&quot;status&quot;:1, &quot;msg&quot;: &quot;success&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="浏览器渲染页面"><a href="#浏览器渲染页面" class="headerlink" title="浏览器渲染页面"></a>浏览器渲染页面</h2><ol>
<li>自上而下，首先解析<code>HTML</code>标签，生成<code>DOM Tree</code></li>
<li>在解析到<code>&lt;link&gt;</code>或者<code>&lt;style&gt;</code>标签时，开始解析<code>CSS</code>，生成<code>CSSOM</code>，值的注意的是此时解析<code>HTML</code>标签与解析<code>CSS</code>是并行执行的</li>
<li>当遇到<code>&lt;script&gt;</code>标签后，浏览器会立即开始解析脚本，并停止解析文档，因为脚本有可能会改动<code>DOM</code>与<code>CSS</code>，继续解析会浪费资源，所以应当将<code>&lt;script&gt;</code>标签放于<code>&lt;body&gt;&lt;/body&gt;</code>后</li>
<li>当<code>DOM Tree</code>与<code>CSSOM</code>生成后，将两者结合进行布局，计算它们的大小位置等布局信息，形成一个能够表示这所有信息的内部表示模型，可称为渲染树<code>render tree</code></li>
<li>根据计算好的信息绘制整个页面，系统会遍历渲染树，并调用<code>paint</code>方法，将内容显示在屏幕上。</li>
</ol>
<h2 id="断开TCP链接"><a href="#断开TCP链接" class="headerlink" title="断开TCP链接"></a>断开TCP链接</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动关闭 →          <span class="attribute">FIN</span>=1,seq=u          → 被动关闭，接收</span><br><span class="line">(终止等待1)                               (关闭等待)</span><br><span class="line">接收     ←      <span class="attribute">ACK</span>=1,seq=v,ack=u+1      ← 发送</span><br><span class="line">(终止等待2)                               (关闭等待)</span><br><span class="line">接收     ←   <span class="attribute">FIN</span>=1,ACK=1,seq=w,ack=u+1   ← 发送</span><br><span class="line">(时间等待)                                (最后确认)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=u+1,ack=w+1    → 接收</span><br><span class="line">(时间等待 2MSL 关闭)                      (关闭)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次挥手：客户端发出释放标识<code>FIN=1</code>，自己的序列号<code>seq=u</code>，进入终止等待<code>FIN-WAIT-1</code>状态</li>
<li>第二次挥手：服务端收到消息后发出<code>ACK=1</code>确认标志和客户端的确认号<code>ack=u+1</code>，自己的序列号<code>seq=v</code>，进入关闭等待<code>CLOSE-WAIT</code>状态，客户端收到消息后进入终止等待<code>FIN-WAIT-2</code>状态</li>
<li>第三次挥手：服务器发送释放标识<code>FIN=1</code>信号，确认标志<code>ACK=1</code>，确认序号<code>ack=u+1</code>，自己的序列号<code>seq=w</code>，服务器进入最后确认<code>LAST-ACK</code>状态</li>
<li>第四次挥手：客户端收到回复后，发送确认标志<code>ACK=1</code>，确认序号<code>ack=w+1</code>，自己的序列号<code>seq=u+1</code>，客户端进入时间等待<code>TIME-WAIT</code>状态，经过<code>2</code>个最长报文段寿命后，客户端<code>CLOSE</code>。服务器收到确认后，立刻进入<code>CLOSE</code>状态。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/d616d887953a">https://www.jianshu.com/p/d616d887953a</a></li>
<li><a href="https://www.cnblogs.com/lhh520/p/10232738.html">https://www.cnblogs.com/lhh520/p/10232738.html</a></li>
<li><a href="https://blog.csdn.net/bjweimengshu/article/details/78978314">https://blog.csdn.net/bjweimengshu/article/details/78978314</a></li>
<li><a href="https://blog.csdn.net/wlk2064819994/article/details/79756669">https://blog.csdn.net/wlk2064819994/article/details/79756669</a></li>
<li><a href="https://blog.csdn.net/weixin_40659167/article/details/86510745">https://blog.csdn.net/weixin_40659167/article/details/86510745</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E8%BF%87%E7%A8%8B">https://blog.touchczy.top/#/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0%E8%BF%87%E7%A8%8B</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP与UDP异同</title>
    <url>/eternallycyf/TCP%E4%B8%8EUDP%E5%BC%82%E5%90%8C/</url>
    <content><![CDATA[<h1 id="TCP与UDP异同"><a href="#TCP与UDP异同" class="headerlink" title="TCP与UDP异同"></a>TCP与UDP异同</h1><p><code>TCP/IP</code>模型的运输层有两个不同的协议：<code>UDP</code>用户数据报协议与<code>TCP</code>传输控制协议。</p>
<h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul>
<li><code>TCP</code>与<code>UDP</code>都是运行在运输层的协议。</li>
<li><code>TCP</code>与<code>UDP</code>的通信都需要开放端口。</li>
</ul>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul>
<li><code>TCP</code>是面向连接的协议，提供全双工通信，需要建立链接之后再传输数据，数据传输负载相对较大。</li>
<li><code>TCP</code>提供可靠交付的服务，使用流量控制和拥塞控制等服务保证可靠通信。</li>
<li><code>TCP</code>首部最小<code>20</code>字节，最大<code>60</code>字节，包括源端口、目的端口、序号、确认号、数据偏移、控制标志、窗口、校验和、紧急指针、选项等信息。</li>
<li><code>TCP</code>只能是一对一通信。</li>
<li><code>TCP</code>面向字节流通信。</li>
<li><code>TCP</code>保证数据传输的顺序，通过给<code>TCP</code>连接中传送数据流的每个字节都编上序号来确定传输顺序。</li>
<li><code>TCP</code>提供校验和、确认应答、序列号、超时重传、连接管理、流量控制、拥塞控制等功能。</li>
<li><code>TCP</code>适用于要求可靠传输的应用，如文件传输等</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul>
<li><code>UDP</code>是无连接的，即发送数据之前不需要建立连接，数据传输负载相对较小。</li>
<li><code>UDP</code>使用尽最大努力交付，即不保证可靠交付，同时也不使用流量控制和拥塞控制。</li>
<li><code>UDP</code>首部<code>8</code>字节，包括源端口、目的端口、长度、校验和信息。</li>
<li><code>UDP</code>具有单播、多播、广播的功能，支持一对一、一对多、多对多、多对一的数据传输方式。</li>
<li><code>UDP</code>是面向报文通信，对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，在添加首部后就向下交付<code>IP</code>层。</li>
<li><code>UDP</code>不保证数据传输的顺序，需要应用层程序在数据段加入序号等方式控制顺序。</li>
<li><code>UDP</code>只在<code>IP</code>的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能。</li>
<li><code>UDP</code>适用于实时应用，如网络电话、视频会议、直播等</li>
</ul>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="UDP实现可靠性传输"><a href="#UDP实现可靠性传输" class="headerlink" title="UDP实现可靠性传输"></a>UDP实现可靠性传输</h3><p>运输层无法保证数据的可靠传输，只能通过应用层来实现了，实现的方式可以参照<code>TCP</code>可靠性传输的方式，只是实现不在传输层，实现转移到了应用层，主要通过实现确认机制、重传机制、窗口确认等机制来实现可靠传输，有<code>RUDP</code>、<code>RTP</code>、<code>UDT</code>等开源程序利用<code>UDP</code>实现了可靠的数据传输，此外有结合<code>TCP</code>的可靠与<code>UDP</code>速度的权衡<code>KCP</code>协议。</p>
<h3 id="TCP短连接和长连接的区别"><a href="#TCP短连接和长连接的区别" class="headerlink" title="TCP短连接和长连接的区别"></a>TCP短连接和长连接的区别</h3><p>短连接：<code>Client</code>向<code>Server</code>发送消息，<code>Server</code>回应<code>Client</code>，然后一次读写就完成了，这时候双方任何一个都可以发起<code>close</code>操作，不过一般都是<code>Client</code>先发起<code>close</code>操作。短连接一般只会在<code>Client/Server</code>间传递一次读写操作。短链接管理起来比较简单，建立存在的连接都是有用的连接，不需要额外的控制手段，但是如果客户请求频繁，将在<code>TCP</code>的建立和关闭操作上浪费时间和带宽。<br>长连接：<code>Client</code>与<code>Server</code>完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接，长连接可以省去较多的<code>TCP</code>建立和关闭的操作，减少浪费，节约时间，对于频繁请求资源的客户来说，较适用长连接，但是随着客户端连接越来越多，<code>Server</code>负载会越来越大，此时就需要采取一些策略减少负载，例如关闭长时间未读写的链接<code>LRU</code>算法、限制客户端链接数量等。</p>
<h3 id="TCP粘包拆包解决方案"><a href="#TCP粘包拆包解决方案" class="headerlink" title="TCP粘包拆包解决方案"></a>TCP粘包拆包解决方案</h3><p>由于<code>TCP</code>本身是面向字节流的，无法理解上层的业务数据，所以在底层是无法保证数据包不被拆分和重组的，这个问题只能通过上层的应用协议栈设计来解决。</p>
<ul>
<li>消息定长：发送端将每个数据包封装为固定长度（不够的可以通过补<code>0</code>填充），这样接收端每次接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</li>
<li>设置消息边界：服务端从网络流中按消息边界分离出消息内容，在包尾增加回车换行符进行分割，例如<code>FTP</code>协议。</li>
<li>将消息分为消息头和消息体：消息头中包含表示消息总长度（或者消息体长度）的字段。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/108822858">https://zhuanlan.zhihu.com/p/108822858</a></li>
<li><a href="https://www.cnblogs.com/liangyc/p/11628148.html">https://www.cnblogs.com/liangyc/p/11628148.html</a></li>
<li><a href="https://blog.csdn.net/m_xiaoer/article/details/72885418">https://blog.csdn.net/m_xiaoer/article/details/72885418</a></li>
<li><a href="https://blog.csdn.net/pangyemeng/article/details/50387078">https://blog.csdn.net/pangyemeng/article/details/50387078</a></li>
<li><a href="https://blog.csdn.net/quiet_girl/article/details/50599777">https://blog.csdn.net/quiet_girl/article/details/50599777</a></li>
<li><a href="https://blog.csdn.net/liuchenxia8/article/details/80428157">https://blog.csdn.net/liuchenxia8/article/details/80428157</a></li>
<li><a href="https://blog.csdn.net/qq_40732350/article/details/90902396">https://blog.csdn.net/qq_40732350/article/details/90902396</a></li>
<li><a href="https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html">https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/TCP%E4%B8%8EUDP%E5%BC%82%E5%90%8C">https://blog.touchczy.top/#/Browser/TCP%E4%B8%8EUDP%E5%BC%82%E5%90%8C</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手</title>
    <url>/eternallycyf/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    <content><![CDATA[<h1 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h1><p>传输控制协议<code>TCP，Transmission Control Protocol</code>是一种面向连接的、可靠的、基于字节流的传输层通信协议，其是运行在<code>OSI</code>七层模型中的运输层，为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动打开 →          <span class="attribute">SYN</span>=1,seq=x          → 被动打开，接收</span><br><span class="line">(同步已发送)                               (同步收到)</span><br><span class="line">接收     ←   <span class="attribute">SYN</span>=1,ACK=1,seq=y,ack=x+1   ← 发送</span><br><span class="line">(已建立链接)                               (同步收到)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=x+1,ack=y+1    →  接收</span><br><span class="line">(已建立链接)                               (已建立链接)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次握手：客户端主动链接服务器，发送初始序列号<code>seq=x</code>与<code>SYN=1</code>同步请求标志，并进入同步已发送<code>SYN_SENT</code>状态，等待服务器确认。</li>
<li>第二次握手：服务端收到消息后发送确认标志<code>ACK=1</code>与同步请求标志<code>SYN=1</code>，发送自己的序列号<code>seq=y</code>以及客户端确认序号<code>ack=x+1</code>，此时服务器进入同步收到<code>SYN_RECV</code>状态。</li>
<li>第三次握手：客户端收到消息后发送确认标志<code>ACK=1</code>，发送自己的序列号<code>seq=x+1</code>与服务器确认号<code>ack=y+1</code>，发送过后即确认链接已建立状态<code>ESTABLISHED</code>，服务端接收确认信息后进入链接已建立状态<code>ESTABLISHED</code></li>
</ol>
<h3 id="小解释"><a href="#小解释" class="headerlink" title="小解释"></a>小解释</h3><ol>
<li>第一次握手：客户端：“兄弟，待会咱们出去玩吧，能看到我的消息吗，能就吱一声，让我知道我有发消息的能力”</li>
<li>第二次握手：服务端：“吱，走走走咱们去哪玩？我收到你的消息了，你有发消息的能力，要不你再给我回个消息，让我也确定我有发消息的能力”</li>
<li>第三次握手：客户端：“咱们先去河里摸鱼玩，然后上山摘点果子。我也收到你的消息了，你这发消息的能力也没问题，咱俩的发消息的能力都没问题，可以愉快的玩耍了”</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">双方要连接，要等待对端同意并返回确认，一端请求后收到确认包就意味着，网络可达并且对端同意建立连接。最后的模型则是</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">A</span>  --请求--&gt;  <span class="selector-tag">B</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">A</span>  &lt;--确认--  <span class="selector-tag">B</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">A</span>  &lt;--请求--  <span class="selector-tag">B</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">A</span>  --确认--&gt;  <span class="selector-tag">B</span></span><br><span class="line"></span><br><span class="line">中间两次可以一起返回，所以是三次握手</span><br><span class="line">引自知乎<span class="keyword">@Manistein</span></span><br></pre></td></tr></table></figure>

<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">client                                     <span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>主动关闭 →          <span class="attribute">FIN</span>=1,seq=u          → 被动关闭，接收</span><br><span class="line">(终止等待1)                               (关闭等待)</span><br><span class="line">接收     ←      <span class="attribute">ACK</span>=1,seq=v,ack=u+1      ← 发送</span><br><span class="line">(终止等待2)                               (关闭等待)</span><br><span class="line">接收     ←   <span class="attribute">FIN</span>=1,ACK=1,seq=w,ack=u+1   ← 发送</span><br><span class="line">(时间等待)                                (最后确认)</span><br><span class="line">发送     →      <span class="attribute">ACK</span>=1,seq=u+1,ack=w+1    → 接收</span><br><span class="line">(时间等待 2MSL 关闭)                      (关闭)</span><br></pre></td></tr></table></figure>
<ol>
<li>第一次挥手：客户端发出释放标识<code>FIN=1</code>，自己的序列号<code>seq=u</code>，进入终止等待<code>FIN-WAIT-1</code>状态</li>
<li>第二次挥手：服务端收到消息后发出<code>ACK=1</code>确认标志和客户端的确认号<code>ack=u+1</code>，自己的序列号<code>seq=v</code>，进入关闭等待<code>CLOSE-WAIT</code>状态，客户端收到消息后进入终止等待<code>FIN-WAIT-2</code>状态</li>
<li>第三次挥手：服务器发送释放标识<code>FIN=1</code>信号，确认标志<code>ACK=1</code>，确认序号<code>ack=u+1</code>，自己的序列号<code>seq=w</code>，服务器进入最后确认<code>LAST-ACK</code>状态</li>
<li>第四次挥手：客户端收到回复后，发送确认标志<code>ACK=1</code>，确认序号<code>ack=w+1</code>，自己的序列号<code>seq=u+1</code>，客户端进入时间等待<code>TIME-WAIT</code>状态，经过<code>2</code>个最长报文段寿命后，客户端<code>CLOSE</code>。服务器收到确认后，立刻进入<code>CLOSE</code>状态。</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="为什不能两次握手"><a href="#为什不能两次握手" class="headerlink" title="为什不能两次握手"></a>为什不能两次握手</h3><p><code>TCP</code>链接握手是通过序列号进行的，也就是<code>seq</code>，<code>TCP</code>需要<code>seq</code>序列号来做可靠重传或接收，而避免连接复用时无法分辨出<code>seq</code>是延迟或者是旧链接的<code>seq</code>，因此需要三次握手来约定确定双方的初始<code>seq</code>序列号，也就是保证序号完成同步确认。<br>假如进行两次握手，流程如下，客户端发送起始序列号<code>seq=x</code>到服务端，服务端收到消息后发送确认标识<code>ACK=1</code>与确认号<code>ack=x+1</code>以及自己的序列号<code>req=y</code>，此时服务端认为链接已建立，客户端收到消息后也认为请求已建立。<br>考虑到网路中数据延时的情况，假设客户端首先发起了一次链接，此报文在网路中堵塞，此时客户端又发起了一次请求，此时报文更换了路由线路，到达了服务端，服务端此时认为建立链接，并传报文到客户端，数据通信完成后关闭了链接，此时，客户端第一次发送的报文终于到达了服务端，由于两次握手，服务端此时认为建立链接，发送确认标识到客户端，但客户端认定次序列号无效，不建立链接，这就造成了服务端资源的浪费，本不该建立的链接而建立了链接。</p>
<h3 id="为什么不要四次握手"><a href="#为什么不要四次握手" class="headerlink" title="为什么不要四次握手"></a>为什么不要四次握手</h3><p>当初上课时老师给出的红蓝军问题的例子，也就是两军问题，从通信的可靠性出发，不存在绝对可靠的协议</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">在山的两头是红军<span class="number">1</span>和红军<span class="number">2</span>，山上是蓝军，红军<span class="number">1</span>和<span class="number">2</span>都不是蓝军的对手，想打败蓝军只有一起动手。那么红军<span class="number">1</span>和<span class="number">2</span>需要相互通信才能确定双方在同一个时间动手</span><br><span class="line">红军<span class="number">1</span>的传令军成功偷偷越过大山告诉红军<span class="number">2</span>，明天早上中午十二点一起动手</span><br><span class="line">红军<span class="number">2</span>表示赞同，但是红军<span class="number">1</span>并不确定红军<span class="number">2</span>是否收到了消息，贸然动手必定失败，所以需要红军<span class="number">2</span>的传令军越过大山告诉红军<span class="number">1</span>收到了消息</span><br><span class="line">红军<span class="number">1</span>收到了红军<span class="number">2</span>的确认消息，但此时红军<span class="number">2</span>并不知道红军<span class="number">1</span>是否收到自己的确认消息，所以需要红军<span class="number">1</span>的传令兵越过大山告诉红军<span class="number">2</span>收到了确认消息</span><br><span class="line">红军<span class="number">2</span>收到了红军<span class="number">1</span>的确认消息，但此时红军<span class="number">1</span>并不知道红军<span class="number">2</span>是否收到自己的确认消息，于是需要红军<span class="number">2</span>的传令兵越过大山告诉红军<span class="number">1</span>收到了确认消息</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure>
<p>两军问题最后陷入了一个死循环，这说明永远都不能完美的达成协议，不存在完全可靠的通信协议。而<code>TCP</code>作为一种可靠传输控制协议，既要保证数据可靠传输，又要提高传输的效率，而三次握手的时候已经可以达到一个非常可观的可信率与传输效率，再继续握手虽然能继续提高连接的可信率，但是就像对数<code>log</code>函数曲线，随着握手次数的增加，可靠率增加的并不明显，甚至相对于效率上的消耗，多次握手反而不利于数据的传输。</p>
<h3 id="建立连接是三次握手，关闭连接却是四次挥手"><a href="#建立连接是三次握手，关闭连接却是四次挥手" class="headerlink" title="建立连接是三次握手，关闭连接却是四次挥手"></a>建立连接是三次握手，关闭连接却是四次挥手</h3><p>建立连接的时候， 服务器在<code>LISTEN</code>状态下，收到建立连接请求的<code>SYN</code>报文后，把<code>ACK</code>和<code>SYN</code>放在一个报文里发送给客户端。而关闭连接时，服务器收到对方的<code>FIN</code>报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送<code>FIN</code>报文给对方来表示同意现在关闭连接，因此，己方<code>ACK</code>和<code>FIN</code>一般都会分开发送，从而导致多了一次。</p>
<h3 id="客户端最后还要等待2MSL"><a href="#客户端最后还要等待2MSL" class="headerlink" title="客户端最后还要等待2MSL"></a>客户端最后还要等待2MSL</h3><p><code>MSL</code>是<code>Maximum Segment Lifetime</code>，<code>TCP</code>允许不同的实现可以设置不同的<code>MSL</code>值。<br>第一，保证客户端发送的最后一个<code>ACK</code>报文能够到达服务器，因为这个<code>ACK</code>报文可能丢失，站在服务器的角度看来，我已经发送了<code>FIN+ACK</code>报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个<code>2MSL</code>时间段内收到这个重传的报文，接着给出回应报文，并且会重启<code>2MSL</code>计时器。<br>第二，防止类似已经失效的连接请求报文段出现在本连接中。客户端发送完最后一个确认报文后，在这个<code>2MSL</code>时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/24853633">https://www.zhihu.com/question/24853633</a></li>
<li><a href="https://www.cnblogs.com/jainszhang/p/10641728.html">https://www.cnblogs.com/jainszhang/p/10641728.html</a></li>
<li><a href="https://blog.csdn.net/jun2016425/article/details/81506353">https://blog.csdn.net/jun2016425/article/details/81506353</a></li>
<li><a href="https://blog.csdn.net/qq_38950316/article/details/81087809">https://blog.csdn.net/qq_38950316/article/details/81087809</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">https://blog.touchczy.top/#/Browser/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式SESSION一致性</title>
    <url>/eternallycyf/%E5%88%86%E5%B8%83%E5%BC%8FSESSION%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<h1 id="分布式SESSION一致性"><a href="#分布式SESSION一致性" class="headerlink" title="分布式SESSION一致性"></a>分布式SESSION一致性</h1><p><code>SESSION</code>是服务器为客户端创建的一个会话，存储用户的相关信息，用以标识用户身份等。在单服务器环境下是不需要考虑会话的一致性的问题的，但是在集群环境下就会出现一些问题，假如一个用户在登录请求时负载均衡到了<code>A</code>服务器，<code>A</code>服务器为其分配了<code>SESSION</code>，下次请求数据时被分配到了<code>B</code>服务器，此时由于<code>B</code>服务器不存在此用户的<code>SESSION</code>，此用户会被重定向到登录页面，这种情况是不合理的业务逻辑，所以需要维护<code>SESSION</code>的一致性。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="SESSION-同步"><a href="#SESSION-同步" class="headerlink" title="SESSION 同步"></a>SESSION 同步</h3><p>多个服务器之间互相同步<code>SESSION</code>，即<code>A</code>服务器生成一个<code>SESSION</code>信息后同步传输到<code>B</code>、<code>C</code>、<code>D</code>等服务器，同样<code>B</code>、<code>C</code>、<code>D</code>服务器生成<code>SESSION</code>信息后也需要同步到<code>A</code>，这样每个服务器之间都包含全部的<code>SESSION</code></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>大部分应用服务器都提供了<code>SESSION</code>复制的功能来实现集群</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><code>SESSION</code>需要网络传输进行同步，其会占用带宽，并且存在一定的延迟</li>
<li>一旦某台机器的<code>SESSION</code>信息有所变化，必须同步更新所有服务器<code>SESSION</code>内容</li>
<li>每个服务器都会存储全部的用户信息，性能随着服务器增加急剧下降，而且容易引起广播风暴</li>
</ul>
<h3 id="SESSION-映射"><a href="#SESSION-映射" class="headerlink" title="SESSION 映射"></a>SESSION 映射</h3><p>通过将负载均衡服务器进行修改，通过对返回给用户的<code>SESSION ID</code>或者用户请求的<code>IP</code>地址进行标记，也就是使用第四层传输层中读取网络层的<code>IP</code>或者是在第七层中读取<code>HTTP</code>协议中某些属性来做<code>HASH</code>，保证对于此用户的请求全部落到同一台服务器上</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>实现相对简单</li>
<li>只要分配服务器时均匀，则多台服务器是负载均衡的</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>一旦某台服务器宕机，则会影响落在此服务器请求上的全部用户</li>
<li>负载均衡服务器变为了一个有状态的节点，内存消耗会更大，容灾更麻烦</li>
</ul>
<h3 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h3><p>将数据直接存储到客户端比如<code>Cookie</code>或请求头中，每次请求客户端自动携带数据信息</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>简单，高效</li>
<li>服务端不需要储存标记用户信息</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>安全性较差，对于敏感信息必须加密</li>
<li>每次请求可能携带大量数据，占用外网带宽</li>
<li>数据存储在客户端就会存在泄密、篡改、窃取等隐患</li>
</ul>
<h3 id="后端集中存储"><a href="#后端集中存储" class="headerlink" title="后端集中存储"></a>后端集中存储</h3><p>将<code>SESSION</code>存储在一台单独的服务器中的数据库中，例如<code>Mysql</code>、<code>Oracle</code>、<code>SqlServer</code>、<code>Redis</code>、<code>Mongodb</code>等等，各<code>SERVER</code>服务器需要用户信息时携带<code>SESSION ID</code>对于集中存储服务器进行请求，进而获取用户信息</p>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul>
<li>没有安全隐患</li>
<li>可以方便的水平拓展</li>
<li><code>SERVER</code>服务器重启不会造成<code>SESSION</code>丢失</li>
</ul>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>每次请求都增加了一次对于存储服务器的网络请求</li>
<li>会对集中存储服务器存在大量请求，数据库压力比较大</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/5caed857dc3e">https://www.jianshu.com/p/5caed857dc3e</a></li>
<li><a href="https://www.cnblogs.com/study-everyday/p/7853145.html">https://www.cnblogs.com/study-everyday/p/7853145.html</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/%E5%88%86%E5%B8%83%E5%BC%8FSESSION%E4%B8%80%E8%87%B4%E6%80%A7">https://blog.touchczy.top/#/Browser/%E5%88%86%E5%B8%83%E5%BC%8FSESSION%E4%B8%80%E8%87%B4%E6%80%A7</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS加密传入过程</title>
    <url>/eternallycyf/HTTPS%E5%8A%A0%E5%AF%86%E4%BC%A0%E5%85%A5%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h1><p>在数字加密算法中，可划分为对称加密和非对称加密。</p>
<h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密算法中对于数据的加密与解密使用同一密钥，即使用相同的密码对内容进行加密解密。</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">内容 + 密钥 </span>=<span class="string"> 密文</span></span><br><span class="line"><span class="string">密文 - 密钥 = 原文</span></span><br></pre></td></tr></table></figure>

<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>加解密速度快，效率高，适合一对一的信息加密传输</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>数据传输前必须协商好密钥，如果任一方密钥被泄漏，那么加密信息就变得不安全了；不适合一对多的情况，若多人共享同一密钥，则增加了密钥泄漏的风险且不能提供抗抵赖性，若每两人之间使用一个密钥，则会使双方拥有过多密钥，难以管理密钥。</p>
<h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><ul>
<li><code>DES(Data Encryption Standard)</code>：数据加密标准，是一个分组算法，它以<code>64</code>位分组对数据进行加解密。</li>
<li><code>3DES</code>：原理和<code>DES</code>几乎是一样的，只是使用<code>3</code>个密钥，对相同的数据执行三次加密，增强加密强度。</li>
<li><code>AES(Advanced Encryption Standard)</code>：高级数据加密标准，<code>AES</code>算法可以有效抵制针对<code>DES</code>的攻击算法</li>
<li>此外还有<code>Blowfish</code>、<code>IDEA</code>、<code>RC4</code>、<code>RC5</code>、<code>RC6</code>等算法</li>
</ul>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密算法需要两个密钥：公开密钥和私有密钥，私钥不能被其他任何人知道，公钥则可以随意公开。对于数据他们可以相互加解密，公钥对数据进行加密，只有用对应的私钥才能解密；私钥对数据进行加密，只有用对应的公钥才能解密。公钥加密，私钥解密；私钥数字签名，公钥验证。<br>对于公钥加密的内容，只有私钥能够解开，只要自己的私钥没有泄漏，那么数据传输就是安全的，其他人截获了密文也无法解密其中内容。<br>对于私钥加密的内容，同样也只有公钥能解开，但是公钥是已经分发出去了，任何人都可以解密私钥内容，其应用场景在于验证数字签名，也就是验证此消息是否由我发送而不是其他人发送，我将要发送的内容进行<code>HASH</code>，然后将<code>HASH</code>的摘要信息使用我的私钥进行加密作为数字签名，当接收者使用公钥解开我的数字签名后再使用同样的<code>HASH</code>算法将内容<code>HASH</code>验证内容由我发送且数据并未被篡改。</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>安全性更高，保护通信安全方面有着绝对优势</p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>加解密速度要远远慢于对称加密，加密算法极其复杂，安全性依赖算法与密钥</p>
<h3 id="常用算法-1"><a href="#常用算法-1" class="headerlink" title="常用算法"></a>常用算法</h3><ul>
<li><code>RSA</code>：是目前最有影响力和最常用的非对称加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被<code>ISO</code>推荐为公钥数据加密标准。</li>
<li>此外还有<code>ECC</code>、<code>Diffie-Hellman</code>、<code>El Gamal</code>、<code>DSA</code>等算法</li>
</ul>
<h2 id="HASH算法"><a href="#HASH算法" class="headerlink" title="HASH算法"></a>HASH算法</h2><p><code>HASH</code>算法是一种消息摘要算法，不是一种加密算法，但由于其单向运算，具有不可逆性，成为加密算法中的一个构成部分，完整的加密机制不能仅依赖<code>HASH</code>算法。<code>HASH</code>也称散列，加密性强的散列一定是不可逆的，这就意味着通过散列结果，无法推出任何部分的原始信息。任何输入信息的变化，哪怕仅一位，都将导致散列结果的明显变化，这称之为雪崩效应。散列还应该是防冲突的，即找不出具有相同散列结果的两条信息。具有这些特性的散列结果就可以用于验证信息是否被修改。  </p>
<h3 id="常用算法-2"><a href="#常用算法-2" class="headerlink" title="常用算法"></a>常用算法</h3><p><code>MD5</code>、<code>SHA</code>、<code>MAC</code>、<code>CRC</code>、<code>SM3</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">https://blog.touchczy.top/#/Browser/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8E%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS加密传入过程</title>
    <url>/eternallycyf/HTTPS%E5%8A%A0%E5%AF%86%E4%BC%A0%E5%85%A5%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="HTTPS加密传输过程"><a href="#HTTPS加密传输过程" class="headerlink" title="HTTPS加密传输过程"></a>HTTPS加密传输过程</h1><p><code>HTTPS</code>全称<code>Hyper Text Transfer Protocol over SecureSocket Layer</code>，是以安全为目标的<code>HTTP</code>通道，在<code>HTTP</code>的基础上通过传输加密和身份认证保证了传输过程的安全性。<code>HTTPS</code>在<code>HTTP</code>的基础下加入<code>SSL</code>层，<code>HTTPS</code>的安全基础是<code>SSL</code>，因此加密的详细内容就需要<code>SSL</code>。</p>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><code>HTTP</code>是应用层协议，默认运行在<code>80</code>端口，是一种不安全的传输协议，经其传输的数据都是未加密的明文数据，可以被中间人攻击，获取到你的网络传输数据，这也就是尽量不要使用公共场所<code>WIFI</code>的原因。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p><code>HTTPS</code>是应用层协议，默认运行在<code>443</code>端口，是一种安全的传输协议，通过在<code>HTTP</code>层与运输层的<code>TCP</code>直接加入一个加密/身份验证层来保证安全传输。</p>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p><code>SSL</code>安全套接层<code>Secure Sockets Layer</code>，位于<code>TCP/IP</code>协议与各种应用层协议之间，为数据通讯提供安全支持。<code>SSL</code>协议可分为两层：<br><code>SSL</code>记录协议<code>SSL Record Protocol</code>：它建立在可靠的传输协议如<code>TCP</code>之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。<br><code>SSL</code>握手协议<code>SSL Handshake Protocol</code>：它建立在<code>SSL</code>记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>
<h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><p><code>TLS</code>传输层安全性协议<code>Transport Layer Security</code>用于在两个通信应用程序之间提供保密性和数据完整性，其由<code>TLS</code>记录协议和<code>TLS</code>握手协议组成。<code>TLS1.0</code>即为<code>SSL3.0</code>的标准化版本，<code>SSL</code>最初由网景<code>Netscape</code>提出研发，在<code>SSL3.0</code>时由国际互联网工程任务组<code>IETF</code>进行了标准化并添加了少量机制，并更名为<code>TLS1.0</code>。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>简单来说对称加密的加密密钥和解密密钥是相同的，对称加密的效率要比非对称加密高。</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>简单来说非对称加密的加密密钥与解密密钥是不同的，需要一把公钥与一把私钥，私钥不能被其他任何人知道，公钥则可以随意公开。公钥加密，私钥解密；私钥数字签名，公钥验证。</p>
<h3 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h3><p>由于公钥是放在服务器的，在建立连接的过程中将公钥传输到用户，但是如何避免中间人攻击，即在传输公钥的过程中避免劫持，于是引入第三方认证权威机构<code>CA</code>，大多数操作系统的<code>CA</code>证书是默认安装的，<code>CA</code>也拥有一个公钥和私钥。任何人都可以得到<code>CA</code>的证书，其包含公钥，用以验证它所签发的证书。<code>CA</code>为服务申请者颁发证书，在<code>CA</code>判明申请者的身份后，便为他分配一个公钥，并且<code>CA</code>将该公钥与申请者的身份信息绑在一起，并为之签字后，便形成证书发给申请者。如果一个用户想鉴别一个证书的真伪，他就用<code>CA</code>的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。证书实际是由证书签证机关<code>CA</code>签发的对用户的公钥的认证。</p>
<h2 id="传输过程"><a href="#传输过程" class="headerlink" title="传输过程"></a>传输过程</h2><ol>
<li>首先<code>TCP</code>三次握手建立链接，这是数据传输基础，在此之上开始<code>SSL</code></li>
<li>客户端首先发送<code>Client Hello</code>开始<code>SSL</code>通信，报文中包含客户端支持的<code>SSL</code>版本、随机值<code>Random1</code>、加密算法以及密钥长度等。</li>
<li>服务器发送<code>Server Hello</code>，和客户端一样，在报文中包含<code>SSL</code>版本、随机值<code>Random2</code>以及加密组件，此后服务端将证书也发送到客户端。</li>
<li>此时客户端需要对服务端发送的证书进行验证，通过操作系统内置的<code>CA</code>证书，将服务器发送的证书的数字签名进行解密，并将证书的公钥进行相同算法的<code>HASH</code>与解密的数字签名解密的内容进行对比，验证证书是否合法有效，是否被劫持更换。</li>
<li>客户端验证证书合法，然后生成一个随机值<code>Random3</code>，用公钥对<code>Random3</code>进行加密，生成<code>Pre-Master Key</code>，客户端以<code>Client Key Exchange</code>报文将<code>Pre-Master Key</code>发送到服务端，此后发送<code>Change Cipher Spec</code>报文表示此后数据传输进行加密传输。</li>
<li>服务端将<code>Pre-Master Key</code>用自己的私钥解密为<code>Random3</code>,服务端发送<code>Change Cipher Spec</code>报文表示此后数据传输进行加密传输。</li>
<li>此时客户端与服务端都拥有三个随机字符串，且<code>Random3</code>是密文传输的，是安全状态的，此时则可以使用这三个字符串进行对称加密传输。由于非对称加密慢，不能每次传输数据都进行非对称加密，所以使用非对称加密将密钥协商好然后使用对称加密进行数据传输。</li>
<li>此时便正常进行<code>HTTP</code>数据传输，但是由于<code>SSL</code>加密的作用，此时的<code>HTTP</code>传输便是安全的，此为<code>HTTPS</code>的传输过程，其中<code>2</code>、<code>3</code>、<code>5</code>、<code>6</code>也被称为<code>SSL</code>四次握手。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/HTTPS%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B">https://blog.touchczy.top/#/Browser/HTTPS%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B</a></li>
<li><a href="https://www.cnblogs.com/yangtianle/p/11202574.html">https://www.cnblogs.com/yangtianle/p/11202574.html</a></li>
<li><a href="https://www.cnblogs.com/liyulong1982/p/6106132.html">https://www.cnblogs.com/liyulong1982/p/6106132.html</a></li>
<li><a href="https://blog.csdn.net/lyztyycode/article/details/81259284">https://blog.csdn.net/lyztyycode/article/details/81259284</a></li>
<li><a href="https://blog.csdn.net/lihuang319/article/details/79970774">https://blog.csdn.net/lihuang319/article/details/79970774</a></li>
<li><a href="https://blog.csdn.net/qq_32998153/article/details/80022489">https://blog.csdn.net/qq_32998153/article/details/80022489</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS挟持攻击</title>
    <url>/eternallycyf/CSS%E6%8C%9F%E6%8C%81%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="CSS劫持攻击"><a href="#CSS劫持攻击" class="headerlink" title="CSS劫持攻击"></a>CSS劫持攻击</h1><p><code>CSS</code>劫持是一种并不很受重视的劫持方式，但是其也有一定的危害，且由于其并不一定需要依赖<code>JavaScript</code>，这使得此种攻击方式更容易实现。</p>
<h2 id="ClickJacking点击劫持"><a href="#ClickJacking点击劫持" class="headerlink" title="ClickJacking点击劫持"></a>ClickJacking点击劫持</h2><p>当访问某网站时，利用<code>CSS</code>将攻击者实际想让你点击的页面进行透明化隐藏，然后在页面后显示 一些东西诱导让你点击，点击后则会在用户毫不知情的情况下做了某些操作，这就是点击劫持<code>ClickJacking</code>。</p>
<h3 id="iframe覆盖"><a href="#iframe覆盖" class="headerlink" title="iframe覆盖"></a>iframe覆盖</h3><p>假如现在我们有个贴吧，想让人关注，可以构造一个钓鱼页面，诱导用户点击，实际上攻击者想要用户点击的关注页面是个透明的，用户如果在网页端登录了贴吧，就会在毫不知情的情况下关注了贴吧，这属于危害较小的情况，若是搭配一些表单诱导用户在页面输入某些敏感信息甚至可以构成财产损失的情况。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ClickJacking点击劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="css">         <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">          <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>:none;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">opacity</span>:<span class="number">0.2</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">          <span class="attribute">z-index</span>:<span class="number">2</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">          <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="css">          <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">          <span class="attribute">top</span>: <span class="number">335px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">left</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 例子中的按钮位置是写定的，在不同分辨率下并不一定合适，应该动态确定按钮位置，但是作为一个Demo就不作过多操作了 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>那些不能说的秘密<span class="tag">&lt;<span class="name">button</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://tieba.baidu.com/f?kw=%E6%96%97%E7%A0%B4%E8%8B%8D%E7%A9%B9%E5%8A%A8%E6%BC%AB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p><code>X-FRAME-OPTIONS</code>是目前最可靠的方法。<br><code>X-FRAME-OPTIONS</code>是微软提出的一个<code>HTTP</code>头，专门用来防御利用<code>iframe</code>嵌套的点击劫持攻击。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">DENY <span class="regexp">//</span> 拒绝任何域加载</span><br><span class="line">SAMEORIGIN <span class="regexp">//</span> 允许同源域下加载</span><br><span class="line">ALLOW-FROM <span class="regexp">//</span> 可以定义允许frame加载的页面地址</span><br></pre></td></tr></table></figure>

<h2 id="CSS劫持流量"><a href="#CSS劫持流量" class="headerlink" title="CSS劫持流量"></a>CSS劫持流量</h2><p>关于诱导用户点击进入网站的操作，利用<code>CSS</code>劫持也不失为一个好的思路，无论是论坛，还是邮件都有一个富文本编辑器，如果网站并未注意此种攻击方式并特殊处理，便很容易被利用。<br>将富文本插入一个链接，在正常情况下应该是<code>&lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>，假如我们为其赋予一个样式，或者将其内部包裹一个字体的样式，将样式设置为<code>display: block;z-index: 100000;position: fixed;top: 0;left: 0;width: 1000000px;height: 100000px;</code>,也是就是让链接作为块级元素充满整个屏幕，则用户无论点击页面中的任何地方都会跳转到你指定的页面，这就将流量劫持到了你的页面，若用户并未注意到<code>url</code>的改变，还可以在跳转的新页面进行钓鱼，对于这种攻击方式通常可以采用<code>CSS</code>隔离的方式解决，例如<code>css module</code>、<code>shadow dom</code>，<code>namespace</code>等。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/CSS%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB">https://blog.touchczy.top/#/Browser/CSS%E5%8A%AB%E6%8C%81%E6%94%BB%E5%87%BB</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议概述</title>
    <url>/eternallycyf/HTTP%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h1><p><code>HTTP</code>超文本传输协议，基于<code>TCP/IP</code>通信协议传输数据。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><code>HTTP</code>是无连接的：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>
<li><code>HTTP</code>是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过<code>HTTP</code>发送，在<code>HTTP</code>中使用<code>Content-Type</code>来表明资源媒体类型。</li>
<li><code>HTTP</code>是无状态的：<code>HTTP</code>协议是无状态协议，指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>
</ul>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p><code>HTTP1.0</code>定义了三种请求方法：<code>GET</code>、<code>POST</code>、<code>HEAD</code>方法。<br><code>HTTP1.1</code>新增了六种请求方法：<code>OPTIONS</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>TRACE</code>和<code>CONNECT</code>方法。</p>
<ul>
<li><code>GET</code>: 请求指定的页面信息，并返回实体主体。由于各浏览器对于<code>URL</code>的长度都有限制，一般使用不超过<code>4K</code>。</li>
<li><code>POST</code>: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中，<code>POST</code> 请求可能会导致新的资源的建立和/或已有资源的修改，其请求携带的最大资源大小由服务器设定。</li>
<li><code>HEAD</code>: 类似于<code>GET</code>请求，只不过返回的响应中没有具体的内容，用于获取报头。</li>
<li><code>PUT</code>: 从客户端向服务器传送的数据取代指定的文档的内容。</li>
<li><code>DELETE</code>: 请求服务器删除指定的页面。</li>
<li><code>CONNECT</code>: 可以开启一个客户端与所请求资源之间的双向沟通的通道，它可以用来创建隧道<code>tunnel</code>。</li>
<li><code>OPTIONS</code>: 用于获取目的资源所支持的通信选项。</li>
<li><code>TRACE</code>: 实现沿通向目标资源的路径的消息环回<code>loop-back</code>测试 ，提供了一种实用的<code>debug</code> 机制。</li>
<li><code>PATCH</code>: 是对<code>PUT</code>方法的补充，用来对已知资源进行局部更新 。</li>
</ul>
<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><ul>
<li><code>Accept</code>: 指定客户端能够接收的内容类型。</li>
<li><code>Accept-Charset</code>: 浏览器可以接受的字符编码集。</li>
<li><code>Accept-Encoding</code>: 指定浏览器可以支持的<code>web</code>服务器返回内容压缩编码类型。</li>
<li><code>Accept-Language</code>: 浏览器可接受的语言。</li>
<li><code>Accept-Ranges</code>: 可以请求网页实体的一个或者多个子范围字段。</li>
<li><code>Authorization</code>: <code>HTTP</code>授权的授权证书。</li>
<li><code>Cache-Control</code>: 指定请求和响应遵循的缓存机制。</li>
<li><code>Connection</code>: 表示是否需要持久连接。</li>
<li><code>Cookie</code>: HTTP请求发送时，会把保存在该请求域名下的所有<code>cookie</code>值一起发送给<code>web</code>服务器。</li>
<li><code>Content-Length</code>: 请求的内容长度。</li>
<li><code>Content-Type</code>: 请求的与实体对应的<code>MIME</code>信息。</li>
<li><code>Date</code>: 请求发送的日期和时间。</li>
<li><code>Expect</code>: 请求的特定的服务器行为。</li>
<li><code>From</code>: 发出请求的用户的<code>Email</code>。</li>
<li><code>Host</code>: 指定请求的服务器的域名和端口号。</li>
<li><code>If-Match</code>: <code>HTTP</code>请求报头使得所述请求为条件。对于<code>GET</code>和<code>HEAD</code>方法，服务器将只在与请求的资源匹配时发回请求的资源<code>ETags</code>。对于<code>PUT</code>和其他非安全方法，在这种情况下它只会上传资源。</li>
<li><code>If-Modified-Since</code>: 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回<code>304</code>代码。</li>
<li><code>If-None-Match</code>: 如果内容未改变返回<code>304</code>代码，参数为服务器先前发送的<code>Etag</code>，与服务器回应的<code>Etag</code>比较判断是否改变。</li>
<li><code>If-Range</code>: 如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体，参数也为<code>Etag</code>。</li>
<li><code>If-Unmodified-Since</code>: 只在实体在指定时间之后未被修改才请求成功。</li>
<li><code>Max-Forwards</code>: 限制信息通过代理和网关传送的时间。</li>
<li><code>Pragma</code>: 用来包含实现特定的指令。</li>
<li><code>Proxy-Authorization</code>: 包含用于向代理服务器认证用户代理的凭证，通常在服务器响应<code>407</code> <code>Proxy Authentication Required</code>状态和<code>Proxy-Authenticate</code>标题后。</li>
<li><code>Range</code>: 只请求实体的一部分，指定范围</li>
<li><code>Referer</code>: 先前网页的地址，当前请求网页紧随其后，即来路。</li>
<li><code>TE</code>: 客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</li>
<li><code>Upgrade</code>: 向服务器指定某种传输协议以便服务器进行转换(如果支持)。</li>
<li><code>User-Agent</code>: <code>User-Agent</code>的内容包含发出请求的用户信息。</li>
<li><code>Via</code>: 通知中间网关或代理服务器地址，通信协议。</li>
<li><code>Warning</code>: 关于消息实体的警告信息。</li>
<li><code>X-Forwarded-For</code>: <code>XFF</code>是用于通过<code>HTTP</code>代理或负载平衡器识别连接到<code>web</code>服务器的客户端的发起<code>IP</code>地址的事实上的标准报头。</li>
<li><code>X-Forwarded-Host</code>: <code>XFH</code>是用于识别由客户机在所要求的原始主机一个事实上的标准报头<code>Host</code>的<code>HTTP</code>请求报头。</li>
<li><code>X-Forwarded-Proto</code>: <code>XFP</code>用于识别协议<code>HTTP</code>或<code>HTTPS</code>，其中使用的客户端连接到代理或负载平衡器一个事实上的标准报头。</li>
</ul>
<h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul>
<li><code>Accept-Ranges</code>: 表明服务器是否支持指定范围请求及哪种类型的分段请求。</li>
<li><code>Age</code>: 从原始服务器到代理缓存形成的估算时间。</li>
<li><code>Allow</code>: 对某网络资源的有效的请求行为，不允许则返回<code>405</code>。</li>
<li><code>Cache-Control</code>: 告诉所有的缓存机制是否可以缓存及哪种类型。</li>
<li><code>Content-Encoding</code>: <code>web</code>服务器支持的返回内容压缩编码类型。</li>
<li><code>Content-Language</code>: 响应体的语言。</li>
<li><code>Content-Length</code>: 响应体的长度。</li>
<li><code>Content-Location</code>: 请求资源可替代的备用的另一地址。</li>
<li><code>Content-MD5</code>: 返回资源的<code>MD5</code>校验值。</li>
<li><code>Content-Range</code>: 在整个返回体中本部分的字节位置。</li>
<li><code>Content-Type</code>: 返回内容的<code>MIME</code>类型。</li>
<li><code>Date</code>: 原始服务器消息发出的时间。</li>
<li><code>ETag</code>: 请求变量的实体标签的当前值。</li>
<li><code>Expires</code>: 响应过期的日期和时间。</li>
<li><code>Last-Modified</code>: 请求资源的最后修改时间。</li>
<li><code>Location</code>: 用来重定向接收方到非请求<code>URL</code>的位置来完成请求或标识新的资源。</li>
<li><code>Pragma</code>: 包括实现特定的指令，它可应用到响应链上的任何接收方。</li>
<li><code>Proxy-Authenticate</code>: 它指出认证方案和可应用到代理的该<code>URL</code>上的参数。</li>
<li><code>refresh</code>: 应用于重定向或一个新的资源被创造，在5秒之后重定向。</li>
<li><code>Retry-After</code>: 如果实体暂时不可取，通知客户端在指定时间之后再次尝试。</li>
<li><code>Server</code>: <code>web</code>服务器软件名称。</li>
<li><code>Set-Cookie</code>: 设置<code>Http Cookie</code>。</li>
<li><code>Trailer</code>: 指出头域在分块传输编码的尾部存在。</li>
<li><code>Transfer-Encoding</code>: 文件传输编码。</li>
<li><code>Vary</code>: 告诉下游代理是使用缓存响应还是从原始服务器请求。</li>
<li><code>Via</code>: 告知代理客户端响应是通过哪里发送的。</li>
<li><code>Warning</code>: 警告实体可能存在的问题。</li>
<li><code>WWW-Authenticate</code>: 表明客户端请求实体应该使用的授权方案。</li>
<li><code>X-Frame-Options</code>: 可以被用来指示一个浏览器是否应该被允许在一个以呈现页面<code>&lt;frame&gt;</code>，<code>&lt;iframe&gt;</code>或<code>&lt;object&gt;</code>。通过确保其内容未嵌入其他网站，网站可以使用此功能来避免点击劫持攻击。</li>
<li><code>X-XSS-Protection</code>: 可在检测到反射的跨站点脚本<code>XSS</code>攻击时阻止页面加载。</li>
</ul>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><h3 id="五种类型"><a href="#五种类型" class="headerlink" title="五种类型"></a>五种类型</h3><ul>
<li><code>1xx</code>: 信息，服务器收到请求，需要请求者继续执行操作。</li>
<li><code>2xx</code>: 成功，操作被成功接收并处理。</li>
<li><code>3xx</code>: 重定向，需要进一步的操作以完成请求。</li>
<li><code>4xx</code>: 客户端错误，请求包含语法错误或无法完成请求。</li>
<li><code>5xx</code>: 服务器错误，服务器在处理请求的过程中发生了错误。</li>
</ul>
<h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><ul>
<li><code>100</code> <code>Continue</code>: 继续，客户端应继续其请求。</li>
<li><code>101</code> <code>Switching Protocols</code>:  切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到<code>HTTP</code>的新版本协议。</li>
<li><code>200</code> <code>OK</code>: 请求成功。一般用于<code>GET</code>与<code>POST</code>请求。</li>
<li><code>201</code> <code>Created</code>: 已创建。成功请求并创建了新的资源。</li>
<li><code>202</code> <code>Accepted</code>: 已接受。已经接受请求，但未处理完成。</li>
<li><code>203</code> <code>Non-Authoritative Information</code>:    非授权信息。请求成功。但返回的<code>meta</code>信息不在原始的服务器，而是一个副本。</li>
<li><code>204</code> <code>No Content</code>: 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</li>
<li><code>205</code> <code>Reset Content</code>: 重置内容。服务器处理成功，用户终端应重置文档视图。可通过此返回码清除浏览器的表单域。</li>
<li><code>206</code> <code>Partial Content</code>: 部分内容。服务器成功处理了部分<code>GET</code>请求。</li>
<li><code>300</code> <code>Multiple Choices</code>: 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端选择。</li>
<li><code>301</code> <code>Moved Permanently</code>: 永久移动。请求的资源已被永久的移动到新<code>URI</code>，返回信息会包括新的<code>URI</code>，浏览器会自动定向到新<code>URI</code>。今后任何新的请求都应使用新的<code>URI</code>代替。</li>
<li><code>302</code> <code>Found</code>: 临时移动，与<code>301</code>类似，但资源只是临时被移动，客户端应继续使用原有<code>URI</code>。</li>
<li><code>303</code> <code>See Other</code>: 查看其它地址。与<code>301</code>类似。使用<code>GET</code>和<code>POST</code>请求查看。</li>
<li><code>304</code> <code>Not Modified</code>: 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</li>
<li><code>305</code> <code>Use Proxy</code>: 使用代理，所请求的资源必须通过代理访问。</li>
<li><code>306</code> <code>Unused</code>: 已经被废弃的<code>HTTP</code>状态码。</li>
<li><code>307</code> <code>Temporary Redirect</code>: 临时重定向，与<code>302</code>类似。使用<code>GET</code>请求重定向。</li>
<li><code>400</code> <code>Bad Request</code>: 客户端请求的语法错误，服务器无法理解。</li>
<li><code>401</code> <code>Unauthorized</code>: 请求要求用户的身份认证。</li>
<li><code>402</code> <code>Payment Required</code>: 保留，将来使用。</li>
<li><code>403</code> <code>Forbidden</code>: 服务器理解请求客户端的请求，但是拒绝执行此请求。</li>
<li><code>404</code> <code>Not Found</code>: 服务器无法根据客户端的请求找到资源。</li>
<li><code>405</code> <code>Method Not Allowed</code>: 客户端请求中的方法被禁止。</li>
<li><code>406</code> <code>Not Acceptable</code>: 服务器无法根据客户端请求的内容特性完成请求。</li>
<li><code>407</code> <code>Proxy Authentication Required</code>: 请求要求代理的身份认证，与<code>401</code>类似，但请求者应当使用代理进行授权。</li>
<li><code>408</code> <code>Request Time-out</code>: 服务器等待客户端发送的请求时间过长，超时。</li>
<li><code>409</code> <code>Conflict</code>: 服务器完成客户端的<code>PUT</code> 请求时可能返回此代码，服务器处理请求时发生了冲突。</li>
<li><code>410</code> <code>Gone</code>: 客户端请求的资源已经不存在。<code>410</code>不同于<code>404</code>，如果资源以前有现在被永久删除了可使用<code>410</code>代码，网站设计人员可通过<code>301</code>代码指定资源的新位置。</li>
<li><code>411</code> <code>Length Required</code>: 服务器无法处理客户端发送的不带<code>Content-Length</code>的请求信息。</li>
<li><code>412</code> <code>Precondition Failed</code>: 客户端请求信息的先决条件错误。</li>
<li><code>413</code> <code>Request Entity Too Large</code>: 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个<code>Retry-After</code>的响应信息。</li>
<li><code>414</code> <code>Request-URI Too Large</code>: 请求的<code>URI</code>过长，服务器无法处理。</li>
<li><code>415</code> <code>Unsupported Media Type</code>: 服务器无法处理请求附带的媒体格式。</li>
<li><code>416</code> <code>Requested range not satisfiable</code>: 客户端请求的范围无效。</li>
<li><code>417</code> <code>Expectation Failed</code>: 服务器无法满足<code>Expect</code>的请求头信息。</li>
<li><code>500</code> <code>Internal Server Error</code>: 服务器内部错误，无法完成请求。</li>
<li><code>501</code> <code>Not Implemented</code>: 服务器不支持请求的功能，无法完成请求。</li>
<li><code>502</code> <code>Bad Gateway</code>:  作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</li>
<li><code>503</code> <code>Service Unavailable</code>:  由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的<code>Retry-After</code>头信息中</li>
<li><code>504</code> <code>Gateway Time-out</code>: 充当网关或代理的服务器，未及时从远端服务器获取请求。</li>
<li><code>505</code> <code>HTTP Version not supported</code>: 服务器不支持请求的<code>HTTP</code>协议的版本，无法完成处理。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/HTTP%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0">https://blog.touchczy.top/#/Browser/HTTP%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0</a></li>
<li><a href="https://cloud.tencent.com/developer/doc/1117">https://cloud.tencent.com/developer/doc/1117</a></li>
<li><a href="https://www.runoob.com/http/http-tutorial.html">https://www.runoob.com/http/http-tutorial.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>重绘和回流</title>
    <url>/eternallycyf/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/</url>
    <content><![CDATA[<h1 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h1><p>重绘与回流是浏览器渲染的时候进行的操作，当页面内容发生改变的时候，就会触发重绘或者回流</p>
<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如<code>background-color</code>，则就叫称为重绘<code>Repaint</code>，重绘不一定触发回流。</p>
<h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就称为回流<code>Reflow</code>,有些地方也称为重排，可理解为重新布局。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建渲染树，回流一定触发重绘。<br><code>Reflow</code>的成本比<code>Repaint</code>的成本高得多的多。<code>DOM Tree</code>里的每个结点都会有<code>reflow</code>方法，一个结点的<code>reflow</code>很有可能导致子结点，甚至父点以及同级结点的reflow。在一些高性能的电脑上也许还没什么，但是如果<code>reflow</code>发生在手机上，那么这个过程就会卡顿与耗电。 </p>
<h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><ul>
<li>当修改CSS样式的时候</li>
<li>当修改网页的默认字体时</li>
<li>当增加、删除、修改<code>DOM</code>结点时</li>
<li>当<code>Resize</code>窗口的时候，或是滚动的时候</li>
<li>当移动<code>DOM</code>的位置，或是做个动画的时候</li>
</ul>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="浏览器的优化"><a href="#浏览器的优化" class="headerlink" title="浏览器的优化"></a>浏览器的优化</h3><p>浏览器本身携带一些优化方式，浏览器会把回流和重绘的操作积攒一批，当操作达到一定数量或者到达时间阈值，然后做一次<code>reflow</code>，称为异步<code>reflow</code>或增量异步<code>reflow</code>。但是有些情况浏览器是不会这么做的，例如<code>resize</code>窗口，改变了页面默认的字体等等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p>
<h3 id="最小化操作"><a href="#最小化操作" class="headerlink" title="最小化操作"></a>最小化操作</h3><p>由于重绘和回流可能代价比较昂贵，因此最好就是可以减少它的发生次数，为了减少发生次数，我们可以合并多次对<code>DOM</code>和样式的修改，然后一次处理掉，或者将样式事先设计好，动态去改变<code>class</code>。</p>
<h3 id="离线修改DOM"><a href="#离线修改DOM" class="headerlink" title="离线修改DOM"></a>离线修改DOM</h3><p>使用<code>documentFragment</code>对象在内存里操作<code>DOM</code>，在内存中的<code>DOM</code>修改就是让元素脱离文档流，当然是不会触发重绘的，将对<code>DOM</code>的所有修改批量完成，想怎么改就怎么改，然后将节点再放入文档流中，只触发一次回流。</p>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>对于复杂动画效果，由于会经常的非常频繁的引起回流重绘，可以使用绝对定位，让它脱离文档流，否则会引起父元素以及后续元素频繁的回流。</p>
<h3 id="避免多层内联样式"><a href="#避免多层内联样式" class="headerlink" title="避免多层内联样式"></a>避免多层内联样式</h3><p>通过<code>style</code>属性动态设置样式是在操作一个很小的<code>DOM</code>片段，容易导致多次回流。避免设置多级内联样式，样式应该合并在一个外部类，这样当该元素的<code>class</code>属性可被操控时仅会产生一个<code>reflow</code>。</p>
<h3 id="末端改动"><a href="#末端改动" class="headerlink" title="末端改动"></a>末端改动</h3><p>尽可能在<code>DOM</code>树的最末端或者是层级较低的节点改变<code>class</code>，回流可以自上而下，或自下而上的回流的信息传递给周围的节点。回流是不可避免的，但可以减少其影响。末端节点或者低层级节点的修改可以限制回流的范围，使其影响尽可能少的节点，当然其也有可能引发大面积回流。</p>
<h3 id="平滑度换取速度"><a href="#平滑度换取速度" class="headerlink" title="平滑度换取速度"></a>平滑度换取速度</h3><p><code>Opera</code>还建议我们牺牲平滑度换取速度，其意思是指若可能想每次<code>1</code>像素移动一个动画，但是如果此动画及随后的回流使用了<code>100%</code>的<code>CPU</code>，动画就会看上去是跳动的，因为浏览器正在与更新回流做斗争。动画元素每次移动<code>3</code>像素可能在非常快的机器上看起来平滑度低了，但它不会导致<code>CPU</code>在较慢的机器和移动设备中抖动。</p>
<h3 id="避免TABLE布局"><a href="#避免TABLE布局" class="headerlink" title="避免TABLE布局"></a>避免TABLE布局</h3><p>在布局完全建立之前，<code>table</code>经常需要多个关口，因为<code>table</code>是个很罕见的可以影响在它们之前已经进入的<code>DOM</code>元素的显示的元素。想象一下，因为表格最后一个单元格的内容过宽而导致纵列大小完全改变，这就是为什么所有的浏览器都逐步地不支持<code>table</code>表格的渲染。然而有另外一个原因为什么表格布局是很糟糕的主意，即使一些小的变化将导致表格<code>table</code>中的所有其他节点回流。</p>
<h3 id="CSS3硬件加速"><a href="#CSS3硬件加速" class="headerlink" title="CSS3硬件加速"></a>CSS3硬件加速</h3><p><code>CSS3</code>硬件加速也就是<code>GPU</code>加速，可以<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘，但是对于动画的其它属性，比如<code>background-color</code>这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。但是也会有一些问题，如果为太多元素使用<code>css3</code>硬件加速，会导致内存占用较大，会有性能问题。在<code>GPU</code>渲染字体会导致抗锯齿无效。这是因为<code>GPU</code>和<code>CPU</code>的算法不同。因此如果不在动画结束的时候关闭硬件加速，会产生字体模糊。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在很多浏览器的开发者工具中提供了渲染操作的性能分析，以谷歌浏览器为例，其<code>performance</code>就可以查看各构建过程的性能消耗，在<code>Rendering</code>中可以使用<code>Paint flashing</code>高亮重绘区域、<code>Layout Shift Regions</code>高亮页面进行交互的布局变化、<code>FPS meter</code>显示<code>FPS</code>帧率等操作来进行性能分析测试</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81">https://blog.touchczy.top/#/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81</a></li>
<li><a href="https://www.cnblogs.com/lpl666/p/10545042.html">https://www.cnblogs.com/lpl666/p/10545042.html</a></li>
<li><a href="https://www.cnblogs.com/chenyanlong/p/10551080.html">https://www.cnblogs.com/chenyanlong/p/10551080.html</a></li>
<li><a href="https://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/">https://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/eternallycyf/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><code>SQL</code>注入即是指<code>web</code>应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在<code>web</code>应用程序中事先定义好的查询语句添加额外的<code>SQL</code>语句，从而实现非法操作，获取数据库数据，服务器提权等，很多机构将<code>SQL</code>注入作为第一危险的安全漏洞。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>SQL</code>注入攻击是通过操作输入来修改<code>SQL</code>语句，用以达到执行代码对<code>WEB</code>服务器进行攻击的方法。简单的说就是在<code>post/get</code>表单、输入域名或页面请求的查询字符串中插入<code>SQL</code>命令，最终使<code>web</code>服务器执行恶意命令的过程。<br><code>SQL</code>注入语句一般都嵌入在普通的<code>HTTP</code>请求中，比较难过滤，攻击者可以不断调整攻击的参数，导致<code>SQL</code>注入变种极多，而且互联网上有很多<code>SQL</code>注入工具，不需要专业知识也能自如运用。</p>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>首先建立简单表，在<code>user_info</code>中写入账号<code>acc</code>与密码<code>pwd</code>，<code>qqq</code>表用来测试<code>drop</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>gbk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qqq` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>gbk;</span><br></pre></td></tr></table></figure>
<p>加入后端查询数据库使用此<code>SQL</code>进行查询，通过用户输入的数据进行拼接，查询结果等于<code>1</code>即作为登录成功，此查询结果明显等于<code>1</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;acc&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;pwd&#x27;</span></span><br></pre></td></tr></table></figure>
<p>假如用户传入的账号为<code>&#39;or 1=1#</code>，后端并未过滤特殊字符，那么这条查询就出现了问题，此结果明显也能查出<code>count(*)</code>结果为<code>1</code>，<code>or</code>操作的<code>1=1</code>永远为<code>true</code>,<code>#</code>后边的内容则被注释掉了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27; AND password = &#x27;</span>pwd<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>甚至我们可以通过注入来<code>drop</code>表，同样通过传入不正常的账号<code>&#39;;DROP TABLE qqq#</code>，执行后<code>qqq</code>表即被<code>drop</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;<span class="keyword">DROP</span> <span class="keyword">TABLE</span> qweqwe#<span class="string">&#x27; AND password = &#x27;</span>pwd<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><h3 id="注入点探测"><a href="#注入点探测" class="headerlink" title="注入点探测"></a>注入点探测</h3><p>首先进行<code>SQL</code>注入点探测，通过适当的分析应用程序，可以判断什么地方存在SQL注入点。通常只要带有输入提交的动态网页，并且动态网页访问数据库，就可能存在SQL注入漏洞。如果此时后端使用拼接查询的方式执行<code>SQL</code>，那么就有可能被注入。  </p>
<h3 id="观察系统行为"><a href="#观察系统行为" class="headerlink" title="观察系统行为"></a>观察系统行为</h3><p>带内注入：观察后端是否将数据库错误信息向前端返回，从显示的错误消息中获取有关数据库的信息；使用<code>UNION ALL</code>将被盗信息与合法信息链接起来进行尝试，两者都是试错法，可以检测到错误。  </p>
<p>盲注入：推理注入，盲注入攻击不会直接从目标数据库中显示数据；相反，攻击者会仔细检查行为中的间接线索。<code>HTTP</code>响应中的详细信息，某些用户输入的空白网页以及数据库响应某些用户输入需要多长时间，这些都可以是线索，具体取决于攻击者的目标。  </p>
<p>带外注入：这种攻击有点复杂，攻击者会制作SQL语句，这些语句在呈现给数据库时会触发数据库系统创建与攻击者控制的外部服务器的连接。以这种方式，攻击者可以收集数据或可能控制数据库的行为。</p>
<h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p> 判断字段长度，判断字段回显位置，判断数据库信息，查找数据库表名，查找数据库表名，查找字段名，再根据这些信息构建注入<code>SQL</code>进行注入，登录后台，数据盗取，进行服务器提权等操作。</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="分级管理"><a href="#分级管理" class="headerlink" title="分级管理"></a>分级管理</h3><p> 对用户进行分级管理，严格控制用户的权限，对于普通用户，禁止给予数据库建立、删除、修改等相关权限，只有系统管理员才具有增、删、改、查的权限。</p>
<h3 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h3><p>拦截正则表达式匹配的非正常的请求，例如<code>\s+(or|xor|and)\s+.*(=|&lt;|&gt;|&#39;|&quot;)</code>、<code>select.+(from|limit)</code>、<code>(?:(union(.*?)select))</code>、<code>(?:(?:current_)user|database|schema|connection_id)\s*\(</code>等等。  </p>
<h3 id="参数过滤"><a href="#参数过滤" class="headerlink" title="参数过滤"></a>参数过滤</h3><p>将提交的敏感字符进行过滤，例如<code>&#39;</code>、<code>&quot;</code>、<code>:</code>、<code>\</code>、<code>;</code>等等。</p>
<h3 id="变量检查"><a href="#变量检查" class="headerlink" title="变量检查"></a>变量检查</h3><p>确定变量的数据类型，例如对传入的<code>id</code>检测为<code>int</code>型，传入邮箱为严格的邮箱格式。</p>
<h3 id="隐藏错误"><a href="#隐藏错误" class="headerlink" title="隐藏错误"></a>隐藏错误</h3><p>避免直接向用户显示数据库错误，攻击者可以使用这些错误消息来获取有关数据库的信息。</p>
<h3 id="预编译语句集"><a href="#预编译语句集" class="headerlink" title="预编译语句集"></a>预编译语句集</h3><p>采用预编译语句集，它内置了处理<code>SQL</code>注入的能力，极大地提高了安全性。</p>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>对访问数据库的<code>Web</code>应用程序使用<code>Web</code>应用程序防火墙<code>WAF</code>，它可以帮助识别<code>SQL</code>注入尝试。</p>
<h3 id="定期检查"><a href="#定期检查" class="headerlink" title="定期检查"></a>定期检查</h3><p>定期测试与数据库交互的<code>Web</code>应用程序，且将数据库更新为最新的可用修补程序，防止旧版本的漏洞利用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/SQL%E6%B3%A8%E5%85%A5">https://blog.touchczy.top/#/Browser/SQL%E6%B3%A8%E5%85%A5</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/eternallycyf/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>跨站请求伪造通常缩写为<code>CSRF</code>或者<code>XSRF</code>，是一种挟制用户在当前已登录的<code>Web</code>应用程序上执行非本意的操作的攻击方法。跟跨网站脚本<code>XSS</code>相比，<code>XSS</code>利用的是用户对指定网站的信任，<code>CSRF</code>利用的是网站对用户浏览器的信任，浏览器对于同一<code>domain</code>下所有请求会自动携带<code>cookie</code>。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li>用户<code>A</code>正常打开网站<code>B</code>，并且成功登录获取<code>cookie</code>。  </li>
<li>用户<code>A</code>未退出网站<code>B</code>，在同一个浏览器中打开新的<code>TAB</code>访问了网站<code>C</code>。  </li>
<li>网站<code>C</code>的页面存有一些攻击性的代码，会发出对于网站B的一个访问请求。  </li>
<li>浏览器收到请求后，在用户不知情的情况下携带<code>cookie</code>访问网站<code>B</code>，导致网站<code>B</code>以用户<code>A</code>的权限处理请求。</li>
</ol>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>小明在某银行有存款，通过<code>GET</code>表单请求<code>http://bank.example/withdraw?uid=1&amp;amount=100&amp;for=2</code>就可以向账户<code>2</code>转账<code>100</code>，当对银行发起这个请求后，首先会验证<code>cookie</code>是否有合法的<code>session</code>才进行数据处理。<br>小黑近期无聊，就自己做了一个网站，利用某些标签允许跨域请求资源的策略，在自己的网站中构造<code>&lt;img src=&quot;http://bank.example/withdraw?uid=1&amp;amount=100&amp;for=2&quot;&gt;</code>，并通过广告、游戏等方式诱导小明点击进入这个网站，此时浏览器会携带<code>cookie</code>访问银行网站。在大部分情况下，这个请求并不会成功被执行，因为他并没有小明的认证信息，但是如果此时恰好小明刚刚访问了银行，此时服务端<code>session</code>尚未过期，这个<code>url</code>就会被正常响应，转账就会被执行。</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>对于敏感操作加入验证码，强制用户与网站进行交互，能很好遏制<code>CSRF</code>攻击。</p>
<h3 id="避免使用GET"><a href="#避免使用GET" class="headerlink" title="避免使用GET"></a>避免使用GET</h3><p><code>GET</code>接口太容易被拿来做<code>CSRF</code>攻击，只要构造一个<code>&lt;img&gt;</code>标签，而<code>&lt;img&gt;</code>标签又是不能过滤的数据。接口最好限制为<code>POST</code>使用，<code>GET</code>则无效，降低攻击风险。当然强制<code>POST</code>只是降低了风险，攻击者只要构造一个<code>&lt;form&gt;</code>就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p>
<h3 id="检查Referer字段"><a href="#检查Referer字段" class="headerlink" title="检查Referer字段"></a>检查Referer字段</h3><p><code>HTTP</code>协议有一个<code>Referer</code>字段，记录了该<code>HTTP</code>请求的来源地址，浏览器限制其改动，最多将其设置为空<code>rel=&quot;noreferrer&quot;</code>，当然如果不是在浏览器中发起<code>HTTP</code>请求是可以随意改动这个字段的。<br>同样以小黑的<code>CSRF</code>攻击为例，假如小黑诱导小明的网站为<code>www.black.com</code>，那么对于其构建的<code>CSRF</code>攻击请求的<code>Referer</code>为<code>www.black.com</code>，而正常情况下应该为<code>http://bank.example</code>域名开头的一个链接，检测其不正确或者为空即拒绝响应。<br>但是这种方法也有一定的局限性，某些旧版本的浏览器比如<code>IE6</code>可以篡改<code>Referer</code>字段，有些用户认为<code>Referer</code>字段会侵犯他们的隐私，从而关闭了浏览器发送<code>Referer</code>，正常访问网站会被误认为为<code>CSRF</code>而拒绝响应。</p>
<h3 id="加入Token验证字段"><a href="#加入Token验证字段" class="headerlink" title="加入Token验证字段"></a>加入Token验证字段</h3><p><code> CSRF</code>攻击之所以能够成功，是因为浏览器自动携带<code>cookie</code>进行请求，该请求中所有的用户验证信息都是存在于<code>cookie</code>中，由此可以完全伪造用户的请求。要抵御<code>CSRF</code>，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于<code>cookie</code>之中。<br>在请求头中加入一个<code>Token</code>字段，浏览器并不会自动携带<code>Token</code>去请求，且<code>Token</code>可以携带一段加密的<code>jwt</code>用作身份认证，这样进行<code>CSRF</code>的时候仅传递了<code>cookie</code>，并不能表明用户身份，网站即拒绝攻击请求。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB">https://blog.touchczy.top/#/Browser/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS跨站脚本攻击</title>
    <url>/eternallycyf/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h1><p>跨站脚本攻击<code>XSS</code>，是最普遍的<code>Web</code>应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li><p>反射型<code>XSS</code>： 攻击者事先制作好攻击链接,需要欺骗用户自己去点击链接才能触发<code>XSS</code>代码，所谓反射型<code>XSS</code>就是将恶意用户输入的<code>js</code>脚本，反射到浏览器执行。</p>
</li>
<li><p>存储型<code>XSS</code>：代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种<code>XSS</code>非常危险，容易造成蠕虫，大量盗窃<code>cookie</code>，也被称为持久型<code>XSS</code>。</p>
</li>
<li><p><code>DOM</code>型<code>XSS</code>：类似于反射型<code>XSS</code>，但这种<code>XSS</code>攻击的实现是通过对<code>DOM</code>树的修改而实现的。</p>
</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当动态页面中插入的内容含有这些特殊字符如<code>&lt;</code>时，用户浏览器会将其误认为是插入了<code>HTML</code>标签，当这些<code>HTML</code>标签引入了一段<code>JavaScript</code>脚本时，这些脚本程序就将会在用户浏览器中执行。当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生<code>XSS</code>漏洞。  </p>
<p>攻击者可以使用户在浏览器中执行其预定义的恶意脚本，劫持用户会话，插入恶意内容、重定向链接、使用恶意软件劫持用户浏览器等等。</p>
<p>基于反射型<code>XSS</code>漏洞，欺骗用户点击以执行<code>js</code>代码，可以盗取<code>cookie</code>等。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接将输入打印到页面，造成XSS</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$XssReflex</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$XssReflex</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造url，点击后就可以执行js代码 --&gt;</span></span><br><span class="line">http://127.0.0.1/xss.php?i=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;run javascript&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于存储型<code>XSS</code>漏洞，将<code>js</code>代码存储于服务器数据库中，服务器直接查询数据库数据显示到页面，即造成<code>XSS</code><br>最经典的存储型<code>XSS</code>漏洞是留言板，当用户A在留言板留言一段<code>JS</code>代码<code>&lt;script&gt;alert(&quot;run javascript&quot;);&lt;/script&gt;</code>,后端未经过滤直接存储到数据库，当正常用户浏览到他的留言后，这段<code>JS</code>代码就会被执行，可以借此来盗取<code>cookie</code>。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">恶意用户A <span class="comment">--&gt; 构造JS代码</span></span><br><span class="line">构造JS代码 <span class="comment">--&gt; 服务器数据库</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户B显示页面</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户C显示页面</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户...显示页面</span></span><br><span class="line">正常用户B显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br><span class="line">正常用户C显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br><span class="line">正常用户...显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br></pre></td></tr></table></figure>

<p>基于<code>DOM</code>的型<code>XSS</code>漏洞类似于反射型<code>XSS</code>，但其变化多端，总之一句话，各种姿势，各种插，只要能执行我的<code>Js</code>  ，利用<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>等标签允许跨域请求资源。<br>经典案例是可以将标签写入到软件的意见反馈中，当管理员查看留言的反馈即触发<code>XSS</code>，传递<code>cookie</code>与后台管理地址后就可以登录到后台了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;js_url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">appendChild(createElement(</span>&#x27;<span class="attr">script</span>&#x27;))<span class="attr">.src</span>=<span class="string">&#x27;js_url&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul>
<li>在用户提交参数前，将提交的字符<code>&lt;</code> 、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code> 、<code>&#39;</code> 、<code>+</code>、<code>/</code>等进行转义，严格控制输出。</li>
<li>将输入转化为小写对比<code>javascript:</code>，若匹配则过滤。</li>
<li>将<code>cookie</code>设置为<code>http-only</code>,<code>js</code>脚本将无法读取到<code>cookie</code>信息。</li>
<li>纯前端渲染，明确<code>innerText</code>、<code>setAttribute</code>、<code>style</code>，将代码与数据分隔开。</li>
<li>避免不可信的数据拼接到字符串中传递给这些<code>API</code>，如<code>DOM</code>中的内联事件监听器，<code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code>等，<code>&lt;a&gt;</code>标签的<code>href</code>属性，<code>JavaScript</code>的<code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code>等，都能把字符串作为代码运行。</li>
<li>对于不受信任的输入，都应该限定一个合理的长度。</li>
<li>严格的<code>CSP</code>,禁止加载外域代码，禁止外域提交，禁止内联脚本执行等较为严格的方式。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98">https://blog.touchczy.top/#/Browser/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">https://en.wikipedia.org/wiki/Cross-site_scripting</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的GitHub-Badge</title>
    <url>/eternallycyf/%E6%9C%89%E8%B6%A3%E7%9A%84GitHub-Badge/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>大家一定在浏览 <code>github</code> 的时候有看到过这样漂亮的徽标</li>
<li>其实他的使用方式也非常简单</li>
<li><img class="inline-img" src="/img/badge.jpg" style="height:300px"/></li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li><a href="https://simpleicons.org/">Simple Icons官网图标列表</a><ul>
<li>这里可以看到各式各样的图标</li>
<li>而他的名字就是后续配置需要的logo名</li>
<li>此外基础配色也最好以它的为准 比较美观</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 字段配置如下</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//shields.io/badge/左边文字-右边文字-右边颜色?logo=图标名称&amp;logoColor=ffffff&amp;style=样式</span></span><br><span class="line"># demo =&gt; github 徽标</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//img.shields.io/badge/-fff?style=flat-square&amp;logo=Github&amp;logoColor=000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此外。还有些细节配置<ul>
<li>徽章实体风格: <code>style= plastic | flat | flag-square | for-the-badge | social</code></li>
<li>外观有不同的效果 自己可以挨个尝试下</li>
</ul>
</li>
<li>其次 <code>badge</code> 后边 也可以直接跟一个 <code>svg</code> 地址 </li>
</ul>
<h2 id="github主页使用"><a href="#github主页使用" class="headerlink" title="github主页使用"></a>github主页使用</h2><ul>
<li>创建一个和自己<code>github</code>名字 同名的仓库</li>
<li>在这个仓库里创建 <code>README.md</code></li>
<li>在这个里面的内容就自动展示在首页啦</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP-Content-Type对照表</title>
    <url>/eternallycyf/HTTP-Content-Type%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="HTTP-Content-Type对照表"><a href="#HTTP-Content-Type对照表" class="headerlink" title="HTTP-Content-Type对照表"></a>HTTP-Content-Type对照表</h2><table>
  <theader
    ><tr>
      <th class="separateColor">文件扩展名</th>
      <th>Content-Type(Mime-Type)</th>
      <th class="separateColor">文件扩展名</th>
      <th>Content-Type(Mime-Type)</th>
    </tr></theader
  >
  <tbody>
    <tr>
      <td class="separateColor">.*（ 二进制流，不知道下载文件类型）</td>
      <td>application/octet-stream</td>
      <td class="separateColor">.tif</td>
      <td>image/tiff</td>
    </tr>
    <tr>
      <td class="separateColor">.001</td>
      <td>application/x-001</td>
      <td class="separateColor">.301</td>
      <td>application/x-301</td>
    </tr>
    <tr>
      <td class="separateColor">.323</td>
      <td>text/h323</td>
      <td class="separateColor">.906</td>
      <td>application/x-906</td>
    </tr>
    <tr>
      <td class="separateColor">.907</td>
      <td>drawing/907</td>
      <td class="separateColor">.a11</td>
      <td>application/x-a11</td>
    </tr>
    <tr>
      <td class="separateColor">.acp</td>
      <td>audio/x-mei-aac</td>
      <td class="separateColor">.ai</td>
      <td>application/postscript</td>
    </tr>
    <tr>
      <td class="separateColor">.aif</td>
      <td>audio/aiff</td>
      <td class="separateColor">.aifc</td>
      <td>audio/aiff</td>
    </tr>
    <tr>
      <td class="separateColor">.aiff</td>
      <td>audio/aiff</td>
      <td class="separateColor">.anv</td>
      <td>application/x-anv</td>
    </tr>
    <tr>
      <td class="separateColor">.asa</td>
      <td>text/asa</td>
      <td class="separateColor">.asf</td>
      <td>video/x-ms-asf</td>
    </tr>
    <tr>
      <td class="separateColor">.asp</td>
      <td>text/asp</td>
      <td class="separateColor">.asx</td>
      <td>video/x-ms-asf</td>
    </tr>
    <tr>
      <td class="separateColor">.au</td>
      <td>audio/basic</td>
      <td class="separateColor">.avi</td>
      <td>video/avi</td>
    </tr>
    <tr>
      <td class="separateColor">.awf</td>
      <td>application/vnd.adobe.workflow</td>
      <td class="separateColor">.biz</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.bmp</td>
      <td>application/x-bmp</td>
      <td class="separateColor">.bot</td>
      <td>application/x-bot</td>
    </tr>
    <tr>
      <td class="separateColor">.c4t</td>
      <td>application/x-c4t</td>
      <td class="separateColor">.c90</td>
      <td>application/x-c90</td>
    </tr>
    <tr>
      <td class="separateColor">.cal</td>
      <td>application/x-cals</td>
      <td class="separateColor">.cat</td>
      <td>application/vnd.ms-pki.seccat</td>
    </tr>
    <tr>
      <td class="separateColor">.cdf</td>
      <td>application/x-netcdf</td>
      <td class="separateColor">.cdr</td>
      <td>application/x-cdr</td>
    </tr>
    <tr>
      <td class="separateColor">.cel</td>
      <td>application/x-cel</td>
      <td class="separateColor">.cer</td>
      <td>application/x-x509-ca-cert</td>
    </tr>
    <tr>
      <td class="separateColor">.cg4</td>
      <td>application/x-g4</td>
      <td class="separateColor">.cgm</td>
      <td>application/x-cgm</td>
    </tr>
    <tr>
      <td class="separateColor">.cit</td>
      <td>application/x-cit</td>
      <td class="separateColor">.class</td>
      <td>java/*</td>
    </tr>
    <tr>
      <td class="separateColor">.cml</td>
      <td>text/xml</td>
      <td class="separateColor">.cmp</td>
      <td>application/x-cmp</td>
    </tr>
    <tr>
      <td class="separateColor">.cmx</td>
      <td>application/x-cmx</td>
      <td class="separateColor">.cot</td>
      <td>application/x-cot</td>
    </tr>
    <tr>
      <td class="separateColor">.crl</td>
      <td>application/pkix-crl</td>
      <td class="separateColor">.crt</td>
      <td>application/x-x509-ca-cert</td>
    </tr>
    <tr>
      <td class="separateColor">.csi</td>
      <td>application/x-csi</td>
      <td class="separateColor">.css</td>
      <td>text/css</td>
    </tr>
    <tr>
      <td class="separateColor">.cut</td>
      <td>application/x-cut</td>
      <td class="separateColor">.dbf</td>
      <td>application/x-dbf</td>
    </tr>
    <tr>
      <td class="separateColor">.dbm</td>
      <td>application/x-dbm</td>
      <td class="separateColor">.dbx</td>
      <td>application/x-dbx</td>
    </tr>
    <tr>
      <td class="separateColor">.dcd</td>
      <td>text/xml</td>
      <td class="separateColor">.dcx</td>
      <td>application/x-dcx</td>
    </tr>
    <tr>
      <td class="separateColor">.der</td>
      <td>application/x-x509-ca-cert</td>
      <td class="separateColor">.dgn</td>
      <td>application/x-dgn</td>
    </tr>
    <tr>
      <td class="separateColor">.dib</td>
      <td>application/x-dib</td>
      <td class="separateColor">.dll</td>
      <td>application/x-msdownload</td>
    </tr>
    <tr>
      <td class="separateColor">.doc</td>
      <td>application/msword</td>
      <td class="separateColor">.dot</td>
      <td>application/msword</td>
    </tr>
    <tr>
      <td class="separateColor">.drw</td>
      <td>application/x-drw</td>
      <td class="separateColor">.dtd</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.dwf</td>
      <td>Model/vnd.dwf</td>
      <td class="separateColor">.dwf</td>
      <td>application/x-dwf</td>
    </tr>
    <tr>
      <td class="separateColor">.dwg</td>
      <td>application/x-dwg</td>
      <td class="separateColor">.dxb</td>
      <td>application/x-dxb</td>
    </tr>
    <tr>
      <td class="separateColor">.dxf</td>
      <td>application/x-dxf</td>
      <td class="separateColor">.edn</td>
      <td>application/vnd.adobe.edn</td>
    </tr>
    <tr>
      <td class="separateColor">.emf</td>
      <td>application/x-emf</td>
      <td class="separateColor">.eml</td>
      <td>message/rfc822</td>
    </tr>
    <tr>
      <td class="separateColor">.ent</td>
      <td>text/xml</td>
      <td class="separateColor">.epi</td>
      <td>application/x-epi</td>
    </tr>
    <tr>
      <td class="separateColor">.eps</td>
      <td>application/x-ps</td>
      <td class="separateColor">.eps</td>
      <td>application/postscript</td>
    </tr>
    <tr>
      <td class="separateColor">.etd</td>
      <td>application/x-ebx</td>
      <td class="separateColor">.exe</td>
      <td>application/x-msdownload</td>
    </tr>
    <tr>
      <td class="separateColor">.fax</td>
      <td>image/fax</td>
      <td class="separateColor">.fdf</td>
      <td>application/vnd.fdf</td>
    </tr>
    <tr>
      <td class="separateColor">.fif</td>
      <td>application/fractals</td>
      <td class="separateColor">.fo</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.frm</td>
      <td>application/x-frm</td>
      <td class="separateColor">.g4</td>
      <td>application/x-g4</td>
    </tr>
    <tr>
      <td class="separateColor">.gbr</td>
      <td>application/x-gbr</td>
      <td class="separateColor">.</td>
      <td>application/x-</td>
    </tr>
    <tr>
      <td class="separateColor">.gif</td>
      <td>image/gif</td>
      <td class="separateColor">.gl2</td>
      <td>application/x-gl2</td>
    </tr>
    <tr>
      <td class="separateColor">.gp4</td>
      <td>application/x-gp4</td>
      <td class="separateColor">.hgl</td>
      <td>application/x-hgl</td>
    </tr>
    <tr>
      <td class="separateColor">.hmr</td>
      <td>application/x-hmr</td>
      <td class="separateColor">.hpg</td>
      <td>application/x-hpgl</td>
    </tr>
    <tr>
      <td class="separateColor">.hpl</td>
      <td>application/x-hpl</td>
      <td class="separateColor">.hqx</td>
      <td>application/mac-binhex40</td>
    </tr>
    <tr>
      <td class="separateColor">.hrf</td>
      <td>application/x-hrf</td>
      <td class="separateColor">.hta</td>
      <td>application/hta</td>
    </tr>
    <tr>
      <td class="separateColor">.htc</td>
      <td>text/x-component</td>
      <td class="separateColor">.htm</td>
      <td>text/html</td>
    </tr>
    <tr>
      <td class="separateColor">.html</td>
      <td>text/html</td>
      <td class="separateColor">.htt</td>
      <td>text/webviewhtml</td>
    </tr>
    <tr>
      <td class="separateColor">.htx</td>
      <td>text/html</td>
      <td class="separateColor">.icb</td>
      <td>application/x-icb</td>
    </tr>
    <tr>
      <td class="separateColor">.ico</td>
      <td>image/x-icon</td>
      <td class="separateColor">.ico</td>
      <td>application/x-ico</td>
    </tr>
    <tr>
      <td class="separateColor">.iff</td>
      <td>application/x-iff</td>
      <td class="separateColor">.ig4</td>
      <td>application/x-g4</td>
    </tr>
    <tr>
      <td class="separateColor">.igs</td>
      <td>application/x-igs</td>
      <td class="separateColor">.iii</td>
      <td>application/x-iphone</td>
    </tr>
    <tr>
      <td class="separateColor">.img</td>
      <td>application/x-img</td>
      <td class="separateColor">.ins</td>
      <td>application/x-internet-signup</td>
    </tr>
    <tr>
      <td class="separateColor">.isp</td>
      <td>application/x-internet-signup</td>
      <td class="separateColor">.IVF</td>
      <td>video/x-ivf</td>
    </tr>
    <tr>
      <td class="separateColor">.java</td>
      <td>java/*</td>
      <td class="separateColor">.jfif</td>
      <td>image/jpeg</td>
    </tr>
    <tr>
      <td class="separateColor">.jpe</td>
      <td>image/jpeg</td>
      <td class="separateColor">.jpe</td>
      <td>application/x-jpe</td>
    </tr>
    <tr>
      <td class="separateColor">.jpeg</td>
      <td>image/jpeg</td>
      <td class="separateColor">.jpg</td>
      <td>image/jpeg</td>
    </tr>
    <tr>
      <td class="separateColor">.jpg</td>
      <td>application/x-jpg</td>
      <td class="separateColor">.js</td>
      <td>application/x-javascript</td>
    </tr>
    <tr>
      <td class="separateColor">.jsp</td>
      <td>text/html</td>
      <td class="separateColor">.la1</td>
      <td>audio/x-liquid-file</td>
    </tr>
    <tr>
      <td class="separateColor">.lar</td>
      <td>application/x-laplayer-reg</td>
      <td class="separateColor">.latex</td>
      <td>application/x-latex</td>
    </tr>
    <tr>
      <td class="separateColor">.lavs</td>
      <td>audio/x-liquid-secure</td>
      <td class="separateColor">.lbm</td>
      <td>application/x-lbm</td>
    </tr>
    <tr>
      <td class="separateColor">.lmsff</td>
      <td>audio/x-la-lms</td>
      <td class="separateColor">.ls</td>
      <td>application/x-javascript</td>
    </tr>
    <tr>
      <td class="separateColor">.ltr</td>
      <td>application/x-ltr</td>
      <td class="separateColor">.m1v</td>
      <td>video/x-mpeg</td>
    </tr>
    <tr>
      <td class="separateColor">.m2v</td>
      <td>video/x-mpeg</td>
      <td class="separateColor">.m3u</td>
      <td>audio/mpegurl</td>
    </tr>
    <tr>
      <td class="separateColor">.m4e</td>
      <td>video/mpeg4</td>
      <td class="separateColor">.mac</td>
      <td>application/x-mac</td>
    </tr>
    <tr>
      <td class="separateColor">.man</td>
      <td>application/x-troff-man</td>
      <td class="separateColor">.math</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.mdb</td>
      <td>application/msaccess</td>
      <td class="separateColor">.mdb</td>
      <td>application/x-mdb</td>
    </tr>
    <tr>
      <td class="separateColor">.mfp</td>
      <td>application/x-shockwave-flash</td>
      <td class="separateColor">.mht</td>
      <td>message/rfc822</td>
    </tr>
    <tr>
      <td class="separateColor">.mhtml</td>
      <td>message/rfc822</td>
      <td class="separateColor">.mi</td>
      <td>application/x-mi</td>
    </tr>
    <tr>
      <td class="separateColor">.mid</td>
      <td>audio/mid</td>
      <td class="separateColor">.midi</td>
      <td>audio/mid</td>
    </tr>
    <tr>
      <td class="separateColor">.mil</td>
      <td>application/x-mil</td>
      <td class="separateColor">.mml</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.mnd</td>
      <td>audio/x-musicnet-download</td>
      <td class="separateColor">.mns</td>
      <td>audio/x-musicnet-stream</td>
    </tr>
    <tr>
      <td class="separateColor">.mocha</td>
      <td>application/x-javascript</td>
      <td class="separateColor">.movie</td>
      <td>video/x-sgi-movie</td>
    </tr>
    <tr>
      <td class="separateColor">.mp1</td>
      <td>audio/mp1</td>
      <td class="separateColor">.mp2</td>
      <td>audio/mp2</td>
    </tr>
    <tr>
      <td class="separateColor">.mp2v</td>
      <td>video/mpeg</td>
      <td class="separateColor">.mp3</td>
      <td>audio/mp3</td>
    </tr>
    <tr>
      <td class="separateColor">.mp4</td>
      <td>video/mpeg4</td>
      <td class="separateColor">.mpa</td>
      <td>video/x-mpg</td>
    </tr>
    <tr>
      <td class="separateColor">.mpd</td>
      <td>application/vnd.ms-project</td>
      <td class="separateColor">.mpe</td>
      <td>video/x-mpeg</td>
    </tr>
    <tr>
      <td class="separateColor">.mpeg</td>
      <td>video/mpg</td>
      <td class="separateColor">.mpg</td>
      <td>video/mpg</td>
    </tr>
    <tr>
      <td class="separateColor">.mpga</td>
      <td>audio/rn-mpeg</td>
      <td class="separateColor">.mpp</td>
      <td>application/vnd.ms-project</td>
    </tr>
    <tr>
      <td class="separateColor">.mps</td>
      <td>video/x-mpeg</td>
      <td class="separateColor">.mpt</td>
      <td>application/vnd.ms-project</td>
    </tr>
    <tr>
      <td class="separateColor">.mpv</td>
      <td>video/mpg</td>
      <td class="separateColor">.mpv2</td>
      <td>video/mpeg</td>
    </tr>
    <tr>
      <td class="separateColor">.mpw</td>
      <td>application/vnd.ms-project</td>
      <td class="separateColor">.mpx</td>
      <td>application/vnd.ms-project</td>
    </tr>
    <tr>
      <td class="separateColor">.mtx</td>
      <td>text/xml</td>
      <td class="separateColor">.mxp</td>
      <td>application/x-mmxp</td>
    </tr>
    <tr>
      <td class="separateColor">.net</td>
      <td>image/pnetvue</td>
      <td class="separateColor">.nrf</td>
      <td>application/x-nrf</td>
    </tr>
    <tr>
      <td class="separateColor">.nws</td>
      <td>message/rfc822</td>
      <td class="separateColor">.odc</td>
      <td>text/x-ms-odc</td>
    </tr>
    <tr>
      <td class="separateColor">.out</td>
      <td>application/x-out</td>
      <td class="separateColor">.p10</td>
      <td>application/pkcs10</td>
    </tr>
    <tr>
      <td class="separateColor">.p12</td>
      <td>application/x-pkcs12</td>
      <td class="separateColor">.p7b</td>
      <td>application/x-pkcs7-certificates</td>
    </tr>
    <tr>
      <td class="separateColor">.p7c</td>
      <td>application/pkcs7-mime</td>
      <td class="separateColor">.p7m</td>
      <td>application/pkcs7-mime</td>
    </tr>
    <tr>
      <td class="separateColor">.p7r</td>
      <td>application/x-pkcs7-certreqresp</td>
      <td class="separateColor">.p7s</td>
      <td>application/pkcs7-signature</td>
    </tr>
    <tr>
      <td class="separateColor">.pc5</td>
      <td>application/x-pc5</td>
      <td class="separateColor">.pci</td>
      <td>application/x-pci</td>
    </tr>
    <tr>
      <td class="separateColor">.pcl</td>
      <td>application/x-pcl</td>
      <td class="separateColor">.pcx</td>
      <td>application/x-pcx</td>
    </tr>
    <tr>
      <td class="separateColor">.pdf</td>
      <td>application/pdf</td>
      <td class="separateColor">.pdf</td>
      <td>application/pdf</td>
    </tr>
    <tr>
      <td class="separateColor">.pdx</td>
      <td>application/vnd.adobe.pdx</td>
      <td class="separateColor">.pfx</td>
      <td>application/x-pkcs12</td>
    </tr>
    <tr>
      <td class="separateColor">.pgl</td>
      <td>application/x-pgl</td>
      <td class="separateColor">.pic</td>
      <td>application/x-pic</td>
    </tr>
    <tr>
      <td class="separateColor">.pko</td>
      <td>application/vnd.ms-pki.pko</td>
      <td class="separateColor">.pl</td>
      <td>application/x-perl</td>
    </tr>
    <tr>
      <td class="separateColor">.plg</td>
      <td>text/html</td>
      <td class="separateColor">.pls</td>
      <td>audio/scpls</td>
    </tr>
    <tr>
      <td class="separateColor">.plt</td>
      <td>application/x-plt</td>
      <td class="separateColor">.png</td>
      <td>image/png</td>
    </tr>
    <tr>
      <td class="separateColor">.png</td>
      <td>application/x-png</td>
      <td class="separateColor">.pot</td>
      <td>application/vnd.ms-powerpoint</td>
    </tr>
    <tr>
      <td class="separateColor">.ppa</td>
      <td>application/vnd.ms-powerpoint</td>
      <td class="separateColor">.ppm</td>
      <td>application/x-ppm</td>
    </tr>
    <tr>
      <td class="separateColor">.pps</td>
      <td>application/vnd.ms-powerpoint</td>
      <td class="separateColor">.ppt</td>
      <td>application/vnd.ms-powerpoint</td>
    </tr>
    <tr>
      <td class="separateColor">.ppt</td>
      <td>application/x-ppt</td>
      <td class="separateColor">.pr</td>
      <td>application/x-pr</td>
    </tr>
    <tr>
      <td class="separateColor">.prf</td>
      <td>application/pics-rules</td>
      <td class="separateColor">.prn</td>
      <td>application/x-prn</td>
    </tr>
    <tr>
      <td class="separateColor">.prt</td>
      <td>application/x-prt</td>
      <td class="separateColor">.ps</td>
      <td>application/x-ps</td>
    </tr>
    <tr>
      <td class="separateColor">.ps</td>
      <td>application/postscript</td>
      <td class="separateColor">.ptn</td>
      <td>application/x-ptn</td>
    </tr>
    <tr>
      <td class="separateColor">.pwz</td>
      <td>application/vnd.ms-powerpoint</td>
      <td class="separateColor">.r3t</td>
      <td>text/vnd.rn-realtext3d</td>
    </tr>
    <tr>
      <td class="separateColor">.ra</td>
      <td>audio/vnd.rn-realaudio</td>
      <td class="separateColor">.ram</td>
      <td>audio/x-pn-realaudio</td>
    </tr>
    <tr>
      <td class="separateColor">.ras</td>
      <td>application/x-ras</td>
      <td class="separateColor">.rat</td>
      <td>application/rat-file</td>
    </tr>
    <tr>
      <td class="separateColor">.rdf</td>
      <td>text/xml</td>
      <td class="separateColor">.rec</td>
      <td>application/vnd.rn-recording</td>
    </tr>
    <tr>
      <td class="separateColor">.red</td>
      <td>application/x-red</td>
      <td class="separateColor">.rgb</td>
      <td>application/x-rgb</td>
    </tr>
    <tr>
      <td class="separateColor">.rjs</td>
      <td>application/vnd.rn-realsystem-rjs</td>
      <td class="separateColor">.rjt</td>
      <td>application/vnd.rn-realsystem-rjt</td>
    </tr>
    <tr>
      <td class="separateColor">.rlc</td>
      <td>application/x-rlc</td>
      <td class="separateColor">.rle</td>
      <td>application/x-rle</td>
    </tr>
    <tr>
      <td class="separateColor">.rm</td>
      <td>application/vnd.rn-realmedia</td>
      <td class="separateColor">.rmf</td>
      <td>application/vnd.adobe.rmf</td>
    </tr>
    <tr>
      <td class="separateColor">.rmi</td>
      <td>audio/mid</td>
      <td class="separateColor">.rmj</td>
      <td>application/vnd.rn-realsystem-rmj</td>
    </tr>
    <tr>
      <td class="separateColor">.rmm</td>
      <td>audio/x-pn-realaudio</td>
      <td class="separateColor">.rmp</td>
      <td>application/vnd.rn-rn_music_package</td>
    </tr>
    <tr>
      <td class="separateColor">.rms</td>
      <td>application/vnd.rn-realmedia-secure</td>
      <td class="separateColor">.rmvb</td>
      <td>application/vnd.rn-realmedia-vbr</td>
    </tr>
    <tr>
      <td class="separateColor">.rmx</td>
      <td>application/vnd.rn-realsystem-rmx</td>
      <td class="separateColor">.rnx</td>
      <td>application/vnd.rn-realplayer</td>
    </tr>
    <tr>
      <td class="separateColor">.rp</td>
      <td>image/vnd.rn-realpix</td>
      <td class="separateColor">.rpm</td>
      <td>audio/x-pn-realaudio-plugin</td>
    </tr>
    <tr>
      <td class="separateColor">.rsml</td>
      <td>application/vnd.rn-rsml</td>
      <td class="separateColor">.rt</td>
      <td>text/vnd.rn-realtext</td>
    </tr>
    <tr>
      <td class="separateColor">.rtf</td>
      <td>application/msword</td>
      <td class="separateColor">.rtf</td>
      <td>application/x-rtf</td>
    </tr>
    <tr>
      <td class="separateColor">.rv</td>
      <td>video/vnd.rn-realvideo</td>
      <td class="separateColor">.sam</td>
      <td>application/x-sam</td>
    </tr>
    <tr>
      <td class="separateColor">.sat</td>
      <td>application/x-sat</td>
      <td class="separateColor">.sdp</td>
      <td>application/sdp</td>
    </tr>
    <tr>
      <td class="separateColor">.sdw</td>
      <td>application/x-sdw</td>
      <td class="separateColor">.sit</td>
      <td>application/x-stuffit</td>
    </tr>
    <tr>
      <td class="separateColor">.slb</td>
      <td>application/x-slb</td>
      <td class="separateColor">.sld</td>
      <td>application/x-sld</td>
    </tr>
    <tr>
      <td class="separateColor">.slk</td>
      <td>drawing/x-slk</td>
      <td class="separateColor">.smi</td>
      <td>application/smil</td>
    </tr>
    <tr>
      <td class="separateColor">.smil</td>
      <td>application/smil</td>
      <td class="separateColor">.smk</td>
      <td>application/x-smk</td>
    </tr>
    <tr>
      <td class="separateColor">.snd</td>
      <td>audio/basic</td>
      <td class="separateColor">.sol</td>
      <td>text/plain</td>
    </tr>
    <tr>
      <td class="separateColor">.sor</td>
      <td>text/plain</td>
      <td class="separateColor">.spc</td>
      <td>application/x-pkcs7-certificates</td>
    </tr>
    <tr>
      <td class="separateColor">.spl</td>
      <td>application/futuresplash</td>
      <td class="separateColor">.spp</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.ssm</td>
      <td>application/streamingmedia</td>
      <td class="separateColor">.sst</td>
      <td>application/vnd.ms-pki.certstore</td>
    </tr>
    <tr>
      <td class="separateColor">.stl</td>
      <td>application/vnd.ms-pki.stl</td>
      <td class="separateColor">.stm</td>
      <td>text/html</td>
    </tr>
    <tr>
      <td class="separateColor">.sty</td>
      <td>application/x-sty</td>
      <td class="separateColor">.svg</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.swf</td>
      <td>application/x-shockwave-flash</td>
      <td class="separateColor">.tdf</td>
      <td>application/x-tdf</td>
    </tr>
    <tr>
      <td class="separateColor">.tg4</td>
      <td>application/x-tg4</td>
      <td class="separateColor">.tga</td>
      <td>application/x-tga</td>
    </tr>
    <tr>
      <td class="separateColor">.tif</td>
      <td>image/tiff</td>
      <td class="separateColor">.tif</td>
      <td>application/x-tif</td>
    </tr>
    <tr>
      <td class="separateColor">.tiff</td>
      <td>image/tiff</td>
      <td class="separateColor">.tld</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.top</td>
      <td>drawing/x-top</td>
      <td class="separateColor">.torrent</td>
      <td>application/x-bittorrent</td>
    </tr>
    <tr>
      <td class="separateColor">.tsd</td>
      <td>text/xml</td>
      <td class="separateColor">.txt</td>
      <td>text/plain</td>
    </tr>
    <tr>
      <td class="separateColor">.uin</td>
      <td>application/x-icq</td>
      <td class="separateColor">.uls</td>
      <td>text/iuls</td>
    </tr>
    <tr>
      <td class="separateColor">.vcf</td>
      <td>text/x-vcard</td>
      <td class="separateColor">.vda</td>
      <td>application/x-vda</td>
    </tr>
    <tr>
      <td class="separateColor">.vdx</td>
      <td>application/vnd.visio</td>
      <td class="separateColor">.vml</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.vpg</td>
      <td>application/x-vpeg005</td>
      <td class="separateColor">.vsd</td>
      <td>application/vnd.visio</td>
    </tr>
    <tr>
      <td class="separateColor">.vsd</td>
      <td>application/x-vsd</td>
      <td class="separateColor">.vss</td>
      <td>application/vnd.visio</td>
    </tr>
    <tr>
      <td class="separateColor">.vst</td>
      <td>application/vnd.visio</td>
      <td class="separateColor">.vst</td>
      <td>application/x-vst</td>
    </tr>
    <tr>
      <td class="separateColor">.vsw</td>
      <td>application/vnd.visio</td>
      <td class="separateColor">.vsx</td>
      <td>application/vnd.visio</td>
    </tr>
    <tr>
      <td class="separateColor">.vtx</td>
      <td>application/vnd.visio</td>
      <td class="separateColor">.vxml</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.wav</td>
      <td>audio/wav</td>
      <td class="separateColor">.wax</td>
      <td>audio/x-ms-wax</td>
    </tr>
    <tr>
      <td class="separateColor">.wb1</td>
      <td>application/x-wb1</td>
      <td class="separateColor">.wb2</td>
      <td>application/x-wb2</td>
    </tr>
    <tr>
      <td class="separateColor">.wb3</td>
      <td>application/x-wb3</td>
      <td class="separateColor">.wbmp</td>
      <td>image/vnd.wap.wbmp</td>
    </tr>
    <tr>
      <td class="separateColor">.wiz</td>
      <td>application/msword</td>
      <td class="separateColor">.wk3</td>
      <td>application/x-wk3</td>
    </tr>
    <tr>
      <td class="separateColor">.wk4</td>
      <td>application/x-wk4</td>
      <td class="separateColor">.wkq</td>
      <td>application/x-wkq</td>
    </tr>
    <tr>
      <td class="separateColor">.wks</td>
      <td>application/x-wks</td>
      <td class="separateColor">.wm</td>
      <td>video/x-ms-wm</td>
    </tr>
    <tr>
      <td class="separateColor">.wma</td>
      <td>audio/x-ms-wma</td>
      <td class="separateColor">.wmd</td>
      <td>application/x-ms-wmd</td>
    </tr>
    <tr>
      <td class="separateColor">.wmf</td>
      <td>application/x-wmf</td>
      <td class="separateColor">.wml</td>
      <td>text/vnd.wap.wml</td>
    </tr>
    <tr>
      <td class="separateColor">.wmv</td>
      <td>video/x-ms-wmv</td>
      <td class="separateColor">.wmx</td>
      <td>video/x-ms-wmx</td>
    </tr>
    <tr>
      <td class="separateColor">.wmz</td>
      <td>application/x-ms-wmz</td>
      <td class="separateColor">.wp6</td>
      <td>application/x-wp6</td>
    </tr>
    <tr>
      <td class="separateColor">.wpd</td>
      <td>application/x-wpd</td>
      <td class="separateColor">.wpg</td>
      <td>application/x-wpg</td>
    </tr>
    <tr>
      <td class="separateColor">.wpl</td>
      <td>application/vnd.ms-wpl</td>
      <td class="separateColor">.wq1</td>
      <td>application/x-wq1</td>
    </tr>
    <tr>
      <td class="separateColor">.wr1</td>
      <td>application/x-wr1</td>
      <td class="separateColor">.wri</td>
      <td>application/x-wri</td>
    </tr>
    <tr>
      <td class="separateColor">.wrk</td>
      <td>application/x-wrk</td>
      <td class="separateColor">.ws</td>
      <td>application/x-ws</td>
    </tr>
    <tr>
      <td class="separateColor">.ws2</td>
      <td>application/x-ws</td>
      <td class="separateColor">.wsc</td>
      <td>text/scriptlet</td>
    </tr>
    <tr>
      <td class="separateColor">.wsdl</td>
      <td>text/xml</td>
      <td class="separateColor">.wvx</td>
      <td>video/x-ms-wvx</td>
    </tr>
    <tr>
      <td class="separateColor">.xdp</td>
      <td>application/vnd.adobe.xdp</td>
      <td class="separateColor">.xdr</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.xfd</td>
      <td>application/vnd.adobe.xfd</td>
      <td class="separateColor">.xfdf</td>
      <td>application/vnd.adobe.xfdf</td>
    </tr>
    <tr>
      <td class="separateColor">.xhtml</td>
      <td>text/html</td>
      <td class="separateColor">.xls</td>
      <td>application/vnd.ms-excel</td>
    </tr>
    <tr>
      <td class="separateColor">.xls</td>
      <td>application/x-xls</td>
      <td class="separateColor">.xlw</td>
      <td>application/x-xlw</td>
    </tr>
    <tr>
      <td class="separateColor">.xml</td>
      <td>text/xml</td>
      <td class="separateColor">.xpl</td>
      <td>audio/scpls</td>
    </tr>
    <tr>
      <td class="separateColor">.xq</td>
      <td>text/xml</td>
      <td class="separateColor">.xql</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.xquery</td>
      <td>text/xml</td>
      <td class="separateColor">.xsd</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.xsl</td>
      <td>text/xml</td>
      <td class="separateColor">.xslt</td>
      <td>text/xml</td>
    </tr>
    <tr>
      <td class="separateColor">.xwd</td>
      <td>application/x-xwd</td>
      <td class="separateColor">.x_b</td>
      <td>application/x-x_b</td>
    </tr>
    <tr>
      <td class="separateColor">.sis</td>
      <td>application/vnd.symbian.install</td>
      <td class="separateColor">.sisx</td>
      <td>application/vnd.symbian.install</td>
    </tr>
    <tr>
      <td class="separateColor">.x_t</td>
      <td>application/x-x_t</td>
      <td class="separateColor">.ipa</td>
      <td>application/vnd.iphone</td>
    </tr>
    <tr>
      <td class="separateColor">.apk</td>
      <td>application/vnd.android.package-archive</td>
      <td class="separateColor">.xap</td>
      <td>application/x-silverlight-app</td>
    </tr>
  </tbody>
</table>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇搞懂Webpack常用的配置</title>
    <url>/eternallycyf/%E4%B8%80%E7%AF%87%E6%90%9E%E6%87%82%20Webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-认识-Webpack"><a href="#1-认识-Webpack" class="headerlink" title="1.认识 Webpack"></a>1.认识 Webpack</h2><h3 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么?"></a>Webpack 是什么?</h3><ul>
<li><a href="https://webpack.docschina.org/concepts/">官方的定义</a><ul>
<li><code>Webpack</code> 是一个用于现代 <code>JavaScript</code> 应用程序的 静态模块打包工具。</li>
<li>当<code>Webpack</code> 处理应用程序时，</li>
<li>它会在内部从一个或多个入口点构建一个 依赖图(<code>dependency graph</code>)</li>
<li>然后将你项目中所需的每一个模块组合成一个或多个 <code>bundles</code>，它们均为静态资源，用于展示你的内容</li>
</ul>
</li>
<li>简单的说<ul>
<li>之前<ul>
<li>在<code>2010</code>年左右,前端当时还是利用 <code>jQuery</code> 进行开发</li>
<li>后端利用 <code>php jsp</code> 等技术将数据库的数据渲染到前端的页面上</li>
<li>前后端开始是耦合的 维护和开发 都是一个不规范 繁琐的流程</li>
</ul>
</li>
<li>现在<ul>
<li>当三大框架的横行后 逐渐以<code>MVVM</code>(<code>Model-View-ViewModel</code>)模式来 </li>
<li>减少繁琐的 <code>DOM</code> 操作,以数据来驱动视图的变化,更加利于维护和开发</li>
</ul>
</li>
<li>为什么使用<ul>
<li>原生<code>js</code>不会提供所有的特性, 因此就需要引入各种插件</li>
<li>而<code>Webpack</code>就是大一统的集成方案</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Webpack-可以做什么"><a href="#Webpack-可以做什么" class="headerlink" title="Webpack 可以做什么"></a>Webpack 可以做什么</h3><ul>
<li>使用<code>Webpack</code>作为前端构建工具通常可以做到以下几个方面的事情<ul>
<li>代码转换: <code>TypeScript</code>编译成<code>JavaScript</code>、<code>SCSS</code>编译成<code>CSS</code>等。</li>
<li>文件优化: 压缩<code>JavaScript</code>、<code>CSS</code>、<code>HTML</code>代码，压缩合并图片等。</li>
<li>代码分割: 提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>
<li>模块合并: 在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>
<li>自动刷新: 监听本地源代码的变化，自动重新构建、刷新浏览器页面，通常叫做模块热替换<code>HMR</code>。</li>
<li>代码校验: 在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>
<li>自动发布: 更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>
</ul>
</li>
</ul>
<h2 id="2-搭建-Webpack"><a href="#2-搭建-Webpack" class="headerlink" title="2.搭建 Webpack"></a>2.搭建 Webpack</h2><h3 id="搭建基本环境"><a href="#搭建基本环境" class="headerlink" title="搭建基本环境"></a>搭建基本环境</h3><ul>
<li>安装最新的环境, 新建一个文件夹叫 <code>test</code></li>
<li><code>test</code> 根路径下载基本的依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli --save-dev</span><br><span class="line">yarn add webpack-dev-server -D</span><br><span class="line">yarn add html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li>
<li>在 <code>test/package.json</code> 文件添加启动和打包的 <code>shell</code> 命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;webpack serve &quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li>新建基本的文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># dist 目录不用手动创建 这个是打包自动生成的</span><br><span class="line">|-- node_modules</span><br><span class="line">├── dist</span><br><span class="line">│   └── main.js</span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── index.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure></li>
<li>在 webpack.config.js 文件写入基本的配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 这些配置后面会具体解释 这里主要配置了打包的出口文件和入口文件</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>此时就完成了基本的搭建,可以来使用shell语句测试一下效果了</blockquote>

<ul>
<li>在 <code>/src/index.js</code> 写入 <code>console.log(&#39;Hello Webpck&#39;);</code></li>
<li>然后在项目根路径执行之前在<code>package.json</code>定义的<code>shell</code>命令 </li>
<li><code>yarn build</code> 就在在 <code>/dist/main.js</code> 发现转换后的代码了</li>
<li>但是目前还是不能展示html页面 和 启动服务</li>
<li>在下一阶段就将安装两个必要的插件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello Webpck&#x27;);\n\n//# sourceURL=webpack:///./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	__webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>]();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h2 id="3-配置插件"><a href="#3-配置插件" class="headerlink" title="3.配置插件"></a>3.配置插件</h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><ul>
<li>自己可以去<code>npm</code> 搜索各种<code>loader</code> 获取更多具体的配置</li>
<li>这里仅仅配置了我用过的常用配置</li>
<li><a href="https://www.npmjs.com/search?q=loader">npm-loader</a></li>
<li>配置插件章节的项目最终结构</li>
</ul>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   └── public</span><br><span class="line">│       ├── assets</span><br><span class="line">│       │   └── images</span><br><span class="line">│       │       └── 99b6d6d0aac2e1ab068e.png</span><br><span class="line">│       └── <span class="keyword">static</span></span><br><span class="line">│           └── e7c3da3c784524f42673.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── avatar.png</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── index.less</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./public/index.html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  html5</span><br><span class="line">  &lt;img id=<span class="string">&#x27;im&#x27;</span> src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./src/index.js</span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;../public/avatar.png&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"><span class="keyword">const</span> im = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;im&#x27;</span>)</span><br><span class="line">im.src = avatar</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpck&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> aaaa = <span class="function">() =&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(aaaa);</span><br></pre></td></tr></table></figure>

<h4 id="index-less"><a href="#index-less" class="headerlink" title="index.less"></a>index.less</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># ./<span class="selector-tag">src</span>/<span class="selector-tag">index</span><span class="selector-class">.less</span></span><br><span class="line">@<span class="selector-tag">myColor</span>: <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定打包后输出的文件夹 ./dist/public/assets/images</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;public/assets/images/[hash][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.html/,</span></span><br><span class="line">      <span class="comment">//   type: &#x27;asset/resource&#x27;,</span></span><br><span class="line">      <span class="comment">//   generator: &#123;</span></span><br><span class="line">      <span class="comment">//     filename: &#x27;public/static/[hash][ext][query]&#x27;  // 单独指定名字</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/inline&#x27;</span>  <span class="comment">// inline 的时候不需要指定文件名</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span> <span class="comment">// 4kb  指定大小</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.69.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.17.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.16.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;autoprefixer&quot;</span>: <span class="string">&quot;^10.4.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node-sass&quot;</span>: <span class="string">&quot;^7.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sass-loader&quot;</span>: <span class="string">&quot;^12.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.7.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><ul>
<li>这个插件其实就是一个小型的本地服务器 </li>
<li>相关配置也比较简单</li>
<li>其他的具体配置后面再说 </li>
<li>这时候就可以执行 <code>yarn serve</code></li>
<li>此时还没有配置解析html的插件 因此先手动跳转到 <code>main.js</code> 测试下</li>
<li><code>http://localhost:8088/main.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 打开的端口</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="comment">// 启动服务后自动打开网页</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><ul>
<li>这个包显然就是用来解析html的</li>
<li>配置后运行 <code>yarn build</code> 就可以在 <code>dist</code> 目录看到打包后的 <code>index.html</code> 了</li>
<li>同时运行 <code>yarn serve</code> 也可以直接运行解析了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"># 在 ./public/index.html 随便写点东西</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  html5</span><br><span class="line">  &lt;img id=<span class="string">&#x27;im&#x27;</span> src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 要生成的index.html路径 </span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>此时我们完成了基本的架构,现在需要配置各种loader来满足项目的需要</blockquote></li>
</ul>
<h3 id="Asset-Modules"><a href="#Asset-Modules" class="headerlink" title="Asset Modules"></a>Asset Modules</h3><ul>
<li><code>Asset Modules</code> 是一种模块，它允许人们在不配置额外加载器的情况下使用资产文件（字体、图标等）</li>
<li><code>webpack5</code> 不需要再去手动下载三个<code>loader</code>了</li>
<li>在 <code>webpack 5</code> 之前，通常使用:<ul>
<li><code>raw-loader</code>将文件作为字符串导入</li>
<li><code>url-loader</code>将文件作为数据 URI 内联到包中</li>
<li><code>file-loader</code>将文件发送到输出目录</li>
</ul>
</li>
<li><code>Asset Modules</code> 分为4中资源模块<ul>
<li><code>asset/resource</code> 将资源分割为单独的文件，并导出<code>url</code>，就是之前的 <code>file-loader</code>的功能</li>
<li><code>asset/inline</code> 将资源导出为<code>dataURL（url(data:)）</code>的形式，之前的 <code>url-loader</code>的功能</li>
<li><code>asset/source</code> 将资源导出为源码（<code>source code</code>）. 之前的 <code>raw-loader</code> 功能</li>
<li><code>asset</code> 自动选择导出为单独文件或者 <code>dataURL形式（默认为8KB）</code>. 之前有<code>url-loader</code>设置<code>asset size limit</code> 限制实现。</li>
</ul>
</li>
<li>当配置完成后运行 yarn build就会发现 图片也被打包进了dist目录<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在 ./public 放一张图片 这里选择了avatar.png</span><br><span class="line"># ./src/index.js </span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;../public/avatar.png&#x27;</span></span><br><span class="line"><span class="keyword">const</span> im = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;im&#x27;</span>)</span><br><span class="line">im.src = avatar</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpck&#x27;</span>);</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.use</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定打包后输出的文件夹 ./dist/public/assets/images</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;public/assets/images/[hash][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.html/,</span></span><br><span class="line">      <span class="comment">//   type: &#x27;asset/resource&#x27;,</span></span><br><span class="line">      <span class="comment">//   generator: &#123;</span></span><br><span class="line">      <span class="comment">//     filename: &#x27;public/static/[hash][ext][query]&#x27;  // 单独指定名字</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/inline&#x27;</span>  <span class="comment">// inline 的时候不需要指定文件名</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span> <span class="comment">// 4kb  指定大小</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><ul>
<li><code>babel-loader</code> 用于转化和识别高级语法</li>
<li>当配置完成后运行 <code>yarn build</code> 可以查看 <code>./dist/main.js</code> 后可以发现<ul>
<li>代码已经将箭头函数转换成了<code>es5</code>了</li>
<li><code>var aaaa = function aaaa() &#123;\n  return 10;\n&#125;;\n\nconsole.log(aaaa);</code></li>
<li>然后注销掉 <code>babel-loader</code> 的规则 重新打包</li>
<li>你会发现 <code>main.js</code> 中还是箭头函数 这就是 <code>babel-loader</code> 的作用之一<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env </span><br><span class="line">在 ./src/index.js 加入一个 es6 箭头函数</span><br><span class="line"><span class="keyword">const</span> aaaa = <span class="function">() =&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(aaaa);</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.module.rules.xxx</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="css-sass-less-postcss-loader"><a href="#css-sass-less-postcss-loader" class="headerlink" title="css,sass,less,postcss loader"></a>css,sass,less,postcss loader</h3><ul>
<li><code>sass less</code> 大家都知道是<code>css</code>的预编译语言就不用多说了</li>
<li><code>postcss</code> 是用于自动添加<code>css</code>的兼容前缀</li>
<li>接下来就一次性安装多个<code>loader</code><ul>
<li>不过注意 <code>node-sass</code> 的上游依赖需要手动配置镜像或代理 否则一直可能下载失败<a class="btn-beautify blue larger" href="https://www.ydyno.com/archives/1219.html" 
  title="node-sass配置镜像"><i class="far fa-hand-point-right"></i><span>node-sass配置镜像</span></a></li>
</ul>
</li>
<li>配置完成后 就可以看到<code>less-loader</code>生效了</li>
<li>其他的<code>loader</code>,可以自己测试下,这里就不测试了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader -D </span><br><span class="line">yarn add less-loader less -D</span><br><span class="line">yarn add sass-loader node-sass -D</span><br><span class="line">yarn add postcss-loader autoprefixer -D</span><br><span class="line"># ./public/index.html </span><br><span class="line">ul&gt;li&#123;$&#125;*<span class="number">3</span></span><br><span class="line"># ./src/index.js</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"># ./src/index.less</span><br><span class="line">@myColor: blue;</span><br><span class="line">li&#123;</span><br><span class="line">  <span class="attr">color</span>: @myColor;</span><br><span class="line">&#125;</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.module.rules.xxx</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-configuration"><a href="#4-configuration" class="headerlink" title="4. configuration"></a>4. configuration</h2><h3 id="版本事项"><a href="#版本事项" class="headerlink" title="版本事项"></a>版本事项</h3><blockquote>以下的这些配置基于 webpack 4.x, 当使用webpack5 时可能有一些变动</blockquote>

<p><a href="https://v4.webpack.docschina.org/concepts/">webpack4.x</a><br><a href="https://webpack.docschina.org/concepts/">webpack5</a></p>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 新建目录src</span><br><span class="line">    默认入口: ./src/index.js</span><br><span class="line">#</span><br><span class="line">  多入口打包 </span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;angular&#x27;</span>: <span class="string">&#x27;./src/2.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"># 根目录创建webpack.config.js</span><br><span class="line"> <span class="comment">// entry: string   生成一个chunk 输出一个 bundle</span></span><br><span class="line"> <span class="comment">// entry: sring[]  生成一个chunk 输出一个 bundle</span></span><br><span class="line"> <span class="comment">// entry: object   有几个入口文件就生成几个 chunk 和 bundle </span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>, </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  默认出口: ./dist/main.js</span><br><span class="line">#</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123; </span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 资源公众路径前缀 </span></span><br><span class="line">    <span class="comment">// images/a.jpg =&gt; /images/a.jpg</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;js/[name]_chunk.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 整个库向外保留的变量名</span></span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;[name]&#x27;</span></span><br><span class="line">    <span class="comment">// 变量名添加到顶级作用域 global</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&#x27;window&#x27;</span>            </span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development production&#x27;</span> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment"> 本地 :5000 端口服务器接受到 /api/xxx 的请求</span></span><br><span class="line"><span class="comment"> 就会把请求转发到另外一个服务器 :3000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">       <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">       <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不显示服务器日志信息</span></span><br><span class="line">  <span class="attr">clientLogLevel</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">  <span class="attr">quiet</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 如果报错 不要全屏提示</span></span><br><span class="line">  <span class="attr">overlay</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 启动gzip压缩</span></span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,  </span><br><span class="line">  <span class="attr">watchContentBase</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">          <span class="comment">// 忽略文件</span></span><br><span class="line">          <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  # <span class="number">4.0</span> webpack</span><br><span class="line">  <span class="comment">// 影响本地资源的访问  express.static</span></span><br><span class="line">  <span class="comment">// 是对 output 打包文件物理存储位置的映射</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/assets/&quot;</span>,</span><br><span class="line">  <span class="comment">// html页面的路径 (默认就是项目根路径) </span></span><br><span class="line">  <span class="comment">// 初始相对路径是webpack.config 如果dist和他同级 </span></span><br><span class="line">  <span class="comment">// contentBase: &#x27;./dist&#x27;</span></span><br><span class="line">  <span class="attr">contentBase</span>: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  <span class="comment">// 监视 contentBase 目录下的所有文件 文件变化就会 reload</span></span><br><span class="line">  # <span class="number">5.0</span> webpack</span><br><span class="line">  <span class="comment">// 默认指定为 public 目录</span></span><br><span class="line">  <span class="attr">static</span>: &#123; <span class="comment">//false</span></span><br><span class="line">    <span class="attr">directory</span>: path.join(__dirname, <span class="string">&#x27;assets&#x27;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/index.html&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 防止 webpack 解析这些文件 </span></span><br><span class="line">  <span class="comment">// 这些文件内不能含有 import require define</span></span><br><span class="line">  <span class="comment">// 可以提高性能</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">noParse</span>: <span class="regexp">/jquery|lodash/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span></span><br><span class="line">        <span class="comment">// 排除 node_modules 下的js文件</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 只检查 src 下的js文件</span></span><br><span class="line">        include: resolve(__dirname, <span class="string">&#x27;scr&#x27;</span>),</span><br><span class="line">        <span class="comment">// pre:优先执行 post:延后执行</span></span><br><span class="line">        <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123; &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当规则匹配时 只使用第一个成功的匹配规则</span></span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">       &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当规则匹配时 只使用第一个成功的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">                <span class="attr">outputPath</span>: <span class="string">&#x27;imgs&#x27;</span>,</span><br><span class="line">                <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">outputPath</span>: <span class="string">&#x27;media&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/components&#x27;</span>:</span><br><span class="line">       path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/utils&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/services&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/services&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/models&#x27;</span>: </span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/models&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/pages&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/pages&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="extensions-modules"><a href="#extensions-modules" class="headerlink" title="extensions modules"></a>extensions modules</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>]</span><br><span class="line">    <span class="comment">// 告诉 webpack 解析模块去找那个目录</span></span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">      resolve(__dirname, <span class="string">&#x27;../../node_modules&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;node_modules&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拒绝 jqery 被打包</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">     &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><h4 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 node_modules 中代码打包进一个 chunk </span></span><br><span class="line"><span class="comment">// 自动分析多入口 chunk 有没有公共文件 有的话会打包成单独一个 chunk</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all async&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><h4 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line">source-map: 一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</span><br><span class="line">  </span><br><span class="line">[inline-|hidden-|<span class="built_in">eval</span>-][nosources-][cheap-[<span class="built_in">module</span>-]]source-map</span><br><span class="line">  </span><br><span class="line">      source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      inline-source-map：内联</span><br><span class="line">        只生成一个内联source-map</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      hidden-source-map：外部</span><br><span class="line">        错误代码错误原因，但是没有错误位置</span><br><span class="line">        不能追踪源代码错误，只能提示到构建后代码的错误位置</span><br><span class="line">      <span class="built_in">eval</span>-source-map：内联</span><br><span class="line">        每一个文件都生成对应的source-map，都在<span class="built_in">eval</span></span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      nosources-source-map：外部</span><br><span class="line">        错误代码准确信息, 但是没有任何源代码信息</span><br><span class="line">      cheap-source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置 </span><br><span class="line">        只能精确的行</span><br><span class="line">      cheap-<span class="built_in">module</span>-source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置 </span><br><span class="line">        <span class="built_in">module</span>会将loader的source map加入</span><br><span class="line">  </span><br><span class="line">    内联 和 外部的区别：<span class="number">1.</span> 外部生成了文件，内联没有 <span class="number">2.</span> 内联构建速度更快</span><br><span class="line">  </span><br><span class="line">      开发环境：速度快，调试更友好</span><br><span class="line">        速度快(<span class="built_in">eval</span>&gt;inline&gt;cheap&gt;...)</span><br><span class="line">          <span class="built_in">eval</span>-cheap-souce-map</span><br><span class="line">          <span class="built_in">eval</span>-source-map</span><br><span class="line">        调试更友好  </span><br><span class="line">          souce-map</span><br><span class="line">          cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">          cheap-souce-map</span><br><span class="line">  </span><br><span class="line">        --&gt; <span class="built_in">eval</span>-source-map  / <span class="built_in">eval</span>-cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">  </span><br><span class="line">      生产环境：源代码要不要隐藏? 调试要不要更友好</span><br><span class="line">        内联会让代码体积变大，所以在生产环境不用内联</span><br><span class="line">        nosources-source-map 全部隐藏</span><br><span class="line">        hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</span><br><span class="line">  </span><br><span class="line">        --&gt; source-map / cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">                                    </span><br></pre></td></tr></table></figure>



<h2 id="4-demo"><a href="#4-demo" class="headerlink" title="4. demo"></a>4. demo</h2><h3 id="css抽离"><a href="#css抽离" class="headerlink" title="css抽离"></a>css抽离</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">     <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">     <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="comment">// 压缩css</span></span><br><span class="line">   <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [ <span class="string">&#x27;file-loader&#x27;</span>]</span><br><span class="line">             [<span class="string">&#x27;file-loader?name=[name].bundle[hash].css&#x27;</span>]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="js抽离"><a href="#js抽离" class="headerlink" title="js抽离"></a>js抽离</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">   <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">eslint eslint-loader</span><br><span class="line">package.json 中添加</span><br><span class="line"><span class="comment">// 排除第三方库 只检查自己的代码</span></span><br><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123; <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span>&#125;</span><br><span class="line">#</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">// 自动修复eslint的错误</span></span><br><span class="line">        <span class="attr">fix</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码切割"><a href="#代码切割" class="headerlink" title="代码切割"></a>代码切割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 多入口 自动打包多个文件</span><br><span class="line">   <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;angular&#x27;</span>: <span class="string">&#x27;./src/2.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span> 异部的chunk</span><br><span class="line">   <span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params">_require</span>)</span>&#123;</span><br><span class="line">     _require(<span class="string">&#x27;./xxx&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./2.css&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"># </span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">  <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cdn</span><br></pre></td></tr></table></figure>

<h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">硬链接一个 包,再手动scrit引入这个包 之后webpack就不用编译了</span><br><span class="line">#</span><br><span class="line">yarn add add-asset-html-webpack-plugin</span><br><span class="line">webpack --config webpack.config.dll.js &amp;&amp; webpack</span><br><span class="line"># 文件路径</span><br><span class="line">  webpack.config.js</span><br><span class="line">  webpack.config.dll.js</span><br><span class="line">  dist</span><br><span class="line">     index.html    </span><br><span class="line">  src</span><br><span class="line">  public</span><br><span class="line">  dll</span><br><span class="line">     jquery</span><br><span class="line">     manifest.json</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123; <span class="attr">removeComments</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变~</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        <span class="attr">manifest</span>: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 将某个文件打包输出去，并在html中自动引入该资源</span></span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</span><br><span class="line">       <span class="attr">filepath</span>: path.resolve(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">       <span class="attr">publicPath</span>: <span class="string">&#x27;../dll&#x27;</span>,</span><br><span class="line">       <span class="attr">outputPath</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"># webpack.config.dll.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;[name]_[hash]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 打包生成一个 manifest.json --&gt; 提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 映射库的暴露的内容名称 和 library 相同</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">   <span class="attr">$</span>: path.resolve(path.join(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>))</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>获取getter的几种方式</title>
    <url>/eternallycyf/%E8%8E%B7%E5%8F%96getter%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="获取getter的几种方式"><a href="#获取getter的几种方式" class="headerlink" title="获取getter的几种方式"></a>获取getter的几种方式</h2><ul>
<li><code>__lookupGetter__</code></li>
<li><code>Object.definedProperty</code></li>
<li><code>Proxy</code></li>
<li><code>Object.getOwnPropertyDescriptor(obj,&#39;a&#39;).get</code></li>
<li>区别<ul>
<li><code>__defineGetter__ Proxy</code> <code>Object.getOwnPropertyDescriptor(obj,&#39;a&#39;).get</code> 可以动态设置</li>
<li><code>Object.definedProperty</code> 只能定义时候设置</li>
</ul>
</li>
</ul>
<h2 id="旧的写法"><a href="#旧的写法" class="headerlink" title="旧的写法"></a>旧的写法</h2><ul>
<li>兼容性好,但未来版本可能会移除</li>
<li>在 <code>Koa Vue</code> 等源码中都有用到<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.__lookupGetter__(prop)</span><br><span class="line">obj.__lookupSetter__(prop)</span><br><span class="line">obj.__defineGetter__(prop,func)</span><br><span class="line">obj.__defineSetter__(prop,func)</span><br><span class="line">#</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  obj.__defineGetter__(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;get a&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(obj.a);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Object-definedProperty"><a href="#Object-definedProperty" class="headerlink" title="Object.definedProperty"></a>Object.definedProperty</h2><ul>
<li>这个是常见的这里就不详细说了</li>
<li>只要注意他和其他的区别就行了: 只能定义时候设置</li>
</ul>
<h2 id="Object-getOwnPropertyDescriptor-obj-’a’-get"><a href="#Object-getOwnPropertyDescriptor-obj-’a’-get" class="headerlink" title="Object.getOwnPropertyDescriptor(obj,’a’).get"></a>Object.getOwnPropertyDescriptor(obj,’a’).get</h2><ul>
<li>利用原生构造器获取,兼容性没有 <code>__lookupGetter__</code> 好</li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li>利用代理方式获取修改<code>getter</code></li>
<li>同样的 兼容性没有 <code>__lookupGetter__</code> 好</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>惰性函数</title>
    <url>/eternallycyf/%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><ul>
<li><p>惰性函数，是针对优化频繁使用的函数。常用于函数库的编写、单例模式之中</p>
</li>
<li><p>惰性加载表示函数执行的分支只会在函数第一次调用的时候执行。在第一次调用的过程中。该函数被覆盖为另一个按照合适的方式执行的函数。这样任何对原函数的调用就不用再经过执行的分支了</p>
</li>
<li><p>写一个函数 让每次都返回首次调用的时间</p>
<ul>
<li>缺点<ul>
<li>污染全局变量</li>
<li>多余的 <code>if</code> 判断<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeStamp = <span class="literal">null</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getTimeStamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (timeStamp) &#123;</span><br><span class="line">     <span class="keyword">return</span> timeStamp</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 直接为外界的变量赋值</span></span><br><span class="line">   timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">   <span class="keyword">return</span> timeStamp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(getTimeStamp());</span><br><span class="line"> <span class="built_in">console</span>.log(getTimeStamp());</span><br><span class="line"> <span class="built_in">console</span>.log(getTimeStamp());</span><br><span class="line"> <span class="built_in">console</span>.log(getTimeStamp());</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>自执行函数 避免污染全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getTimeStamp = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeStamp = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeStamp) &#123;</span><br><span class="line">      <span class="keyword">return</span> timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">    timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">return</span> timeStamp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li>
<li><p>第一次只是在给函数重新定义 第二次执行时候才生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">   getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> timeStamp</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> getTimeStamp()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="element-ui的应用"><a href="#element-ui的应用" class="headerlink" title="element ui的应用"></a>element ui的应用</h2><ul>
<li>处理 dom 事件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> on = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isServer &amp;&amp; <span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">element, event, handler</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">        element.addEventListener(event, handler, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">element, event, handler</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">        element.attachEvent(<span class="string">&#x27;on&#x27;</span> + event, handler);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="switch的应用"><a href="#switch的应用" class="headerlink" title="switch的应用"></a>switch的应用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      test = <span class="function">() =&gt;</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      test = <span class="function">() =&gt;</span> <span class="number">2</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      test = <span class="function">() =&gt;</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      test = <span class="function">() =&gt;</span> <span class="literal">null</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> test()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="number">3</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的常用命令</title>
    <url>/eternallycyf/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p><code>Git</code>是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，<code>Git</code>擅长的是程序代码的版本化管理，对程序源代码进行差异化的版本管理，代码库占极少的空间，可以说<code>Git</code>是目前世界上最先进的分布式版本控制系统。</p>
<h2 id="工作位置"><a href="#工作位置" class="headerlink" title="工作位置"></a>工作位置</h2><ul>
<li><code>Workspace</code>：工作区。</li>
<li><code>Index/Stage</code>：暂存区。</li>
<li><code>Repository</code>：本地仓库。</li>
<li><code>Remote</code>：远程仓库。</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><code>git config --list</code>: 显示当前的<code>Git</code>配置。</li>
<li><code>git config -e [--global]</code>: 编辑<code>Git</code>配置文件。</li>
<li><code>git config [--global] user.name &quot;[name]&quot;</code>: 以<code>name</code>为例配置单个属性。</li>
</ul>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li><code>git clone ssh://user@domain.com:22/resources.git</code>: 克隆远程仓库。</li>
<li><code>git init</code>: 初始化本地<code>git</code>仓库，新建仓库，通常使用<code>--bare</code>选项初始化远程仓库。</li>
</ul>
<h2 id="增加或删除文件"><a href="#增加或删除文件" class="headerlink" title="增加或删除文件"></a>增加或删除文件</h2><ul>
<li><code>git add [file1] [file2] ...</code>: 添加指定文件到暂存区。</li>
<li><code>git add [dir]</code>: 添加指定目录到暂存区，包括子目录。</li>
<li><code>git add .</code>: 添加当前目录的所有文件到暂存区。</li>
<li><code>git add -p</code>: 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交。</li>
<li><code>git rm [file1] [file2] ...</code>: 删除工作区文件，并且将这次删除放入暂存区。</li>
<li><code>git rm --cached [file]</code>: 从暂存区删除文件，工作区则不做出改变。</li>
<li><code>git mv [file-original] [file-renamed]</code>: 改名文件，并且将这个改名放入暂存区。</li>
</ul>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><ul>
<li><code>git commit -m [message]</code>: 提交暂存区到仓库区。</li>
<li><code>git commit [file1] [file2] ... -m [message]</code>: 提交暂存区的指定文件到仓库区。</li>
<li><code>git commit -a</code>: 提交工作区自上次<code>commit</code>之后的变化，直接到仓库区。</li>
<li><code>git commit -v</code>: 提交时显示所有<code>diff</code>信息。</li>
<li><code>git commit --amend -m [message]</code>: 用一次新的<code>commit</code>，替代上一次提交，如果代码没有任何新变化，则用来改写上一次<code>commit</code>的提交信息。</li>
<li><code>git commit --amend [file1] [file2] ...</code>: 重做上一次<code>commit</code>，并包括指定文件的新变化。</li>
</ul>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li><code>git branch</code>: 列出所有本地分支。</li>
<li><code>git branch -r</code>: 列出所有远程分支。</li>
<li><code>git branch -a</code>: 列出所有本地分支和远程分支。</li>
<li><code>git branch [branch-name]</code>: 新建一个分支，但依然停留在当前分支。</li>
<li><code>git checkout -b [branch]</code>: 新建一个分支，并切换到该分支。</li>
<li><code>git branch [branch] [commit]</code>: 新建一个分支，指向指定<code>commit</code>。</li>
<li><code>git branch --track [branch] [remote-branch]</code>: 新建一个分支，与指定的远程分支建立追踪关系。</li>
<li><code>git checkout [branch-name]</code>: 切换到指定分支，并更新工作区。</li>
<li><code>git checkout -</code>: 切换到上一个分支。</li>
<li><code>git branch --set-upstream [branch] [remote-branch]</code>: 建立追踪关系，在现有分支与指定的远程分支之间。</li>
<li><code>git merge [branch]</code>: 合并指定分支到当前分支。</li>
<li><code>git cherry-pick [commit]</code>: 择一个<code>commit</code>，合并进当前分支。</li>
<li><code>git branch -d [branch-name]</code>: 删除分支。</li>
<li><code>git push origin --delete [branch-name]</code>: 删除远程分支。</li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li><code>git tag</code>: 列出所有<code>tag</code>。</li>
<li><code>git tag [tag]</code>: 新建一个<code>tag</code>在当前<code>commit</code>。</li>
<li><code>git tag [tag] [commit]</code>: 新建一个<code>tag</code>在指定<code>commit</code>。</li>
<li><code>git tag -d [tag]</code>: 删除本地<code>tag</code>。</li>
<li><code>git push origin :refs/tags/[tagName]</code>: 删除远程<code>tag</code>。</li>
<li><code>git show [tag]</code>: 查看<code>tag</code>信息。</li>
<li><code>git push [remote] [tag]</code>: 提交指定<code>tag</code>。</li>
<li><code>git push [remote] --tags</code>: 提交所有<code>tag</code>。</li>
<li><code>git checkout -b [branch] [tag]</code>: 新建一个分支，指向某个<code>tag</code>。</li>
</ul>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><ul>
<li><code>git status</code>: 显示有变更的文件。</li>
<li><code>git log</code>: 显示当前分支的版本历史。</li>
<li><code>git log --stat</code>: 显示<code>commit</code>历史，以及每次<code>commit</code>发生变更的文件。</li>
<li><code>git log -S [keyword]</code>: 搜索提交历史，根据关键。</li>
<li><code>git log [tag] HEAD --pretty=format:%s</code>: 显示某个<code>commit</code>之后的所有变动，每个<code>commit</code>占据一行。</li>
<li><code>git log [tag] HEAD --grep feature</code>: 显示某个<code>commit</code>之后的所有变动，其提交说明必须符合搜索条件。</li>
<li><code>git log --follow [file]</code>: 显示某个文件的版本历史，包括文件改名。</li>
<li><code>git log -p [file]</code>: 显示指定文件相关的每一次<code>diff</code>。</li>
<li><code>git log -5 --pretty --oneline</code>: 显示过去<code>5</code>次提交。</li>
<li><code>git shortlog -sn</code>: 显示所有提交过的用户，按提交次数排序。</li>
<li><code>git blame [file]</code>: 显示指定文件是什么人在什么时间修改过。</li>
<li><code>git diff</code>: 显示暂存区和工作区的差异。</li>
<li><code>git diff --cached [file]</code>: 显示暂存区和上一个<code>commit</code>的差异。</li>
<li><code>git diff HEAD</code>: 显示工作区与当前分支最新<code>commit</code>之间的差异。</li>
<li><code>git diff [first-branch]...[second-branch]</code>: 显示两次提交之间的差异。</li>
<li><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</code>: 显示今天你写了多少行代码。</li>
<li><code>git show [commit]</code>: 显示某次提交的元数据和内容变化。</li>
<li><code>git show --name-only [commit]</code>: 显示某次提交发生变化的文件。</li>
<li><code>git show [commit]:[filename]</code>: 显示某次提交时，某个文件的内容。</li>
<li><code>git reflog</code>: 显示当前分支的最近几次提交。</li>
</ul>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul>
<li><code>git checkout [file]</code>: 恢复暂存区的指定文件到工作区。</li>
<li><code>git checkout [commit] [file]</code>: 恢复某个<code>commit</code>的指定文件到暂存区和工作区。</li>
<li><code>git checkout .</code>: 恢复暂存区的所有文件到工作区。</li>
<li><code>git reset [file]</code>: 重置暂存区的指定文件，与上一次<code>commit</code>保持一致，但工作区不变。</li>
<li><code>git reset --hard</code>: 重置暂存区与工作区，与上一次<code>commit</code>保持一致。</li>
<li><code>git reset [commit]</code>: 重置当前分支的指针为指定<code>commit</code>，同时重置暂存区，但工作区不变。</li>
<li><code>git reset --hard [commit]</code>: 重置当前分支的<code>HEAD</code>为指定<code>commit</code>，同时重置暂存区和工作区，与指定<code>commit</code>一致。</li>
<li><code>git reset --keep [commit]</code>: 重置当前<code>HEAD</code>为指定<code>commit</code>，但保持暂存区和工作区不变</li>
<li><code>git revert [commit]</code>: 新建一个<code>commit</code>，用来撤销指定<code>commit</code>，后者的所有变化都将被前者抵消，并且应用到当前分支。</li>
<li><code>git stash</code>、<code>git stash pop</code>: 暂时将未提交的变化移除，稍后再移入。</li>
<li><code>git reset --soft HEAD^</code>: 撤回<code>commit</code>操作，保留之前<code>commit</code>的代码。</li>
</ul>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><ul>
<li><code>git fetch [remote]</code>: 下载远程仓库的所有变动。</li>
<li><code>git remote -v</code>: 显示所有远程仓库。</li>
<li><code>git remote show [remote]</code>: 显示某个远程仓库的信息。</li>
<li><code>git remote add [shortname] [url]</code>: 增加一个新的远程仓库，并命名。</li>
<li><code>git pull [remote] [branch]</code>: 取回远程仓库的变化，并与本地分支合并。</li>
<li><code>git push [remote] [branch]</code>: 上传本地指定分支到远程仓库。</li>
<li><code>git push [remote] --force</code>: 强行推送当前分支到远程仓库，即使有冲突。</li>
<li><code>git push [remote] --all</code>: 推送所有分支到远程仓库。</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>利用node和Ajax交互</title>
    <url>/eternallycyf/%E5%88%A9%E7%94%A8node%E5%92%8CAjax%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h2 id="利用node和Ajax交互"><a href="#利用node和Ajax交互" class="headerlink" title="利用node和Ajax交互"></a>利用node和Ajax交互</h2><ul>
<li>为了理解<code>Ajax</code></li>
<li>因此我使用 <code>express</code> 框架和 <code>Ajax</code> 进行交互</li>
<li>来理解前端发起请求.后端返回数据的流程</li>
</ul>
<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><h3 id="package-jsn"><a href="#package-jsn" class="headerlink" title="package.jsn"></a>package.jsn</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;server.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;buffer&quot;</span>: <span class="string">&quot;^6.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;multer&quot;</span>: <span class="string">&quot;^1.4.4&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node server.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><ul>
<li>文件夹根路径使用 <code>npx server</code> 来运行</li>
<li>这里 <code>XMLHttpRequest</code>  我使用了 <code>onload</code> 直接捕捉成功阶段。</li>
<li>也可以使用 <code>onReadyStateChange</code> 来捕捉当 <code>readyState</code> 值为 <code>4</code>的时候和 <code>onload</code>是一样的</li>
<li><code>Notification</code> 是浏览器提示的功能 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 上传文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;file&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;upload()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 下载文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;download()&quot;</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    Notification.requestPermission()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8088/get?title=woshiget&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Notification(<span class="string">&quot;get请求&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">body</span>: xhr.responseText,</span></span><br><span class="line"><span class="javascript">          <span class="attr">icon</span>: <span class="string">&#x27;https://pic1.zhuanstatic.com/zhuanzh/50b6ffe4-c7e3-4317-bc59-b2ec4931f325.png&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="literal">null</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:8088/post?title=woshipost&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Notification(<span class="string">&quot;post请求&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">body</span>: xhr.responseText,</span></span><br><span class="line"><span class="javascript">          <span class="attr">icon</span>: <span class="string">&#x27;https://pic1.zhuanstatic.com/zhuanzh/50b6ffe4-c7e3-4317-bc59-b2ec4931f325.png&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="string">&#x27;body=woshipost&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> file = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#file&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="javascript">      formData.append(<span class="string">&#x27;file&#x27;</span>, file.files[<span class="number">0</span>])</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://localhost:8088/upload&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Notification(<span class="string">&quot;上传文件&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">body</span>: xhr.responseText,</span></span><br><span class="line"><span class="javascript">          <span class="attr">icon</span>: <span class="string">&#x27;https://pic1.zhuanstatic.com/zhuanzh/50b6ffe4-c7e3-4317-bc59-b2ec4931f325.png&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      xhr.send(formData)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">transformToBase64</span>(<span class="params">files, cb</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">&#x27;\ufeff&#x27;</span>, files], &#123; <span class="attr">type</span>: <span class="string">&#x27;image/jpeg&#x27;</span> &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line"><span class="javascript">      reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        cb(e.target.result)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      reader.readAsText(blob);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8088/download&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        transformToBase64(xhr.responseText, <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(x);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="string">&#x27;body=woshipost&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h3><ul>
<li>文件夹根路径使用 <code>nodemon server.js</code> 运行服务器</li>
<li>multer 用来存储文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> buffer = <span class="built_in">require</span>(<span class="string">&#x27;buffer/&#x27;</span>).Buffer;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 req.body</span></span><br><span class="line">express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">dest</span>: <span class="string">&#x27;./uploads&#x27;</span> &#125;)</span><br><span class="line">app.use(upload.any())</span><br><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line">app.all(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 托管静态资源</span></span><br><span class="line">app.use(express.static(__dirname + <span class="string">&#x27;/uploads&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.fields)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oldfilePath = req.files[<span class="number">0</span>].path</span><br><span class="line">  <span class="keyword">const</span> originalname = req.files[<span class="number">0</span>].originalname</span><br><span class="line">  <span class="comment">// 将上传的文件重命名放到 uploads 文件夹下</span></span><br><span class="line">  fs.rename(oldfilePath, <span class="string">`./uploads/<span class="subst">$&#123;originalname&#125;</span>`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;上传失败&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">&#x27;/download&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.join(__dirname, <span class="string">&#x27;/uploads/&#x27;</span>, <span class="string">&#x27;1.jpeg&#x27;</span>);</span><br><span class="line">  fs.readFile(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    res.send(data)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&#x27;8088&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;http://localhost:8088&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="uploads"><a href="#uploads" class="headerlink" title="uploads"></a>uploads</h3><ul>
<li>根路径新建一个文件夹叫做 <code>uploads</code></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域的解决方案</title>
    <url>/eternallycyf/%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="跨域的五种解决方案"><a href="#跨域的五种解决方案" class="headerlink" title="跨域的五种解决方案"></a>跨域的五种解决方案</h1><ul>
<li>什么是同源<ul>
<li>如果两个页面的协议域名和端口都相同 则两个页面具有相同的源</li>
</ul>
</li>
<li>同源策略<ul>
<li>如果不是同源就会跨域 如果请求不进行处理就会报错 <code>Access-control-Allow-xxx</code></li>
<li>如果同源  才会传给<code>AJAX</code>的<code>success</code>函数</li>
<li>跨域可以发送出去 服务器可以接收 但是会丢掉数据 不给信息</li>
</ul>
</li>
</ul>
<h2 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP"></a>1. JSONP</h2><ul>
<li>直接通过<code>script</code>标签的<code>src</code>属性获取<ul>
<li><code>script</code> 导入的文件会立即执行 </li>
<li>注意 引入的 <code>script</code> 标签要在函数定义的后面</li>
</ul>
</li>
<li>缺点是只能是<code>GET</code>请求<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># aaa.js  <span class="comment">// 可以服务器上触发,这里本地测试</span></span><br><span class="line">aaa(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"># index.html</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 10&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aaa.js?callback=aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2. CORS"></a>2. CORS</h2><ul>
<li>支持 <code>GET</code> 和 <code>POST</code> ,不兼容<code>IE</code></li>
<li>服务端在响应数据给浏览器的时候 ,在响应头添加一些字段,浏览器就会允许跨域了</li>
<li>例如 <code>nodejs</code>的 <code>express</code>框架的 <code>CORS</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//express</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, GET, POST, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;X-Requested-With&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;mytoken&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-Nginx转发"><a href="#3-Nginx转发" class="headerlink" title="3. Nginx转发"></a>3. Nginx转发</h2><ul>
<li>一般直接在服务器上配置,将请求直接转发到同源的地方就不会跨域了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//www.cnblogs.com/ysocean/p/9392908.html</span></span><br><span class="line">server&#123;</span><br><span class="line">   <span class="comment">//监听9099端口</span></span><br><span class="line">    listen <span class="number">9099</span>;</span><br><span class="line">    <span class="comment">// 本地的域名是localhost</span></span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment">//凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://baidu.com</span></span><br><span class="line">    location ^~ /api &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//baidu.com;</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-本地反向代理"><a href="#4-本地反向代理" class="headerlink" title="4. 本地反向代理"></a>4. 本地反向代理</h2><ul>
<li>本地开发阶段才能使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https 需要配置 secure headers(这个就是target的地址)</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://xxx.com&#x27;</span>, </span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123;&#x27;^/api&#x27;: &#x27;&#x27;&#125;   // 如果后端的请求路径也有 api  就需要重写</span></span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">Referer</span>: <span class="string">&#x27;https://xxx.com&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-k8s-Ingress"><a href="#5-k8s-Ingress" class="headerlink" title="5. k8s Ingress"></a>5. k8s Ingress</h2><ul>
<li><code>Ingress</code> 为外部访问集群提供了一个 统一 入口，避免了对外暴露集群端口</li>
<li>功能类似 <code>Nginx</code>，可以根据域名、路径把请求转发到不同的 <code>Service</code></li>
<li>可以配置 <code>https</code></li>
<li>如果是云服务商，会自动给你配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line"><span class="attr">kind</span>: Ingress</span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  name: simple-example</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  <span class="attr">rules</span>:</span><br><span class="line">  - host: tools.fun</span><br><span class="line">    <span class="attr">http</span>:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /easydoc</span><br><span class="line">        <span class="attr">pathType</span>: Prefix</span><br><span class="line">        <span class="attr">backend</span>:</span><br><span class="line">          service:</span><br><span class="line">            name: service1</span><br><span class="line">            <span class="attr">port</span>:</span><br><span class="line">              number: <span class="number">4200</span></span><br><span class="line">      - path: /svnbucket</span><br><span class="line">        <span class="attr">pathType</span>: Prefix</span><br><span class="line">        <span class="attr">backend</span>:</span><br><span class="line">          service:</span><br><span class="line">            name: service2</span><br><span class="line">            <span class="attr">port</span>:</span><br><span class="line">              number: <span class="number">8080</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/eternallycyf/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><ul>
<li>将多次执行变为最后一次执行</li>
<li>LoL回城</li>
<li>输入框<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><ul>
<li>多次执行变成每隔一段时间执行</li>
<li>lol 传送</li>
<li>滚动到底部加载更多<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">  <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">  <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Function创建函数</title>
    <url>/eternallycyf/%E5%88%A9%E7%94%A8Function%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul>
<li>可以以字符串的形式创建函数<ul>
<li><code>new Function(functionBody)</code></li>
<li><code>new Function(arg1, functionBody)</code></li>
<li><code>new Function(arg1, ... argN, functionBody)</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;console.log(a+b+c)&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a,b,c&#x27;</span>, <span class="string">&#x27;console.log(a+b+c)&#x27;</span>)</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Function的坑"><a href="#Function的坑" class="headerlink" title="Function的坑"></a>Function的坑</h2><ul>
<li>如果在函数内部用 <code>Function</code> 定义的函数</li>
<li>传入的变量只能是全局变量</li>
<li>在 <code>js</code> 环境是 <code>undefined </code></li>
<li>在 <code>node</code> 环境是 报错</li>
<li>其次 <code>Function.__proto__</code> 会指向自己的 <code>__prototype__</code> 这是语言默认的规定 他是其他构造器的基类<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b= <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;console.log(a+b+c)&#x27;</span>)</span><br><span class="line"><span class="comment">// eval(&#x27;!function _(c)&#123;console.log(a+b+c)&#125;(4)&#x27;) </span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t= test()</span><br><span class="line">t(<span class="number">4</span>) <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 不会闭包 直接使用全局的变量或自己Function内部定义的</span></span><br><span class="line"><span class="comment">// node的全局在global </span></span><br><span class="line"><span class="comment">// 用var定义的 获取不到 会直接报错</span></span><br><span class="line"><span class="comment">// 用eval定义的 可以访问内部作用域</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js数组排序</title>
    <url>/eternallycyf/js%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="Js实现数组排序"><a href="#Js实现数组排序" class="headerlink" title="Js实现数组排序"></a>Js实现数组排序</h1><p>常用排序的<code>Js</code>实现方案，包括原型链方法调用、简单选择排序、冒泡排序、插入排序、快速排序、希尔排序、堆排序、归并排序。</p>
<h2 id="原型链方法调用"><a href="#原型链方法调用" class="headerlink" title="原型链方法调用"></a>原型链方法调用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b); <span class="comment">// arr.__proto__.sort</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> n = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=i+<span class="number">1</span>; k&lt;n; ++k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[k] &lt; arr[minIndex]) minIndex = k;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(n²) 最好情况 O(n²) 最坏情况 O(n²) 空间复杂度 O(1) 不稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> n = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">    <span class="keyword">let</span> swapFlag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>; k&lt;n-i-<span class="number">1</span>; ++k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[k] &gt; arr[k+<span class="number">1</span>]) &#123;</span><br><span class="line">            swapFlag = <span class="literal">true</span>;</span><br><span class="line">            [arr[k], arr[k+<span class="number">1</span>]] = [arr[k+<span class="number">1</span>], arr[k]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!swapFlag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(n²) 最好情况 O(n) 最坏情况 O(n²) 空间复杂度 O(1) 稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> n = arr.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;n; ++i)&#123;</span><br><span class="line">    <span class="keyword">let</span> preIndex = i-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> current = arr[i];</span><br><span class="line">    <span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">        --preIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex+<span class="number">1</span>] = current;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(n²) 最好情况 O(n) 最坏情况 O(n²) 空间复杂度 O(1) 稳定排序</span></span><br></pre></td></tr></table></figure>


<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, start, end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boundary = arr[start];</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end &amp;&amp; arr[end] &gt;= boundary) --end;</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end &amp;&amp; arr[start] &lt;= boundary) ++start;</span><br><span class="line">        arr[end] = arr[start];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[start] = boundary;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, start, end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &gt;= end) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">var</span> boundaryIndex = partition(arr, start, end);</span><br><span class="line">    quickSort(arr, start, boundaryIndex-<span class="number">1</span>);</span><br><span class="line">    quickSort(arr, boundaryIndex+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(nlogn) 最好情况 O(nlogn) 最坏情况 O(n²) 空间复杂度 O(logn) 不稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> gap=n/<span class="number">2</span>; gap&gt;<span class="number">0</span>; gap=<span class="built_in">Math</span>.floor(gap/<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=gap; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k=i-gap; k&gt;=<span class="number">0</span> &amp;&amp; arr[k]&gt;arr[k+gap]; k=k-gap)&#123;</span><br><span class="line">                [arr[k], arr[k+gap]] = [arr[k+gap], arr[k]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">shellSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(nlogn) 最好情况 O(nlog²n) 最坏情况 O(nlog²n) 空间复杂度 O(1) 不稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span>(<span class="params">arr, i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">2</span>*i+<span class="number">1</span>; k&lt;n; k=<span class="number">2</span>*k+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> parent = arr[i];</span><br><span class="line">        <span class="keyword">if</span>(k+<span class="number">1</span> &lt; n &amp;&amp; arr[k] &lt; arr[k+<span class="number">1</span>]) ++k;</span><br><span class="line">        <span class="keyword">if</span>(parent &lt; arr[k])&#123;</span><br><span class="line">            [arr[i], arr[k]] = [arr[k], arr[i]];</span><br><span class="line">            i = k;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(n/<span class="number">2</span>-<span class="number">1</span>); i&gt;=<span class="number">0</span>; --i) adjustHeap(arr, i, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=n-<span class="number">1</span>; i&gt;<span class="number">0</span>; --i)&#123;</span><br><span class="line">        [arr[<span class="number">0</span>], arr[i]] = [arr[i], arr[<span class="number">0</span>]];</span><br><span class="line">        adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">heapSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(nlogn) 最好情况 O(nlogn) 最坏情况 O(nlogn) 空间复杂度 O(1) 不稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merger</span>(<span class="params">arr, start, mid, end, auxArr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startStroage = start;</span><br><span class="line">    <span class="keyword">var</span> midRight = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt;= mid &amp;&amp; midRight &lt;= end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[start] &lt;= arr[midRight]) auxArr[count++] = arr[start++];</span><br><span class="line">        <span class="keyword">else</span> auxArr[count++] = arr[midRight++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;=mid) auxArr[count++] = arr[start++];</span><br><span class="line">    <span class="keyword">while</span>(midRight&lt;=end) auxArr[count++] = arr[midRight++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;count; ++i) arr[i+startStroage] = auxArr[i];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr, start, end, auxArr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(start&lt;end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((start+end)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> left = mergeSort(arr, start, mid, auxArr); </span><br><span class="line">    <span class="keyword">var</span> right = mergeSort(arr, mid+<span class="number">1</span>, end, auxArr); </span><br><span class="line">    arr = merger(arr, start, mid, end, auxArr);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">arr = mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>, []);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 平均时间复杂度 O(nlogn) 最好情况 O(nlogn) 最坏情况 O(nlogn) 空间复杂度 O(n) 稳定排序</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/JavaScript/Js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F">https://blog.touchczy.top/#/JavaScript/Js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js的GC机制</title>
    <url>/eternallycyf/js%E7%9A%84GC%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Js的GC机制"><a href="#Js的GC机制" class="headerlink" title="Js的GC机制"></a>Js的GC机制</h1><p>在<code>Js</code>七种基本类型中的引用类型<code>Object</code>的变量其占据内存空间大且大小不固定，在堆内存中实际存储对象，在栈内存中存储对象的指针，对于对象的访问是按引用访问的。在栈区中执行的变量等是通过值访问，当其作用域销毁后变量也就随之销毁，而使用引用访问的堆区变量，在一个作用域消失后还可能在外层作用域或者其他作用域仍然存在引用，不能直接销毁，此时就需要通过算法计算该堆区变量是否属于不再需要的变量，从而决定是否需要进行内存回收，在<code>Js</code>中主要有引用计数与标记清除两种垃圾回收算法。</p>
<h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>对于引用计数垃圾回收算法，把对象是否不再需要简化定义为该对象有没有其他变量或对象引用到它，如果没有引用指向该对象，该对象将被垃圾回收机制回收。在这里，对象的概念不仅特指<code>JavaScript</code>对象，还包括函数作用域或者全局词法作用域。引用计数垃圾回收算法使用比较少，主要是在<code>IE6</code>与<code>IE7</code>等低版本<code>IE</code>浏览器中使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span> : &#123;</span><br><span class="line">        <span class="attr">b</span>: <span class="number">11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时两个对象被创建，一个作为另一个的a属性被引用称为对象1，另一个被obj变量引用称为对象2</span></span><br><span class="line"><span class="comment">// 此时两个对象都有被引用的变量，都不能回收内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line"><span class="comment">// 此时对于obj所引用的对象2，已经有obj与Obj2两个变量的引用</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 将obj对于对象2的引用解除，此时对象2还存在obj2一个引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = obj2.a;</span><br><span class="line"><span class="comment">// 引用对象1，此时对象1有a与a2两个引用</span></span><br><span class="line"></span><br><span class="line">obj2 = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 解除对象2的一个引用，此时对象2的引用数量为0，可以被垃圾回收</span></span><br><span class="line"><span class="comment">// 对象2的a属性引用被解除，此时对象1只有a2一个引用</span></span><br><span class="line"></span><br><span class="line">a2 = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 解除a2对于对象1的引用，此时对象1可以被垃圾回收</span></span><br></pre></td></tr></table></figure>

<p>但是对于引用计数垃圾回收算法有个限制，当对象循环引用时，就会造成内存泄漏，也就是引用计数垃圾回收算法无法处理循环引用的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 命名为对象1，此时引用数量为1</span></span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;&#125;; <span class="comment">// 命名为对象2，此时引用数量为1</span></span><br><span class="line">    obj.a = obj2; <span class="comment">// obj的a属性引用obj2，此时对象2的引用数量为2</span></span><br><span class="line">    obj2.a = obj; <span class="comment">// obj2的a属性引用obj，此时对象1的引用数量为2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 此时执行栈的obj变量与obj2变量被销毁，对象1与对象2的引用数量减1</span></span><br><span class="line">    <span class="comment">// 对象1的引用数量为1，对象2的引用数量为1，两个对象都不会被引用计数算法垃圾回收</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funct();</span><br><span class="line"><span class="comment">// 两个对象被创建，并互相引用，形成了一个循环，它们被调用之后会离开函数作用域，所以它们已经不再需要了，可以被回收了，然而引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</span></span><br></pre></td></tr></table></figure>

<h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>对于引用计数垃圾回收算法，把对象是否不再需要简化定义为该对象是否可以获得，该算法设置一个叫做根<code>root</code>的对象，在<code>Javascript</code>里根是全局对象，垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象，以此不断向下查找。从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象，这样便解决了循环引用的问题。所有现代浏览器都使用了标记清除垃圾回收算法，所有对<code>JavaScript</code>垃圾回收算法的改进都是基于标记清除算法的改进。</p>
<ul>
<li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。</li>
<li>然后，它会去掉运行环境中的变量以及被环境中变量所引用的变量的标记。</li>
<li>此后，依然有标记的变量就被视为准备删除的变量，原因是在运行环境中已经无法访问到这些变量了。</li>
<li>最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.touchczy.top/#/JavaScript/Js%E7%9A%84GC%E6%9C%BA%E5%88%B6">https://blog.touchczy.top/#/JavaScript/Js%E7%9A%84GC%E6%9C%BA%E5%88%B6</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的几种全局对象</title>
    <url>/eternallycyf/js%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="js中的几种全局对象"><a href="#js中的几种全局对象" class="headerlink" title="js中的几种全局对象"></a>js中的几种全局对象</h2><ul>
<li>在 <code>web</code> 环境下定义的变量 默认在 <code>window</code> 下<ul>
<li>严格模式内部作用域定义的 不在 <code>window</code> 下</li>
</ul>
</li>
<li>在<code>node</code>环境中 用<code>var</code>定义的不是全局对象下的变量<ul>
<li>不能直接在其他作用域访问。他的全局对象是 <code>global</code></li>
<li>而且并不会隐式的将他放在全局对象下</li>
</ul>
</li>
<li>因此最新的 <code>ECMA</code> 提案规定了通用的全局对象 <code>globalThis</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">web: <span class="built_in">window</span> self frames <span class="built_in">this</span></span><br><span class="line"><span class="attr">node</span>: <span class="built_in">global</span>  </span><br><span class="line"><span class="attr">worker</span>: self</span><br><span class="line">通用: globalThis</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis">globalThis-mdn</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自己实现一个$.ajax</title>
    <url>/eternallycyf/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA$.ajax/</url>
    <content><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">       <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">       <span class="attr">header</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">       <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="built_in">Object</span>.assign(defaults, options);</span><br><span class="line">     <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     <span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> defaults.data) &#123;</span><br><span class="line">       params += attr + <span class="string">&#x27;=&#x27;</span> + defaults.data[attr] + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     params = params.substr(<span class="number">0</span>, params.length - <span class="number">1</span>);</span><br><span class="line">     <span class="keyword">if</span> (defaults.type == <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">       defaults.url = defaults.url + <span class="string">&#x27;?&#x27;</span> + params;</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.open(defaults.type, defaults.url);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (defaults.type == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> contentType = defaults.header[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">       xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, contentType);</span><br><span class="line">       <span class="keyword">if</span> (contentType == <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">         xhr.send(<span class="built_in">JSON</span>.stringify(defaults.data))</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         xhr.send(params);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       xhr.send();</span><br><span class="line">     &#125;</span><br><span class="line">     xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> contentType = xhr.getResponseHeader(<span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> responseText = xhr.responseText;</span><br><span class="line">       <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">         responseText = <span class="built_in">JSON</span>.parse(responseText)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">         defaults.success(responseText, xhr);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         defaults.error(responseText, xhr);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(&#123; </span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的小技巧</title>
    <url>/eternallycyf/js%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title="~~"></a>~~</h2><ul>
<li>用于数字取整</li>
<li>undefined null NaN 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~~(<span class="number">11.11</span>));     <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="-1"><a href="#-1" class="headerlink" title="**"></a>**</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指数运算</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">2</span>) <span class="comment">// 49</span></span><br><span class="line"><span class="number">7</span>**<span class="number">2</span>  <span class="comment">// 49</span></span><br></pre></td></tr></table></figure>

<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li>判断奇偶</li>
<li>undefined null NaN “” 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> &amp; <span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; <span class="number">1</span>) ;   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="-2"><a href="#-2" class="headerlink" title="!!"></a>!!</h2><ul>
<li>转换布尔值</li>
<li>undefined null NaN 0 “”都会变成 false</li>
<li>[] {} 会变成 true<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">7</span>);               <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>);       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="gt-gt"><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h2><ul>
<li>左位移一等于乘二</li>
<li>右位移一等于除二</li>
<li>undefined null NaN “” 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &gt;&gt; <span class="number">1</span>);      <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &lt;&lt; <span class="number">1</span>);      <span class="comment">// 32</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="slice-call"><a href="#slice-call" class="headerlink" title="[].slice.call"></a>[].slice.call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将arguments转换成数组</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">[].slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>];</span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> | <span class="built_in">Math</span>.random() * <span class="number">100</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span> % <span class="number">100</span> <span class="comment">//两位随机数</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span> % <span class="number">1000</span> <span class="comment">//三位随机数</span></span><br></pre></td></tr></table></figure>

<h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .substring() 的第二个参数控制取多少位 (最多可取13位)</span></span><br><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure>

<h2 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Google&quot;</span>.link(<span class="string">&quot;www.google.com&quot;</span>)); <span class="comment">// &lt;a href=&quot;www.google.com&quot;&gt;Google&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="快速判断IE8以下的浏览器"><a href="#快速判断IE8以下的浏览器" class="headerlink" title="快速判断IE8以下的浏览器"></a>快速判断IE8以下的浏览器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isIE8 = !+<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isIE8); <span class="comment">// false // Chrome 87</span></span><br></pre></td></tr></table></figure>

<h2 id="正确处理异常的方法"><a href="#正确处理异常的方法" class="headerlink" title="正确处理异常的方法"></a>正确处理异常的方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;http://stackoverflow.com/search?q=[js]+&quot;</span> +  e.message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/150556186">https://zhuanlan.zhihu.com/p/150556186</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/262533240">https://zhuanlan.zhihu.com/p/262533240</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.preventExtensions</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.preventExtensions/</url>
    <content><![CDATA[<h2 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions"></a>Object.preventExtensions</h2><ul>
<li>浅操作</li>
<li>让一个对象不可拓展</li>
<li>可删除 可修改 不可拓展</li>
<li>返回不可拓展的对象<ul>
<li>仅阻止添加自身的属性 </li>
<li>原型链属性还可以添加 但不能解除引用关系</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.preventExtensions(obj)</span><br><span class="line">#</span><br><span class="line">freeze 不可修改 不可删除 不可拓展</span><br><span class="line">seal 可修改 不可删除 不可拓展</span><br><span class="line">preventExtensions 可修改 可删除 不可拓展</span><br><span class="line"># 空对象都是<span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj)</span><br><span class="line"><span class="built_in">Object</span>.isFrozen(Obj) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(obj) <span class="comment">// ture</span></span><br></pre></td></tr></table></figure>

<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">d</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.deepPreventExtensions = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _keys = <span class="built_in">Object</span>.getOwnPropertyNames(o)</span><br><span class="line">    <span class="keyword">if</span> (_keys.length) &#123;</span><br><span class="line">      _keys.forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> _v = o[k];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> _v === <span class="string">&#x27;object&#x27;</span> &amp;&amp; _v !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="built_in">Object</span>.deepPreventExtensions(_v)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.preventExtensions(o)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.deepPreventExtensions(obj)</span><br><span class="line">  obj.b.c.e = <span class="number">5</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj);  <span class="comment">// 不存在e</span></span><br></pre></td></tr></table></figure>

<h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Symbol.iterator</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Symbol.iterator/</url>
    <content><![CDATA[<h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><ul>
<li>不可写 不可枚举 不可拓展</li>
<li>在原型链上有 <code>Symbol.iterator</code> 就可以使用迭代器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 没有 <span class="keyword">return</span> 就结束了  可以通过<span class="keyword">yield</span> 返回多次</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> x + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">let</span> g = foo() <span class="comment">//这个g不执行 只有通过 next() 才执行</span></span><br><span class="line">  g.next()</span><br><span class="line"># .next()  </span><br><span class="line">当 <span class="built_in">console</span>.log(g.next())的时候</span><br><span class="line">依照顺序 依次先执行 <span class="keyword">yield</span> 最后执行 <span class="keyword">return</span> 的东西 </span><br><span class="line">每次遇到 <span class="keyword">yield</span> 就返回一个对象&#123;<span class="attr">value</span>: x, <span class="attr">done</span>: <span class="literal">true</span>/<span class="literal">false</span>&#125; 然后暂停</span><br><span class="line"></span><br><span class="line">     value 就是 <span class="keyword">yield</span> 的返回值 done:<span class="literal">false</span></span><br><span class="line">      </span><br><span class="line">     <span class="attr">done</span>:<span class="literal">true</span> 的时候这个函数就执行完毕了 value 就是函数 <span class="keyword">return</span> 的值</span><br><span class="line"># next()可以接受传参 这个参数是上一个 <span class="keyword">yield</span> 语句的返回值</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">yield</span> <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="comment">// console.log(a) 2</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">console</span>.log(g.next(<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &lt; _this.length</span><br><span class="line">          ?</span><br><span class="line">          &#123; <span class="attr">value</span>: _this[index++], <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">          :</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v)  <span class="comment">// 1 2 3</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写new</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99new/</url>
    <content><![CDATA[<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ul>
<li>用于实例化构造函数</li>
<li>一旦<code>new</code>了就是基本包装类型</li>
<li>除了 <code>new Object</code> 指向引用是全等的</li>
<li>其他都是不全等的,两个等号会自动转换<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> <span class="built_in">Object</span>(obj)</span><br><span class="line"><span class="comment">// true 引用 object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj === obj) </span><br><span class="line">#</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(arr)</span><br><span class="line"><span class="comment">// let newArr = new Array(arr,3,4,5)</span></span><br><span class="line"><span class="built_in">console</span>.los(arr === newArr) <span class="comment">//false</span></span><br><span class="line"># </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> newA = <span class="keyword">new</span> <span class="built_in">Number</span>(a)</span><br><span class="line"><span class="built_in">console</span>.log(a===newA) <span class="comment">//false 原始类型和包装类型不相等</span></span><br><span class="line"><span class="built_in">console</span>.log(a==newA) <span class="comment">// true 非严格基本包装类型自动转换</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><ul>
<li><code>new</code> 做了什么<ul>
<li>在内存中开辟一个新的空间,存储创建的新的对象</li>
<li>把<code>this</code>设置为当前的对象</li>
<li>设置对象的属性和方法的值</li>
<li>把<code>this</code>这个对象返回<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>)</span><br><span class="line">  <span class="title">var</span> <span class="title">_this</span> = &#123;&#125;;</span><br><span class="line">  _this.__proto__ = <span class="title">constructor</span>.<span class="title">prototype</span>;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">_this, <span class="built_in">arguments</span></span>)</span><br><span class="line">  <span class="title">return</span> <span class="title">typeof</span> <span class="title">res</span> === &#x27;<span class="title">object</span>&#x27; ? <span class="title">res</span> : <span class="title">_this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">function</span> <span class="title">Test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.a = a;</span><br><span class="line">  <span class="built_in">this</span>.b = b;</span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   c: 3,</span></span><br><span class="line">  <span class="comment">//   d: 4</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Test.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = myNew(Test, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// console.log(Test(1, 2));</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.is</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.is/</url>
    <content><![CDATA[<h2 id="js的相等逻辑"><a href="#js的相等逻辑" class="headerlink" title="js的相等逻辑"></a>js的相等逻辑</h2><ul>
<li>严格模式 <code>Strict Equality === </code></li>
<li>抽象相等 <code>Strict Equality ==</code></li>
<li>零值相等 <code>-0 === +0</code></li>
<li>同值相等 <code>-0 !== +0 NaN === NaN  </code><ul>
<li><code>Object.definedProperty</code> 定义<code>value</code>的时候<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 严格模式</span><br><span class="line"><span class="comment">// 引用值必须是同一地址 不进行隐式转换</span></span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span>   <span class="comment">// true</span></span><br><span class="line">&#123;&#125; === &#123;&#125;   <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">Infinity</span> === <span class="literal">Infinity</span> <span class="comment">// true</span></span><br><span class="line">+<span class="literal">Infinity</span> === -<span class="literal">Infinity</span> <span class="comment">// false</span></span><br><span class="line"># 抽象相等</span><br><span class="line"><span class="comment">//  隐式类型转换 转换后用严格模式判断 </span></span><br><span class="line"><span class="comment">//  转换成原始类型 如果是对象将调用 toString() valueOf() </span></span><br><span class="line"><span class="comment">//  具体可以参考 mdn 官网的 对照表</span></span><br><span class="line"><span class="comment">//  转换的falsy值 8个 0 +/-0 8n &quot;&quot; &#x27;&#x27; `` null undefined NaN</span></span><br><span class="line"><span class="comment">//  窄对象(Narrow Object) 待定的类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">document</span>.all <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="built_in">document</span>.all == <span class="string">&#x27;undefined&#x27;</span> <span class="comment">// true</span></span><br><span class="line"># <span class="built_in">Object</span>.js</span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true </span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false </span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false </span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.myIs = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">     <span class="comment">// 1/+0 === Infinity</span></span><br><span class="line">     <span class="comment">// 1/-0 === -Infinity</span></span><br><span class="line">     <span class="keyword">return</span> a !== <span class="number">0</span> || <span class="number">1</span> / a === <span class="number">1</span> / b</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> a !== a &amp;&amp; b !== b</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> result = <span class="built_in">Object</span>.myIs(<span class="literal">NaN</span>, <span class="literal">NaN</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">JavaScript 中的相等性判断-mdn</a></li>
</ul>
<h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写reduceRight</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99reduceRight/</url>
    <content><![CDATA[<h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line"> ]</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// var flag = arr.reduceRight(function (prev, item, index, arr) &#123;</span></span><br><span class="line"> <span class="comment">//   console.log(item);</span></span><br><span class="line"> <span class="comment">//   return item.age &gt; 2 &amp;&amp; prev + item.age</span></span><br><span class="line"> <span class="comment">// &#125;, 0)</span></span><br><span class="line"> <span class="comment">// console.log(flag)</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, hashMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (origin == <span class="literal">undefined</span> || <span class="keyword">typeof</span> origin !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> origin</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(origin)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(origin)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> hashKey = hashMap.get(origin);</span><br><span class="line">   <span class="keyword">if</span> (hashKey) &#123;</span><br><span class="line">     <span class="keyword">return</span> hashKey;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> target = <span class="keyword">new</span> origin.constructor()</span><br><span class="line">   hashMap.set(origin, target)</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">     <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">       target[k] = deepClone(origin[k], hashMap)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> target</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Array</span>.prototype.myReduceRight = <span class="function"><span class="keyword">function</span> (<span class="params">cb, initValue</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">   <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">   <span class="keyword">var</span> _arg3 = <span class="built_in">arguments</span>[<span class="number">2</span>] || <span class="built_in">window</span>;</span><br><span class="line">   <span class="keyword">var</span> _item;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = _len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">     _item = deepClone(_arr[i])</span><br><span class="line">     initValue = cb.apply(_arg3, [initValue, _item, i, _arr])</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> initValue;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> flag = arr.myReduceRight(<span class="function"><span class="keyword">function</span> (<span class="params">prev, item, index, arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (item.age &gt; <span class="number">2</span>) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(prev, item, <span class="built_in">this</span>);</span><br><span class="line">     prev += item.age</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> prev</span><br><span class="line"> &#125;, <span class="number">0</span>, obj)</span><br><span class="line"> <span class="built_in">console</span>.log(flag)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写reduce</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99reduce/</url>
    <content><![CDATA[<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><ul>
<li><code>Array.reduce((pre,item,index,arr),initValue)</code></li>
<li><code>@return definedResult</code></li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var flag = arr.reduce(function (prev, item, index, arr) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(prev);</span></span><br><span class="line"><span class="comment">//   return item.age &gt; 2 &amp;&amp; prev + item.age</span></span><br><span class="line"><span class="comment">// &#125;, 0)</span></span><br><span class="line"><span class="comment">// console.log(flag)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, hashMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (origin == <span class="literal">undefined</span> || <span class="keyword">typeof</span> origin !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> origin</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(origin)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(origin)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> hashKey = hashMap.get(origin);</span><br><span class="line">  <span class="keyword">if</span> (hashKey) &#123;</span><br><span class="line">    <span class="keyword">return</span> hashKey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">new</span> origin.constructor()</span><br><span class="line">  hashMap.set(origin, target)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">      target[k] = deepClone(origin[k], hashMap)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">cb, initValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">  <span class="keyword">var</span> _arg3 = <span class="built_in">arguments</span>[<span class="number">2</span>] || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> _item;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">    _item = deepClone(_arr[i])</span><br><span class="line">    initValue = cb.apply(_arg3, [initValue, _item, i, _arr])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> initValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> flag = arr.myReduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev, <span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">return</span> item.age &gt; <span class="number">2</span> &amp;&amp; prev + item.age</span><br><span class="line">&#125;, <span class="number">0</span>, obj)</span><br><span class="line"><span class="built_in">console</span>.log(flag)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写some</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99some/</url>
    <content><![CDATA[<h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// var flag = arr.some(function (item, index, arr) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(item, index, arr, this);</span></span><br><span class="line">  <span class="comment">//   return item.age &gt; 5</span></span><br><span class="line">  <span class="comment">// &#125;, obj)</span></span><br><span class="line">  <span class="comment">// console.log(flag)</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.mySome = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">    <span class="keyword">var</span> _arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">var</span> _res = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cb.apply(_arg2, [_arr[i], i, _arr])) &#123;</span><br><span class="line">        _res = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> flag = arr.mySome(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> item.age &gt; <span class="number">3</span></span><br><span class="line">  &#125;, obj)</span><br><span class="line">  <span class="built_in">console</span>.log(flag)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写every</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99every/</url>
    <content><![CDATA[<h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line"> ]</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> flag = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">   <span class="keyword">return</span> item.age &gt; <span class="number">0</span></span><br><span class="line"> &#125;, obj)</span><br><span class="line"> <span class="built_in">console</span>.log(flag)</span><br><span class="line"> <span class="built_in">Array</span>.prototype.myEvery = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">   <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">   <span class="keyword">var</span> _arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>;</span><br><span class="line">   <span class="keyword">var</span> _res = <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!cb.apply(_arg2, [_arr[i], i, _arr])) &#123;</span><br><span class="line">       _res = <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> _res</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> flag = arr.myEvery(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">   <span class="keyword">return</span> item.age &gt; <span class="number">0</span></span><br><span class="line"> &#125;, obj)</span><br><span class="line"> <span class="built_in">console</span>.log(flag)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写filter</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99filter/</url>
    <content><![CDATA[<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// var newArr = arr.filter(function (item, index, arr) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(item, index, arr, this);</span></span><br><span class="line">  <span class="comment">//   return item.age &gt; 2</span></span><br><span class="line">  <span class="comment">// &#125;, obj)</span></span><br><span class="line">  <span class="comment">// console.log(newArr)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, hashMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (origin == <span class="literal">undefined</span> || <span class="keyword">typeof</span> origin !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> origin</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(origin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(origin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hashKey = hashMap.get(origin);</span><br><span class="line">    <span class="keyword">if</span> (hashKey) &#123;</span><br><span class="line">      <span class="keyword">return</span> hashKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="keyword">new</span> origin.constructor()</span><br><span class="line">    hashMap.set(origin, target)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">      <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">        target[k] = deepClone(origin[k], hashMap)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">    <span class="keyword">var</span> _arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">var</span> _newArr = []</span><br><span class="line">    <span class="keyword">var</span> _item;</span><br><span class="line">    <span class="keyword">var</span> _res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">      _item = deepClone(_arr[i]);</span><br><span class="line">      _res = cb.apply(_arg2, [_item, i, _arr]);</span><br><span class="line">      _res &amp;&amp; _newArr.push(_item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _newArr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newArr = arr.myFilter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> item.age &gt; <span class="number">2</span></span><br><span class="line">  &#125;, obj)</span><br><span class="line">  <span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写map</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99map/</url>
    <content><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul>
<li><code>Array.prototype.map((item,index,arr)=&gt;&#123;&#125;,this.arg)</code></li>
<li>第二个参数传入一个对象 改变 <code>this</code> 指向</li>
<li>然后就可以在回调函数中通过 <code>this.xxx</code> 获取到里面的值</li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var newArr = arr.map(function (item, index, arr) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(item, index, arr, this);</span></span><br><span class="line"><span class="comment">//   return item.name</span></span><br><span class="line"><span class="comment">// &#125;, obj)</span></span><br><span class="line"><span class="comment">// console.log(newArr)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, hashMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (origin == <span class="literal">undefined</span> || <span class="keyword">typeof</span> origin !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> origin</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(origin)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(origin)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> hashKey = hashMap.get(origin);</span><br><span class="line">  <span class="keyword">if</span> (hashKey) &#123;</span><br><span class="line">    <span class="keyword">return</span> hashKey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">new</span> origin.constructor()</span><br><span class="line">  hashMap.set(origin, target)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">      target[k] = deepClone(origin[k], hashMap)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">  <span class="keyword">var</span> _arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> _newArr = []</span><br><span class="line">  <span class="keyword">var</span> _item;</span><br><span class="line">  <span class="keyword">var</span> _res;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">    _item = deepClone(_arr[i]);</span><br><span class="line">    <span class="keyword">var</span> res = cb.apply(_arg2, [_item, i, _arr]);</span><br><span class="line">    _res &amp;&amp; _newArr.push(_res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newArr = arr.myMap(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">return</span> item.name</span><br><span class="line">&#125;, obj)</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写forEach</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99forEach/</url>
    <content><![CDATA[<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ul>
<li><code>forEach</code> 稀疏数组 自动过滤空值</li>
<li>内部用了 <code>while</code>循环<code>await</code>需要注意</li>
</ul>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 手写</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;l4&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;w5&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;thisArg&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">2222</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// arr.forEach(function (item, index, arr) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(item, index, arr, this);</span></span><br><span class="line">  <span class="comment">// &#125;, obj)</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _arr = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> _len = _arr.length;</span><br><span class="line">    <span class="keyword">var</span> _arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _len; i++) &#123;</span><br><span class="line">      cb.apply(_arg2, [_arr[i], i, _arr]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr.myForEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index, arr, <span class="built_in">this</span>);</span><br><span class="line">  &#125;, obj)</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.fromEntries</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.fromEntries/</url>
    <content><![CDATA[<h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h2><ul>
<li>把键值对列表转换为一个新的对象</li>
</ul>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#  <span class="built_in">Map</span> 转化为 <span class="built_in">Object</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>] ]);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(map);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br><span class="line"># array转<span class="built_in">Object</span></span><br><span class="line"><span class="keyword">const</span> arr = [ [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] ];</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(arr);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">  <span class="built_in">Object</span>.prototype.c = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> r = <span class="built_in">Object</span>.entries(obj)</span><br><span class="line">  <span class="comment">// console.log(r)</span></span><br><span class="line">  <span class="built_in">Object</span>.myFromEntries = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> o) &#123;</span><br><span class="line">      _obj[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="built_in">Object</span>.myFromEntries(r);</span><br><span class="line">  <span class="built_in">console</span>.log(newObj);</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.seal</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.seal/</url>
    <content><![CDATA[<h2 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal"></a>Object.seal</h2><ul>
<li>浅封闭</li>
<li>可读 可修改 不可删除 不可扩展</li>
<li>不能修改 <code>writeable,set,get...</code> 等配置</li>
<li>可以通过 <code>prototype</code> 和 <code>__proto__</code> 修改其的属性<ul>
<li>但是不能修改整个对象(的引用)</li>
</ul>
</li>
<li><code>Object.seal(obj)</code> 会返回原对象 并不是新的对象</li>
</ul>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.seal(obj)</span><br><span class="line">newObj.a = <span class="number">11</span>; <span class="comment">//true</span></span><br><span class="line">newObj.b = <span class="number">1</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="重写深封闭"><a href="#重写深封闭" class="headerlink" title="重写深封闭"></a>重写深封闭</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.deepSeal = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Objcet.keys() 拿不到不可枚举的属性</span></span><br><span class="line">  <span class="keyword">var</span> _keys = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line">  <span class="keyword">if</span>(_keys.length) &#123;</span><br><span class="line">    _keys.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">k</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _value = o[k];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> _value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; _value !== <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="built_in">Object</span>.deepSeal(_value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.Seal(o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.deepSeal(o)</span><br><span class="line">o.c.e.f = <span class="number">2222</span>;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.freeze</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.freeze/</url>
    <content><![CDATA[<h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h2><ul>
<li>浅冻结<ul>
<li>不能被修改 添加 删除 , 可读</li>
<li>不能修改 <code>writeable,set,get...</code> 等配置</li>
<li>可以通过 <code>prototype</code> 和 <code>__proto__</code> 修改其的属性<ul>
<li>但是不能修改整个对象(的引用)</li>
</ul>
</li>
</ul>
</li>
<li><code>Object.freeze(obj)</code> 会返回原对象 并不是新的对象</li>
</ul>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">this</span>.b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Test.c =<span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">const</span> newTest = <span class="built_in">Object</span>;</span><br><span class="line">newTest.protoType.c = <span class="number">333</span>; <span class="comment">// true</span></span><br><span class="line">newTest.__proto__.c = <span class="number">333</span>; <span class="comment">// true</span></span><br><span class="line">newTest.protoType = &#123;      <span class="comment">// false</span></span><br><span class="line">  <span class="attr">c</span>: <span class="number">333</span>;</span><br><span class="line">&#125;     </span><br><span class="line"># 只能浅冻结</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.freeze(obj)</span><br><span class="line">obj.a = <span class="number">2</span>  <span class="comment">// false</span></span><br><span class="line">obj.c.d = <span class="number">4</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="重写深冻结"><a href="#重写深冻结" class="headerlink" title="重写深冻结"></a>重写深冻结</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">e</span>: &#123;</span><br><span class="line">      <span class="attr">f</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.deepFreeze = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Objcet.keys() 拿不到不可枚举的属性</span></span><br><span class="line">  <span class="keyword">var</span> _keys = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(_keys.length) &#123;</span><br><span class="line">    _keys.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">k</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _value = o[k];</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> _value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; _value !== <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="built_in">Object</span>.deepFreeze(_value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.deepFreeze(o)</span><br><span class="line">o.c.e.f = <span class="number">2222</span>;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Object.entries</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99Object.entries/</url>
    <content><![CDATA[<h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h2><ul>
<li><code>for-in</code> 循环还会枚举原型链中的属性</li>
<li><code>Object.entries()</code> 不会枚举原型链中的属性<ul>
<li><code>Object.definedProty</code> 需要<code>enumerable:true</code> 才可枚举</li>
</ul>
</li>
</ul>
<h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.b = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  Test.prototype.c = <span class="number">22</span></span><br><span class="line">  <span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> testArr = <span class="built_in">Object</span>.entries(test)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> testArr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value); </span><br><span class="line">    <span class="comment">// a 1</span></span><br><span class="line">    <span class="comment">// b 2</span></span><br><span class="line">  &#125;</span><br><span class="line"># 转换成map</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">  <span class="built_in">Object</span>.prototype.c = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Object</span>.myEntries = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _pool = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o.hasOwnProperty(k)) &#123;</span><br><span class="line">          <span class="keyword">var</span> _arr = [k, o[k]]</span><br><span class="line">          _pool.push(_arr)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pool</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> r = <span class="built_in">Object</span>.myEntries(obj);</span><br><span class="line">  <span class="built_in">console</span>.log(r);</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写instanceOf</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99instanceOf/</url>
    <content><![CDATA[<h2 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h2><ul>
<li>用于判断是不是某个构造器构造的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; &#125;;</span><br><span class="line">  <span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">instanceOf</span>(<span class="params">target, type</span>) </span>&#123;</span><br><span class="line">    type = type.prototype;</span><br><span class="line">    target = target.__proto__;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (target === type) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      target = target.__proto__;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(test <span class="keyword">instanceof</span> Test)   <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(instanceOf(test, Test)) <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(instanceOf([], <span class="built_in">Array</span>))  <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(instanceOf([], <span class="built_in">Object</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>手写call、apply、bind</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99call%E3%80%81apply%E3%80%81bind/</url>
    <content><![CDATA[<h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><ul>
<li><code>bind</code>返回一个函数 但只能生效最后一次 类似链式调用</li>
<li>箭头函数忽略任何形式的<code>this</code>指向 <code>bind call apply</code></li>
<li>对象函数<code>this</code> 谁调用了他 <code>this</code>就是谁 <code>obj.test() test()</code> </li>
</ul>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果直接Push具体的值  args.push(arguments[i])</span></span><br><span class="line"><span class="comment">// eval执行的时候会自动调用 toString()将数组转成字符串</span></span><br><span class="line"><span class="comment">// 但是外界并没有这个变量</span></span><br><span class="line"><span class="comment">// [&#x27;zs,ls&#x27;].toString() =&gt; zs,ls</span></span><br><span class="line"><span class="comment">// ctx.originFn(zs,ls) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接push字符串 args.push(&#x27;arguments[&#x27; + i + &#x27;]&#x27;)</span></span><br><span class="line"><span class="comment">// 自动转换后可以获取到这个变量</span></span><br><span class="line"><span class="comment">// [&#x27;arguments[1]&#x27;, &#x27;arguments[2]&#x27;]  =&gt;</span></span><br><span class="line"><span class="comment">//       arguments[1],arguments[2]</span></span><br><span class="line"><span class="comment">// ctx.originFn(arguments[1],arguments[2]) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">      ctx = ctx ? <span class="built_in">Object</span>(ctx) : <span class="built_in">window</span>;</span><br><span class="line">      ctx.originFn = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> args = []; </span><br><span class="line">      <span class="comment">// [&#x27;arguments[1]&#x27;, &#x27;arguments[2]&#x27;]</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> ret = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> ctx.originFn</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test.myCall(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>)</span><br><span class="line"># 不拼接字符串</span><br><span class="line">  <span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">      ctx = ctx ? <span class="built_in">Object</span>(ctx) : <span class="built_in">window</span>;</span><br><span class="line">      ctx.originFn = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        obj[<span class="built_in">arguments</span>[i]] = <span class="built_in">arguments</span>[i]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> ret = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.originFn.apply(ctx,Object.keys(obj))&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> ctx.originFn</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test.myCall(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>)</span><br><span class="line"># es6</span><br><span class="line">  <span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">obj, ...arg</span>) </span>&#123;</span><br><span class="line">      obj = obj == <span class="literal">null</span> ? <span class="built_in">window</span> : <span class="built_in">Object</span>(obj);</span><br><span class="line">      <span class="keyword">let</span> val;</span><br><span class="line">      obj._fn_ = <span class="built_in">this</span>;</span><br><span class="line">      val = obj._fn_(...arg);</span><br><span class="line">      <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  test.myCall(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">obj, arr</span>) </span>&#123;</span><br><span class="line">      obj = obj == <span class="literal">null</span> ? <span class="built_in">window</span> : <span class="built_in">Object</span>(obj)</span><br><span class="line">      <span class="keyword">let</span> args = [];</span><br><span class="line">      <span class="keyword">let</span> val;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">&#x27;arr[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      obj._fn_ = <span class="built_in">this</span>;</span><br><span class="line">      val = <span class="built_in">eval</span>(<span class="string">&#x27;obj._fn_(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  test.myApply(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">  &#125;, [<span class="string">&#x27;sz&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"># es6</span><br><span class="line"> <span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">obj, arr</span>) </span>&#123;</span><br><span class="line">      obj = obj == <span class="literal">null</span> ? <span class="built_in">window</span> : <span class="built_in">Object</span>(obj)</span><br><span class="line">      <span class="keyword">let</span> args = [];</span><br><span class="line">      <span class="keyword">let</span> val;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        args.push(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      obj._fn_ = <span class="built_in">this</span>;</span><br><span class="line">      val = <span class="built_in">eval</span>(<span class="string">&#x27;obj._fn_(...args)&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  test.myApply(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">  &#125;, [<span class="string">&#x27;sz&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> utilsModule = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> originFn = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">var</span> _tempFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">      <span class="keyword">var</span> newFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newArgs = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> originFn.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> newFn ? <span class="built_in">this</span> : ctx, args.concat(newArgs))</span><br><span class="line">      &#125;</span><br><span class="line">      _tempFn.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">      newFn.prototype = <span class="keyword">new</span> _tempFn</span><br><span class="line">      <span class="keyword">return</span> newFn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  test.prototype.myLove = <span class="string">&#x27;aowo&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> a = test.myBind(&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">  &#125;, <span class="string">&#x27;sz&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  a()</span><br><span class="line">  <span class="built_in">console</span>.log(a.prototype.myLove)</span><br><span class="line">#</span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">obj,...arg1</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...arg2</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">let</span> args = arg1.concat(arg2);</span><br><span class="line">        <span class="keyword">let</span> val ;</span><br><span class="line">        obj._fn_ = <span class="built_in">this</span>;</span><br><span class="line">        val = obj._fn_( ...args ); </span><br><span class="line">        <span class="keyword">delete</span> obj._fn_;</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxy对象</title>
    <url>/eternallycyf/Proxy%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><ul>
<li><code>Proxy</code> 是代理, 和 <code>Object.defineproperty</code> 完全不同</li>
<li><code>Object.defineProperty</code>是用于监听属性，而<code>Proxy</code>是监听整个对象</li>
<li><code>Proxy</code> 代理了对象去进行操作</li>
<li>而<code>Object.defineProperty</code>则是数据劫持<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, prop, value</span>)</span> &#123;</span><br><span class="line">    target[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">target.b = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy, target);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h2><ul>
<li><code>Proxy.revocable(target, handler)</code></li>
<li><code>Proxy.revocable()</code>方法可以用来创建一个可撤销的代理对象，其返回一个包含了代理对象本身和它的撤销方法的可撤销<code>Proxy</code>对象。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handler.getPrototypeOf(): <span class="built_in">Object</span>.getPrototypeOf方法的捕捉器 <span class="comment">// 获取原型</span></span><br><span class="line">handler.setPrototypeOf(): <span class="built_in">Object</span>.setPrototypeOf方法的捕捉器 <span class="comment">// 设置原型</span></span><br><span class="line">handler.isExtensible(): <span class="built_in">Object</span>.isExtensible方法的捕捉器 <span class="comment">// 获取对象的可拓展性</span></span><br><span class="line">handler.preventExtensions(): <span class="built_in">Object</span>.preventExtensions方法的捕捉器  <span class="comment">// 禁止拓展对象</span></span><br><span class="line">handler.getOwnPropertyDescriptor(): <span class="built_in">Object</span>.getOwnPropertyDescriptor方法的捕捉器 <span class="comment">// 获取自有属性</span></span><br><span class="line">handler.defineProperty(): <span class="built_in">Object</span>.defineProperty方法的捕捉器 <span class="comment">// 拦截对象操作</span></span><br><span class="line">handler.has(): <span class="keyword">in</span>操作符的捕捉器  <span class="comment">// 判断是否是自身属性 obj.hasOwnProperty(&#x27;)</span></span><br><span class="line">handler.get(): 属性读取操作的捕捉器 <span class="comment">// &#x27;a&#x27; in obj  obj.a</span></span><br><span class="line">handler.set(): 属性设置操作的捕捉器 <span class="comment">// obj.a = 3</span></span><br><span class="line">handler.deleteProperty(): <span class="keyword">delete</span>操作符的捕捉器 <span class="comment">// 可删除 delete obj.a</span></span><br><span class="line"><span class="comment">// [Enumerate] 可枚举 </span></span><br><span class="line">handler.ownKeys(): <span class="built_in">Reflect</span>.ownKeys、<span class="built_in">Object</span>.getOwnPropertyNames、<span class="built_in">Object</span>.keys、<span class="built_in">Object</span>.getOwnPropertySymbols方法的捕捉器 <span class="comment">// 获取键集合</span></span><br><span class="line">handler.apply(): 函数调用操作的捕捉器</span><br><span class="line">handler.construct(): <span class="keyword">new</span>操作符的捕捉器</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> revocable = <span class="built_in">Proxy</span>.revocable(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[[ <span class="subst">$&#123;key&#125;</span> ]]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> proxy = revocable.proxy;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.example); <span class="comment">// [[ example ]]</span></span><br><span class="line">revocable.revoke();</span><br><span class="line"><span class="comment">// console.log(proxy.example);  // 抛出 TypeError</span></span><br><span class="line"><span class="comment">// proxy.example = 1;           // 抛出 TypeError</span></span><br><span class="line"><span class="comment">// delete proxy.example;        // 抛出 TypeError</span></span><br><span class="line"><span class="comment">// typeof proxy                 // &quot;object&quot;，因为 typeof 不属于可代理操作</span></span><br></pre></td></tr></table></figure>


<h2 id="手写一个Proxy"><a href="#手写一个Proxy" class="headerlink" title="手写一个Proxy"></a>手写一个Proxy</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyProxy</span>(<span class="params">target, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _target = deepClone(target);</span><br><span class="line">    <span class="built_in">Object</span>.keys(_target).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(_target, key, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> handler.get &amp;&amp; handler.get(target, key);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">          handler.set &amp;&amp; handler.set(target, key, newVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> _target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">org, tar</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> tar = tar || &#123;&#125;,</span><br><span class="line">        toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">        arrType = <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> org) &#123;</span><br><span class="line">        <span class="keyword">if</span> (org.hasOwnProperty(key)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> (org[key]) === <span class="string">&#x27;object&#x27;</span> &amp;&amp; org[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">            tar[key] = toStr.call(org[key]) === arrType ? [] : &#123;&#125;;</span><br><span class="line">            deepClone(org[key], tar[key]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tar[key] = org[key];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tar[key] = org[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> tar;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">  <span class="keyword">let</span> proxy = <span class="keyword">new</span> MyProxy(target, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, prop, value</span>)</span> &#123;</span><br><span class="line">      target[prop] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(proxy.a);</span><br><span class="line">  proxy.b = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><ul>
<li><a href="https://github.com/eternallycyf/jsFunctionsRewrite">https://github.com/eternallycyf/jsFunctionsRewrite</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>sourceCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Object.defineProperty</title>
    <url>/eternallycyf/Object.defineProperty/</url>
    <content><![CDATA[<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><ul>
<li><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</li>
<li>但是不能监听例如数组 <code>push shift</code> 等行为</li>
<li>因此 <code>vue</code> 数组下标更改数据无法触发 <code>getter setter</code>。所以<code>vue2</code>其实数组的方法(例如<code>push</code>)都是自己实现的</li>
<li>同时<code>vue2</code>的 <code>data()&#123; return&#123;&#125; &#125;</code> 之所以需要包裹一层函数<ul>
<li>为了防止引用的问题</li>
<li><code>vue3</code> 则不需要用函数包装 <code>proxy</code> 直接代理对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj,prop,&#123;</span><br><span class="line">  <span class="attr">value</span>:any,</span><br><span class="line">  <span class="attr">configurable</span>:boolean,</span><br><span class="line">  <span class="attr">enumerable</span>:boolean,</span><br><span class="line">  <span class="attr">writable</span>:boolean,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h2><ul>
<li>可以定义多个属性<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"> <span class="keyword">let</span> arr = []</span><br><span class="line"> <span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">   <span class="attr">a</span>: &#123;</span><br><span class="line">     <span class="attr">value</span>: <span class="number">12</span>,</span><br><span class="line">     <span class="comment">// 可重新赋值 </span></span><br><span class="line">     <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="comment">// 可枚举 -&gt; forin</span></span><br><span class="line">     <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="comment">// 可以被删除 delete defineObj.a</span></span><br><span class="line">     <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="comment">// 不能和value同时用</span></span><br><span class="line">     <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> a</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// 不能和writable同时用</span></span><br><span class="line">     <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (newValue &lt; <span class="number">10</span>) &#123;</span><br><span class="line">         a = newValue;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         a = <span class="number">5</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       arr.push(&#123; <span class="attr">value</span>: newValue &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> obj.a = <span class="number">4</span></span><br><span class="line"> obj.a = <span class="number">10</span></span><br><span class="line"> obj.a = <span class="number">3</span></span><br><span class="line"> <span class="built_in">console</span>.log(obj.a, arr);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js的浅拷贝与深拷贝</title>
    <url>/eternallycyf/js%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul>
<li>拷贝就是复制,就相当于把一个对象中的所有的内容,复制一份给另一个对象,直接复制,或者说,就是把一个对象的地址给了另一个对象,他们指向相同,两个对象之间有共同的属性或者方法,都可以使用</li>
</ul>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> a)&#123;</span><br><span class="line">      b[key]=a[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  extend(obj1,obj2);</span><br></pre></td></tr></table></figure>

<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target ,current)</span><br></pre></td></tr></table></figure>

<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(</span><br><span class="line">  <span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="展开运算符-…"><a href="#展开运算符-…" class="headerlink" title="展开运算符 …"></a>展开运算符 …</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>:<span class="number">12</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj &#125;</span><br></pre></td></tr></table></figure>

<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><ul>
<li>拷贝还是复制,深:把一个对象中所有的属性或者方法,一个一个的找到.并且在另一个对象中开辟相应的空间,一个一个的存储到另一个对象中</li>
</ul>
<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(a) )</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;<span class="attr">username</span>: <span class="string">&#x27; kobe&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">2</span>].username = <span class="string">&#x27;wade&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<h3 id="自己封装"><a href="#自己封装" class="headerlink" title="自己封装"></a>自己封装</h3><h4 id="es5"><a href="#es5" class="headerlink" title="es5"></a>es5</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;play&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">identity</span>: &#123;</span><br><span class="line">        <span class="attr">student</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">engineer</span>: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tar = target || &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">      <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> origin[k] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; origin[k] !== <span class="literal">null</span>) &#123;</span><br><span class="line">          tar[k] = toStr.call(origin[k]) === <span class="string">&#x27;[object Array]&#x27;</span> ? [] : &#123;&#125;</span><br><span class="line">                    <span class="keyword">if</span> (toStr.call(origin[k]) === <span class="string">&#x27;[object Date]&#x27;</span>) &#123;</span><br><span class="line">            tar[k] = origin[k]</span><br><span class="line">          &#125;</span><br><span class="line">          deepClone(origin[k], tar[k])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tar[k] = origin[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = deepClone(obj, &#123;&#125;)</span><br><span class="line">  newObj.info.hobby[<span class="number">2</span>].a = <span class="number">123</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj, newObj);</span><br></pre></td></tr></table></figure>

<h4 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;play&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">identity</span>: &#123;</span><br><span class="line">        <span class="attr">student</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">engineer</span>: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021-01-01&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, hashMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (origin == <span class="literal">undefined</span> || <span class="keyword">typeof</span> origin !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> origin</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(origin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (origin <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(origin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hashKey = hashMap.get(origin);</span><br><span class="line">    <span class="keyword">if</span> (hashKey) &#123;</span><br><span class="line">      <span class="keyword">return</span> hashKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="keyword">new</span> origin.constructor()</span><br><span class="line">    hashMap.set(origin, target)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> origin) &#123;</span><br><span class="line">      <span class="keyword">if</span> (origin.hasOwnProperty(k)) &#123;</span><br><span class="line">        target[k] = deepClone(origin[k], hashMap)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = deepClone(obj)</span><br><span class="line">  newObj.info.hobby[<span class="number">2</span>].a = <span class="number">123</span></span><br><span class="line">  newObj.date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="built_in">console</span>.log(obj, newObj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> test1 = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> test2 = &#123;&#125;</span><br><span class="line">  test2.test1 = test1</span><br><span class="line">  test1.test2 = test2</span><br><span class="line">  <span class="built_in">console</span>.log(deepClone(test2))</span><br></pre></td></tr></table></figure>


<h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">   <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/eternallycyf/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1. 解决方法"></a>1. 解决方法</h2><h3 id="1-1-通过-Set"><a href="#1-1-通过-Set" class="headerlink" title="1.1 通过 Set"></a>1.1 通过 Set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般工作中我都直接采用 set 进行集合运算 比较方便和容易理解</span></span><br><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> expectNumber = [...new <span class="built_in">Set</span>([...scores])].length <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-通过-filter"><a href="#1-2-通过-filter" class="headerlink" title="1.2 通过 filter"></a>1.2 通过 filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// 通过indexOf 让filter过滤掉多余的值</span></span><br><span class="line"><span class="keyword">let</span> expectNumber =scores.filter(<span class="function">(<span class="params">ele, index, arr</span>) =&gt;</span> arr.indexOf(ele)== index).length; <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h2 id="2-题源"><a href="#2-题源" class="headerlink" title="2. 题源:"></a>2. 题源:</h2><ul>
<li><a href="https://leetcode-cn.com/problems/qi-wang-ge-shu-tong-ji/">LCP 11.期望个数统一</a></li>
<li>看了半天没看懂题目是什么意思 。。于是回顾了下 数学期望值</li>
<li>数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和</li>
<li>举个例子 一个骰子 他能摇出来的所有结果的总和 就是他的期望值<ul>
<li>即只可能是 <code>[1,2,3,4,5,6]</code></li>
<li>不可能为<code>[2.5,...]</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>原型与原型链</title>
    <url>/eternallycyf/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="创建一个构造函数"><a href="#创建一个构造函数" class="headerlink" title="创建一个构造函数"></a>创建一个构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br></pre></td></tr></table></figure>

<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><ul>
<li>原型与原型链指向关系<ul>
<li>可以很清晰的看到 实例对象<code>test</code>的<code>__proto__</code>直接指向 构造函数 <code>Test.prototype</code></li>
<li>同时 构造函数 <code>Test.prototype.__proto__</code> 指向 <code>Object.prototype</code></li>
<li>而 <code>Object.prototype.__proto__</code> 最终指向 null</li>
<li>最终呈现了一个链状的结构</li>
</ul>
</li>
<li>构造函数与<code>Function Object</code> 内置对象的关系<ul>
<li><code>Function</code> 和 <code>Object</code> 既是函数又是对象</li>
<li>由于<code>Function.__proto__ === Function.prototype</code>,这是一个内置的规则</li>
<li>所以 <code>Object</code>的 <code>__proto__</code> 指向了他的构造函数 即是 <code>Function.prototype</code></li>
<li><code>Function</code> 是所有构造函数的基类</li>
</ul>
</li>
<li><code>constructor</code><ul>
<li>每个<code>prototype</code> 下都有一个 <code>constructor</code></li>
<li>而实例对象的 <code>constructor</code> 直接指向构造函数对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test.__proto__ === Test.prototype  <span class="comment">// true</span></span><br><span class="line">Test.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ <span class="comment">// null</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br><span class="line">Test.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__=== <span class="built_in">Function</span>.prototype<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.__proto__<span class="comment">//true</span></span><br><span class="line">test.constructor === Test <span class="comment">// true</span></span><br><span class="line">#</span><br><span class="line">test &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: Test.prototype = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">__proto__</span>: <span class="built_in">Object</span>.prototype = &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">__proto__</span>:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><ul>
<li>用于实例化构造函数</li>
<li>一旦<code>new</code>了就是基本包装类型</li>
<li>除了 <code>new Object</code> 指向引用是全等的</li>
<li>其他都是不全等的,两个等号会自动转换<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> <span class="built_in">Object</span>(obj)</span><br><span class="line"><span class="comment">// true 引用 object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj === obj) </span><br><span class="line">#</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(arr)</span><br><span class="line"><span class="comment">// let newArr = new Array(arr,3,4,5)</span></span><br><span class="line"><span class="built_in">console</span>.los(arr === newArr) <span class="comment">//false</span></span><br><span class="line"># </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> newA = <span class="keyword">new</span> <span class="built_in">Number</span>(a)</span><br><span class="line"><span class="built_in">console</span>.log(a===newA) <span class="comment">//false 原始类型和包装类型不相等</span></span><br><span class="line"><span class="built_in">console</span>.log(a==newA) <span class="comment">// true 非严格基本包装类型自动转换</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="手写new"><a href="#手写new" class="headerlink" title="手写new"></a>手写new</h2><ul>
<li><code>new</code> 做了什么<ul>
<li>在内存中开辟一个新的空间,存储创建的新的对象</li>
<li>把<code>this</code>设置为当前的对象</li>
<li>设置对象的属性和方法的值</li>
<li>把<code>this</code>这个对象返回<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>)</span><br><span class="line">  <span class="title">var</span> <span class="title">_this</span> = &#123;&#125;;</span><br><span class="line">  _this.__proto__ = <span class="title">constructor</span>.<span class="title">prototype</span>;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">_this, <span class="built_in">arguments</span></span>)</span><br><span class="line">  <span class="title">return</span> <span class="title">typeof</span> <span class="title">res</span> === &#x27;<span class="title">object</span>&#x27; ? <span class="title">res</span> : <span class="title">_this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">function</span> <span class="title">Test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.a = a;</span><br><span class="line">  <span class="built_in">this</span>.b = b;</span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   c: 3,</span></span><br><span class="line">  <span class="comment">//   d: 4</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Test.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = myNew(Test, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// console.log(Test(1, 2));</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>拿硬币</title>
    <url>/eternallycyf/%E6%8B%BF%E7%A1%AC%E5%B8%81/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>桌上有 <code>n</code> 堆力扣币，每堆的数量保存在数组 <code>coins</code> 中。我们每次可以选择任意一堆，</li>
<li>拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。<ul>
<li>例如: <code>[4,2,1] =&gt; 4</code></li>
<li><code>[2,3,10] =&gt; 8</code></li>
</ul>
</li>
<li>思路也很简单 <ul>
<li>当某堆硬币数<code>coin</code>是偶数时，拿取次数最少为<code>coin/2</code>次;</li>
<li>当某堆硬币数<code>coin</code>是奇数时，拿取次数最少为<code>coin/2 + 1</code>次;</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(coin % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">    count = coin / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    count = coin / <span class="number">2</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coins =  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>];</span><br><span class="line">coins[<span class="number">0</span>] = <span class="built_in">Math</span>.ceil(coins[<span class="number">0</span>]/<span class="number">2</span>)</span><br><span class="line">coins.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + <span class="built_in">Math</span>.ceil(c / <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-2-位运算"><a href="#2-2-位运算" class="headerlink" title="2.2 位运算"></a>2.2 位运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coins = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> coins)&#123;</span><br><span class="line">  <span class="comment">// item/2并向上取整 + 如果是奇数要+1否则+0</span></span><br><span class="line">  count+=(item &gt;&gt; <span class="number">1</span>) + (item &amp; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count)  <span class="comment">// 8 </span></span><br></pre></td></tr></table></figure>

<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li>LCP 06. 拿硬币(<a href="https://leetcode-cn.com/problems/na-ying-bi/">https://leetcode-cn.com/problems/na-ying-bi/</a>)</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>匿名函数与自执行函数</title>
    <url>/eternallycyf/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><ul>
<li>匿名函数就是指的没有名字的函数</li>
<li>在创建中将函数赋值给一个变量<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们通常创建函数有两个方式。利用Function创建这里不谈</span></span><br><span class="line"><span class="comment">//   普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//   命名函数 =&gt; 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h2><ul>
<li>自执行即函数创建完成即调用<ul>
<li>必备条件是一个表达式</li>
<li>命名函数也就是一个表达式</li>
</ul>
</li>
<li>理论上函数后面加一个<code>()</code>函数就会执行</li>
<li>但是由于浏览器引擎的规定 必须是一个表达式才会执行 否则就会报错<ul>
<li>常见的这些符号都是表达式</li>
<li>= + - * / &amp;&amp; || true false () ~ new <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123; &#125;()</span><br><span class="line"><span class="comment">// 函数表达式直接就能跟() 因为他就是表达式</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;--&#x27;</span>);</span><br><span class="line">  &#125;();</span><br><span class="line"><span class="comment">// w3c推荐</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  &#125;())</span><br><span class="line"><span class="comment">// 常用</span></span><br><span class="line">  ;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;--&#x27;</span>);</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="es3利用自执行函数构建的模块"><a href="#es3利用自执行函数构建的模块" class="headerlink" title="es3利用自执行函数构建的模块"></a>es3利用自执行函数构建的模块</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utilModules = (<span class="function">(<span class="params"><span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Utils</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.name = name;</span><br><span class="line">     <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   Utils.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">window</span>.Utils = Utils</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     Utils</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Function</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏数组与密集数组</title>
    <url>/eternallycyf/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AF%86%E9%9B%86%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><ul>
<li>数组的元素之间可以有空隙，因为一个数组其实就是一个键值映射</li>
<li><code>es5</code><ul>
<li><code>forEach(), filter(), reduce(), every() 和some()</code>都会跳过空位。</li>
<li><code>map()</code>会跳过空位，但会保留这个值</li>
<li><code>join()</code>和<code>toString()</code> 会将空位视为 <code>undefined</code>，而 <code>undefined</code>和 <code>null</code> 会被处理成空字符串。</li>
</ul>
</li>
<li><code>es6</code><ul>
<li><code>rray.from</code> 将数组的空位转为 <code>undefined</code></li>
<li>… 将空位转换为 <code>undefined</code></li>
<li><code>copyWithin</code> 将空位一起拷贝</li>
<li><code> fill()</code> 将空位视为正常的数组位置</li>
<li><code>for…of</code> 循环会遍历空位</li>
<li><code>entries()、keys()、values()、find()</code>和<code>findIndex()</code> 将空位处理成 <code>undefined</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, , , <span class="number">2</span>, , <span class="number">3</span>, , <span class="number">4</span>, , <span class="number">5</span>, , <span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]) <span class="comment">// undefined</span></span><br><span class="line">arr.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(item) &#125;)</span><br><span class="line"><span class="comment">// 1 undefined undefined 2 undefined ...</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(item) &#125;)</span><br><span class="line"><span class="comment">// 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure>

<h2 id="密集数组"><a href="#密集数组" class="headerlink" title="密集数组"></a>密集数组</h2><ul>
<li><code>Array.apply(null,Array(3));</code><ul>
<li><code>Array</code> 构造函数 当只有一个参数且为数字类型时 数组没有包含实际的元素</li>
<li><code>apply</code> 将空值 转换成了数组</li>
</ul>
</li>
<li>密集数组可以遍历并赋值</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>链表逆序两数相加</title>
    <url>/eternallycyf/%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</li>
<li>请你将两个数相加，并以相同形式返回一个表示和的链表。</li>
<li>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 虚拟头结点（构建新链表时的常用技巧）</span></span><br><span class="line">  <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 指针 p 负责构建新链表</span></span><br><span class="line">  <span class="keyword">let</span> p = dummy;</span><br><span class="line">  <span class="comment">// 记录进位</span></span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 开始执行加法，两条链表走完且没有进位时才能结束循环</span></span><br><span class="line">  <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 先加上上次的进位</span></span><br><span class="line">    <span class="keyword">let</span> val = carry;</span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l1.val;</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l2.val;</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理进位情况</span></span><br><span class="line">    carry = <span class="built_in">Math</span>.floor(val / <span class="number">10</span>);</span><br><span class="line">    val = val % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 构建新节点</span></span><br><span class="line">    p.next = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果链表的头结点（去除虚拟头结点）</span></span><br><span class="line">  <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/eternallycyf/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code></li>
<li>请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。<ul>
<li>例如 <code>nums = [2,7,11,15], target = 9,</code> 结果是: 返回 <code>[0, 1]</code></li>
</ul>
</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> diff = target - nums[i]</span><br><span class="line">  <span class="keyword">if</span>(hash.has(diff))&#123;</span><br><span class="line">    <span class="keyword">return</span> [hash.get(diff),i]</span><br><span class="line">  &#125;</span><br><span class="line">  hash.set(nums[i],i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>css使用js中的变量var()</title>
    <url>/eternallycyf/css%E4%BD%BF%E7%94%A8js%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8Fvar()/</url>
    <content><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h1><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这篇文章所指的<code>css</code>变量, 并不是指 <code>less</code> 等预编译语言的变量<code>(@)</code></li>
<li>而是直接在 <code>.css</code> 页面中使用 <code>.js|.html</code> 中所定义的变量 (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var()">var()-mdn</a>)</li>
<li>一般情况下 前端样式只要通过 js动态切换不同类名 行内样式</li>
<li>就可以在<code>React Vue</code> 中完成绝大多数的需求了</li>
<li>但是有些使用场景就需要原生 <code>css</code> 的 <code>var()</code> 变量。 或者说使用他可以达到更加方便的效果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设使用了一个组件库的一个小圆点, 而他内部是通过伪元素做的</span></span><br><span class="line"><span class="comment">// 此时的需求是 小圆点的颜色由用户决定,不是一个固定的值,你该如何控制呢?</span></span><br><span class="line"><span class="comment">// 我们通常的做法是 </span></span><br><span class="line"><span class="comment">//    1.定义不同的类名切换:  x =&gt; 颜色不是一个固定的值</span></span><br><span class="line"><span class="comment">//    2.行内样式直接传递:   x =&gt; 行内样式不能修改伪元素</span></span><br><span class="line"><span class="comment">//    3.自己重写:         x =&gt; 麻烦,这里只是一个用例,某些场景会极其繁琐</span></span><br><span class="line"><span class="comment">//    4.css in js       x =&gt; 公司项目一般不用这个 </span></span><br><span class="line"><span class="comment">//    5.dom操作          x =&gt; 不推荐</span></span><br><span class="line">这时候<span class="keyword">var</span>()就应运而生了</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原生html"><a href="#原生html" class="headerlink" title="原生html"></a>原生html</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># index.html </span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #dv &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">var</span>(--color);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> clickColor = <span class="string">&#x27;cornflowerblue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;dv&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    dv.innerHTML = <span class="string">`&lt;div id=&#x27;dv&#x27; style=&quot;--color:<span class="subst">$&#123;myColor&#125;</span>&quot;&gt;css&lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tsx"><a href="#tsx" class="headerlink" title="tsx"></a>tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125; <span class="keyword">as</span> React.CSSProperties;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;spanStyle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;--color:red&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">spanStyle</span>: &#123; <span class="string">&quot;--color&quot;</span>: <span class="string">&quot;green&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.span1</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">	<span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># vue3提供了API 直接v-bind就可以使用了</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.span1 &#123;</span><br><span class="line">	<span class="attr">color</span>: v-bind(变量);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>ps利用工具自动抠人像</title>
    <url>/eternallycyf/ps%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7%E8%87%AA%E5%8A%A8%E6%8A%A0%E4%BA%BA%E5%83%8F/</url>
    <content><![CDATA[<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><ul>
<li><a href="https://www.chuangkit.com/koutu">https://www.chuangkit.com/koutu</a></li>
<li><a href="https://www.remove.bg/zh">https://www.remove.bg/zh</a></li>
<li>稿定设计: 这个是收费的 一次几毛钱吧</li>
<li>第一个网址是免费高清图片的。第二个高清需要积分</li>
<li>只需要把图片拖进去就可以了</li>
<li>还可以点击设计 更换底色</li>
<li>用来证件照挺方便的</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title>快速制作手机效果图</title>
    <url>/eternallycyf/%E5%BF%AB%E9%80%9F%E5%88%B6%E4%BD%9C%E6%89%8B%E6%9C%BA%E6%95%88%E6%9E%9C%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><ul>
<li>打开这个网址 它提供了上千个外观样式 只需要上传张图片就可以自动合成了</li>
<li><a href="https://smartmockups.com/zh/mockups">https://smartmockups.com/zh/mockups</a></li>
<li>具体使用方法如下<img class="inline-img" src="https://img-blog.csdnimg.cn/57b7783d51094e27a9bd31d920d6a560.png" style="height:400px"/></li>
</ul>
<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><ul>
<li>随便打开一个链接 比如这个 <a href="https://smartmockups.com/zh/mockup/kXZo1wxohDQ">https://smartmockups.com/zh/mockup/kXZo1wxohDQ</a></li>
<li>点击从以下位置上传图片 </li>
<li>就可以发现图片合成成功了</li>
<li>但是这里有两个问题需要解决<ul>
<li>1.高分辨率图片要会员</li>
<li>2.图片有水印</li>
</ul>
</li>
</ul>
<img class="inline-img" src="https://img-blog.csdnimg.cn/b4527e3195eb488bb4e6424025aa1e28.png" style="height:400px"/>


<h3 id="高分辨率图片要会员"><a href="#高分辨率图片要会员" class="headerlink" title="高分辨率图片要会员"></a>高分辨率图片要会员</h3><ul>
<li>首先上传图片让他合成后。再进行以下操作</li>
<li>键盘点击 <code>F12</code> 进入开发者程序</li>
<li>点击右上角的设置图标</li>
<li>找到 <code>Debugger</code> 标题的哪一项</li>
<li>勾选 <code>Disable JavaScript</code></li>
<li>然后直接可以在图片上右键进行本地存储了</li>
<li>注意下载完后记得解除禁用 <code>Disable JavaScript</code></li>
</ul>
<img class="inline-img" src="https://img-blog.csdnimg.cn/2a539b8da2c74c0cb132f6c0d1142a86.png" style="height:400px"/>

<img class="inline-img" src="https://img-blog.csdnimg.cn/3f27e30d93094230921aeae115910fee.png" style="height:400px"/>

<h3 id="2-图片有水印"><a href="#2-图片有水印" class="headerlink" title="2.图片有水印"></a>2.图片有水印</h3><ul>
<li>我查看他的相关网络请求</li>
<li>他的流程是 用户上传图片后前端调用接口。后端返回有水印的合成图片</li>
<li>因此紧靠浏览器不能解决掉</li>
<li>目前只能使用免费版的了</li>
<li>自己可以用<code>ps</code>把水印清除掉</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>photoshop</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/eternallycyf/markdown/</url>
    <content><![CDATA[<h2 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h2><ul>
<li>Markdown是一种轻量级标记语言</li>
<li>是程序员记笔记的基本工具</li>
<li>简单的语法就可以满足绝大多数记笔记的需求</li>
</ul>
<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>Markdown支持6种级别的标题，对应html标签 h1 ~ h6<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line"><span class="section">## h2</span></span><br><span class="line"><span class="section">### h3</span></span><br><span class="line"><span class="section">#### h4</span></span><br><span class="line"><span class="section">##### h5</span></span><br><span class="line"><span class="section">###### h6</span></span><br></pre></td></tr></table></figure>
<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6></li>
</ul>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将被高亮显示...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这段文字将被高亮显示…</p>
</blockquote>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">点击跳转至百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com/">点击跳转至百度</a><br><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>无序列表使用*或+或-标识</li>
<li>有序列表使用数字加.标识，例如：1.<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 黄瓜</span><br><span class="line"><span class="bullet">*</span> 玉米</span><br><span class="line"><span class="bullet">*</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 黄瓜</span><br><span class="line"><span class="bullet">+</span> 玉米</span><br><span class="line"><span class="bullet">+</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 黄瓜</span><br><span class="line"><span class="bullet">-</span> 玉米</span><br><span class="line"><span class="bullet">-</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 黄瓜</span><br><span class="line"><span class="bullet">2.</span> 玉米</span><br><span class="line"><span class="bullet">3.</span> 茄子</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br></pre></td></tr></table></figure>
<p><em>这里是斜体</em><br><em>这里是斜体</em></p>
<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>
<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><ul>
<li>使用两对反引号包裹<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```语言</span></span><br><span class="line"><span class="code">  代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```markdown</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">项目|项目一|项目二</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">条目一</th>
<th align="center">条目二</th>
</tr>
</thead>
<tbody><tr>
<td align="center">项目</td>
<td align="center">项目一</td>
<td align="center">项目二</td>
</tr>
</tbody></table>
<h3 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">直接写 html 元素就可以了</span><br><span class="line">&lt;span style=<span class="string">&quot;color:green&quot;</span>&gt;green&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p><span style="color:green">green</span></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+/ 可以进入或退出源码模式</span><br><span class="line">此外 markdown还可以输入数学符号 流程图 等功能</span><br><span class="line">但是并不常用这里就不展开了 自己可以百度搜索试一试</span><br><span class="line">一般我是用做的图片直接放过来</span><br></pre></td></tr></table></figure>

<h2 id="推荐使用-Typora"><a href="#推荐使用-Typora" class="headerlink" title="推荐使用 Typora"></a>推荐使用 Typora</h2><ul>
<li><code>Typora</code> 是一个编写 <code>markdown</code> 的软件</li>
<li>比如表格这个还是比较繁琐的 使用 <code>Typora</code> 直接右键就可以插入表格了</li>
<li>其次 <code>Typora</code> 是用 <code>electron</code> 开发的</li>
<li>所以他里面的样式 都可以使用前端的方式随便修改<ul>
<li>设置里面 高级设置 开启调试默认 </li>
<li><code>F12</code> 就可以看到调试工具了</li>
<li>设置 - 外观 - 打开主题文件夹</li>
<li>在根目录新建一个 <code>base.user.css</code></li>
<li>然后编写自己想修改的样式就可以了 </li>
</ul>
</li>
</ul>
<h2 id="Markdown-Viewer"><a href="#Markdown-Viewer" class="headerlink" title="Markdown Viewer"></a>Markdown Viewer</h2><ul>
<li>直接用浏览器打开 <code>.md</code> 文件</li>
<li>为了方便查看 我一般直接浏览器打开<code>.md</code>文件</li>
<li>谷歌商店直接下载就行 注意要翻墙</li>
<li><a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=chrome-ntp-icon">Markdown Viewer</a></li>
<li>然后 <code>chrome</code> 打开拓展程序的设置界面 找到 <code>Markdown Viewer</code></li>
<li>开启两项配置<ul>
<li>自动允许访问以下网站 =&gt; file:///*</li>
<li>允许访问文件网址 </li>
</ul>
</li>
<li>然后在 <code>chrome</code> 右上角点击 <code>Markdown Viewer</code>的图标<ul>
<li>自己设置下样式</li>
<li>除了 <code>compiler</code> 中的 <code>pedantic</code></li>
<li>其他全部勾选</li>
</ul>
</li>
<li>然后只要把 <code>.md</code>文件拖到 <code>chrome</code> 上就能直接预览了</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/eternallycyf/hello-world/</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* javascript */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* php */</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; python &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* java */</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c++ */</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* C# */</span><br><span class="line">Console.WriteLine(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* golang */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell <span class="comment">#</span></span></span><br><span class="line">echo &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">/* vbscript */</span><br><span class="line"><span class="built_in">MsgBox</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[ Lua ]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
